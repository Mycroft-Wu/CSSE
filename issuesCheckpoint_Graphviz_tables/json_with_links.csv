"id","linked_id","summary","description","status","url","sha","created","merged","labels"
634,2044,"make some char pointer parameters to cgraph functions const","Towards #634.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2044","817700675dbe88878080a41890246964450c062a","2021-07-10 00:05:16.264-04","2021-07-18T01:18:07.054Z","[]"
2057,1760,"fix multiple definitions of CDT variables under MinGW on Windows","Building with MinGW on Windows resulted in lots of build errors of the form:

  …/x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):
    dtdisc.c:(.bss+0x0): multiple definition of `Dtset';
    CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first
    defined here

The problem is that this environment defines `_WIN32`, so it sees the `__declspec`
alternatives for `CDT_API` in cdt.h. This is fine as GCC understands `__declspec`,
but it results in variable declarations in this header then missing the `extern`
qualifier. GCC’s semantics, in contrast to MSVC, interpret this as a definition
rather than a declaration.

The solution here is to *always* apply `extern` to these declarations, as MSVC is
happy with this as well. This is only addressing the immediate cause, and not
the longer term issue that `__declspec(dllexport)` and `__declspec(dllimport)` in a
Windows build should really be mapped to `__attribute__((visibility(""default"")))`
and `__attribute__((visibility(""hidden"")))` in a non-Windows build, not to `extern`.

Fixes #1940. Thanks to @Synoecium and @swaldhoer for guidance on this fix.

----

@synoecium, @swaldhoer, do you have a chance to review/test this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1760","88ca57327b090c4b0003f07e3bd243c95d7c95a4","2021-02-15 00:04:45.622-05","2021-04-24T16:27:24.371Z","[]"
2007,334,"Remove wishlist items; migrated to issues.","- https://gitlab.com/graphviz/graphviz/-/issues/2008
- https://gitlab.com/graphviz/graphviz/-/issues/2007
- https://gitlab.com/graphviz/graphviz/-/issues/2006
- https://gitlab.com/graphviz/graphviz/-/issues/2005
- https://gitlab.com/graphviz/graphviz/-/issues/2004

Towards #79","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/334","3ce61ffda1d7becef3f70b7a5f2111c7332c5d98","2021-04-10 00:04:59.859-04","2021-04-10T23:51:33.660Z","[]"
2006,334,"Remove wishlist items; migrated to issues.","- https://gitlab.com/graphviz/graphviz/-/issues/2008
- https://gitlab.com/graphviz/graphviz/-/issues/2007
- https://gitlab.com/graphviz/graphviz/-/issues/2006
- https://gitlab.com/graphviz/graphviz/-/issues/2005
- https://gitlab.com/graphviz/graphviz/-/issues/2004

Towards #79","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/334","3ce61ffda1d7becef3f70b7a5f2111c7332c5d98","2021-04-10 00:04:59.859-04","2021-04-10T23:51:33.660Z","[]"
2334,3035,"dot_builtins: pass full path to GTS library to clang","Clang was having trouble finding homebrew GTS on my macOS.

This is similar to a series of other changes I made to fix cmake builds
on macOS previously (search the codebase for _LINK_LIBRARIES).

Fixes #2334","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3035","a9ab59f0bbfc15c419fab20a2401bc899137649c","2023-01-02 00:01:13.247-05","2023-01-03T08:55:46.169Z","[]"
2078,1980,"test case for #2078 and gvplugin bug fixing","This series started out as an attempt to address #2078, but I was soon side tracked into fixing orthogonal bugs I came across in plugin loading.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1980","45ae14230057452340ec4a67fab882da729b4739","2021-05-29 00:06:29.775-04","2021-06-05T02:44:59.735Z","[]"
1477,2033,"WIP: Add a very basic C++ API","Baby steps towards #2001.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2033","4a28ca138f27e4fb796caedbd90078e9cbc5ecdb","2021-07-04 00:08:07.471-04","","[]"
1521,1572,"remove compile time configuration via iffe","This patch series resolves #1422 and #1521.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1572","1a8df410a7469d962dc79c2c99846fb681e84a06","2020-09-12 00:02:27.984-04","2020-09-19T00:55:38.668Z","[]"
14,2701,"Fix overlap caused by penwidth for polygon-based nodes and normal and inv edge arrows","Following !2780, !2797, !2808, !2824, !2828, !2845 and !2849, this is the eighth in a series of MRs extracted from !2702. It fixes https://gitlab.com/graphviz/graphviz/-/issues/372 for all [polygon-based node shapes](https://graphviz.org/doc/info/shapes.html#polygon) (Note that this also includes ellipse-based shapes which Graphviz special-cases as two-sided polygons) except `cylinder` and for the `normal` and `inv` [primitive edge arrow shapes](https://graphviz.org/doc/info/arrows.html#primitive-shapes).

Upcoming MRs include (not necessarily in this order or partitioned like this):

- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.
- Replacement of the use of the rounding macro `POINTS` with the non-rounding macro `INCH2PS` which started already in this MR since it caused overlap problems.
- Fixes for other primitive edge arrow shapes.

Below are images showing the stepwise fixes applied for this DOT source:
```
digraph g1 {
  graph [rankdir=TB]
  node [penwidth=2 shape=box color=""#00000060""]
  edge [dir=both arrowhead=onormal arrowtail=oinv penwidth=2 color=""#00000060""]  a -> b
}
```
I've used a semi-transparent pen color to make it easy to see were the overlaps are.

Original image:

![step0.svg](/uploads/f5664c86e94855d09adf8cf9fcec8c13/step0.svg)

After taking edge penwidth into account when positioning arrow:

![step1.svg](/uploads/73792345da1491ff980e97bd95163c60/step1.svg)

After taking node penwidth into account when clipping edge at node boundary:

![step2.svg](/uploads/b69b21887f3906664a55e4895efc71f1/step2.svg)

After clipping the edge just inside the node outline boundary instead of just outside (to avoid a gap):

![step3.svg](/uploads/feed75ad3714b8a7042ca86fb09d6ccc/step3.svg)

After taking edge penwidth into account when clipping the edge stem at the edge arrowhead or arrowtail:

![step4.svg](/uploads/5ab12b803df7659b688c1956af52af94/step4.svg)

Below is a list of node shape families and arrow types to show which are fixed and not by this MR.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [ ] tee
- [ ] box
- [ ] diamond
- [ ] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2701","beede1476b3b23cd22ca1cb0f3b089aa397e42ab","2022-05-27 00:06:15.781-04","2022-10-11T20:46:22.761Z","[]"
1854,3148,"CI: build mingle and smyrna on macOS under Autotools","Gitlab: closes #1854","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3148","1e35f29bbf9c504d49c954b55a0686ad19d2c0e1","2023-04-01 00:03:11.423-04","2023-04-04T22:58:06.643Z","[]"
2058,2236,"Gts for windows","Added GTS to Mingw.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2236","bc0be9e8d92857e83b0c6171f79aa8b9f19ae803","2021-10-17 00:08:48.138-04","","[]"
14,2594,"Draft: add floating point equality checks in some places","Floating point comparisons are not safe.
Compile with -Wfloat-equal to see all 3K+ warnings.

This one, but not only, breaks assertions in chkSgraph.

Partially fixes 8 years old https://gitlab.com/graphviz/graphviz/-/issues/14 

Test `dot rtest/14.dot` still fails because of another revealed bugs.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2594","53675ab032cd65cc5652a323677e10dc5aa9b1e6","2022-04-13 00:03:36.672-04","","[]"
1477,1520,"WIP: disambiguate include paths (1/5)","This is part 1 of 5 of a patch series towards #1242 and #1785. None of the changes in this or the follow up parts are complicated, but there are a lot of them so I chose to split them up. They are:

1. disambiguate `lib/*/*.c` #includes (this MR)
2. disambiguate `cmd/*` #includes ([1785-2](https://gitlab.com/smattr/graphviz/-/tree/1785-2))
3. disambiguate `plugin/*` #includes ([1785-3](https://gitlab.com/smattr/graphviz/-/tree/1785-3))
4. disambiguate `tclpkg/*` #includes ([1785-4](https://gitlab.com/smattr/graphviz/-/tree/1785-4))
5. disambiguate `lib/*/*.h` #includes and remove extraneous include paths ([1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5))

@ldionne.2, can you confirm the final end state, [1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5) resolves your libc++ compilation problem?","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1520","56afa9562e8800686c6f7246d2f823e36b8a3ff3","2020-08-13 00:03:10.062-04","","[]"
1959,1799,"more precise dependencies for CI build tasks","This is an optimization that allows, e.g., the ubuntu18-04-build task to start
as soon as its Docker image is available and the portable source tarball has
been built. Prior to this change, this task would also block on all the other
docker_build_* tasks. Closes #1959.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1799","e3e1829a162264cac50cee8721a84db2d466adfd","2021-02-26 00:08:24.071-05","2021-02-26T06:16:31.384Z","[]"
2199,2586,"add a CONTRIBUTING.md, spelling out some implicit development practices","This is still incomplete, but it at least documents some things we have largely
been doing implicitly for awhile.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2586","0f9d80d1c9e84b710b424e62d93269b2151d6cb8","2022-04-12 00:06:53.239-04","2022-04-18T04:29:03.003Z","[]"
2298,2968,"drop special build system cases for ICC","The Intel C Compiler is now based on LLVM. We think this means it has a Clang
compatible front end, though we do not have access to it to check. If this is
accurate, it means the build system no longer needs any specialized ICC support.

Gitlab: closes #2298","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2968","8ba81fcb874e1acb5c5c5d2c49af4472d58dd1ae","2022-11-20 00:00:59.934-05","2022-11-22T16:51:43.961Z","[]"
1877,1686,"revert changes to add non-local names to internal map","Merge Request !1489 made a change to which names were stored in the internal
map. Following this, non-local names (user-provided ones; not starting with '%')
were stored in the internal map as well as local names. This inadvertently broke
some fdp and circo assumptions (#1876, #1877, !1676).

This change reverts the main pieces of the following commits, resolving #1876
and #1877, while re-opening #1767 and #1789.
   * 4f283dd1c02a6a4999b53ad2fcbf2264a7074a8b
   * 85b09cf13179b0e5ab8bddb4857e3d2af0a39a31
   * 9409324489a69557229d3d6f505857b9af85a913
   * 2a9449a99b2a2146fce01fa1d9713e999ad3dd4e
   * 14be5169ef49faad0f30cd9d36cdd438e1739f77
   * b6ffeca3a4457efcffbc3fcdbcee683375f74d05

We will need to find a different solution to #1767.

----

This is a more conservative MR that supersedes !1676. It simply backs out the original changes, reopening some issues.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1686","25e2d0cc91e026b54ebde6f1c7133d36ddb3bcdf","2020-11-29 00:03:19.22-05","2021-01-12T01:18:19.767Z","[]"
1873,2781,"expr: replace 'exdump' SFIO buffer with an 'agxbuf'","This change improves locality – it is more obvious to both users and the
compiler that the contents of this temporary buffer does not need to be retained
beyond calls to `exerror`. This is a small step towards deprecating SFIO.

The one commit that does the above is the heart of this MR, but there's also some work leading up to this and then some post simplification.

Gitlab: #1873","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2781","2799761afb1a28f5d509ad79baeb75fc14776850","2022-08-05 00:09:41.55-04","2022-08-06T19:13:43.899Z","[]"
1836,2564,"CMake: enable Poppler plugin and squash compiler warnings","Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2564","cf83148e04f6b081ff548a3a5ff98b7182d0878d","2022-04-06 00:03:25.919-04","2022-04-09T19:39:39.262Z","[]"
1800,2767,"Fix subgraph layout and rendering","This started out as an effort to just fix #1800, but after getting into the weeds I realized that I needed to understand subgraph layout in general and in that process I discovered memory allocation problems related to subgraph layout also in layout engines other than neato, so I ended up fixing those too. Along the way I stumbled on some closely related memory leaks with clusters which are now also fixed.

This MR obsoletes !1552 and fixes #1800.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2767","8bedb84b1654d3bd58e8db481ec81bf43cf95f82","2022-07-19 00:06:20.066-04","2022-07-25T19:26:07.417Z","[]"
2356,3160,"make #2356 failure non-strict","This test seems flaky whether it passes or fails. Unfortunately making it
non-strict will make it unnoticed if it starts reliably passing in future, but
we do not seem to have a better option.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3160","95c7d89c54a6dc7717e328ea3d49467accb9f05f","2023-04-05 00:08:03.029-04","2023-04-06T17:34:51.610Z","[]"
2364,1530,"Add windows build bash scripts and CI jobs","This is the second of two MR's with the overall goal to make it much easier for users to build Graphviz for Windows and for writing improved documentation on how to do it. This MR provides three `Bash` scripts and adds new Windows pipeline jobs that use them. The [other MR](https://gitlab.com/graphviz/graphviz/-/merge_requests/1529) provides PowerShell scripts with the same functionality.

* `setup-build-utilities.sh` - Tries to find specific build utilities in the user's path and if it doesn't find one falls back to set up the path to the utility in the Graphviz build utilities submodule at `windows\dependencies\graphviz-build-utilities`. Produces output messages to tell what it is doing and where the utilities have been found.
* `build.sh --build-system cmake|msbuild --configuration Release|Debug --platform Win32|x64` - Builds Graphviz provided that the build utilities have already been set up.
* `setup-and-build.sh` - First runs `setup-build-utilities.sh` and then `build.sh` with the arguments supplied.

The new jobs do not produce anything other than the PowerScript-based builds already do and hence the artifacts are not archived. The value they have is that they test that it it possible to build under bash and that the supplied bash scripts work.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1530","c7f5e3a10f8acab56ed204cdd217ea07fb9eea7d","2020-08-17 00:09:22.592-04","","[]"
1827,1629,"Fix tool usage on macOS and add macOS test jobs to gitlab CI","Fixes the -? option for all tools on macOS (#1852) and adds macOS test jobs to CI (#1827).","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1629","7a6da52abca39ce3e689291c458f75d23d658b7b","2020-10-21 00:02:29.662-04","2020-10-24T06:05:42.597Z","[]"
827,2719,"fix: anticipate non-normal edges during path construction","When constructing a path, the `beginpath` and `endpath` functions assumed they
could follow a chain of `.to_orig` back pointers to eventually reach a normal
edge. However this is not necessarily true, a situation exemplified by
tests/graphs/b15.gv that caused these traversal loops to eventually reach the
start of this linked list and then dereference a null pointer.

The fix in this commit is to simply treat the head of the list as the original
edge if we have not encountered a normal edge before then. Whether this is
correct or not seems unimportant, as a graph that causes this scenario is
incorrect. This change turns a crash during path construction into a graceful
exit later when the lack of normal edges is discovered.

This fix has similarities with 84e468e7. Perhaps
the code base should be audited for all such traversal loops, which seem to have
been written prior to a time when constructing a non-normal-edge-containing list
became possible.

Gitlab: fixes #827","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2719","2c07d238d7badf47879cbe98837ef658276f515f","2022-06-18 00:08:52.394-04","2022-06-23T04:59:21.810Z","[]"
1998,2071,"more sfprintf removal","More movement towards #1873, #1998.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2071","b336334b43656b06a34943ed1ae0ef08fb8a8934","2021-07-24 00:08:07.578-04","2021-08-04T03:31:54.388Z","[]"
1788,2535,"CMake: enable 'diffimg'","Note that the rtest/rtest.py work around is still not fully removed because
libgd is not currently available in the 64-bit Windows CI environment.

Gitlab: closes #1788","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2535","59f40f789c23f52e7b5ab9473a6a5cc0efa1d545","2022-03-27 00:08:54.142-04","2022-03-28T17:33:03.338Z","[]"
1984,1873,"fix: put HTML bit at the top of the count in reference counted strings","lib/cgraph/refstr.c implements reference-counted strings with the structure
refstr_t. Since the initial commit of cgraph,
d7767d4b5c511afa89b46798eea4e2f915930844, HTML_BIT has been (IMHO incorrectly)
set based on unsigned int instead of unsigned long. Presumably this was not an
issue because most machines were 32-bit x86 at the time, where
sizeof(unsigned int) == sizeof(unsigned long).

In the transition to x86-64 machines, this setup became awkward. The reference
count is 8 bytes wide, but HTML_BIT is set to be bit 31. I.e. the bit indicating
that a string is HTML is now in the middle of the reference count. A string with
≥ 2³¹ references, something that is possible on an x86-64 machine, now
accidentally sets the HTML bit. Note that this ecosystem transition also made
the comment about HTML_BIT incorrect, /* msbit of unsigned long */.

d1244c8001e8c681def4c0ff25a91136845c2a75 did a tree-wide replacement of unsigned
long with uint64_t, which further compounded the situation. Now the HTML bit is
in the incorrect position on both 32-bit and 64-bit x86.

The present change fixes this by moving the HTML bit into bit 63 of the refcnt
field. Fixes #1984.

It is questionable whether this even needs to be a bitfield, and not simply a
uint64_t and a bool, but I think we should leave this space optimization in
place for now.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1873","64b798af35624a9e54e5fed771e99b6cd7f6cea0","2021-03-29 00:03:10.385-04","2021-04-04T05:47:52.819Z","[]"
1773,1502,"Use preinstalled perl in CI","* Uses preinstalled perl instead of wasting time in CI to install it. This shaves off a good 5 minutes from the Windows builds.

Note that https://gitlab.com/graphviz/graphviz-build-utilities/-/merge_requests/3 should be merged before this MR and the submodule should be updated with that merge commit id before merge. Hence the WIP.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1502","b1c21d9c2e2c6d69620fac712878f9100281810e","2020-08-07 00:03:41.148-04","2020-08-09T18:13:40.237Z","[]"
1796,1522,"Correct uint_64_t typo to uint64_t in CMake files","* Motivation for this being correct:
    * The uint_64_t datatype does not exist in any library AFAICT
    * It fixes https://gitlab.com/graphviz/graphviz/-/issues/1796
    * The commit message of https://gitlab.com/graphviz/graphviz/-/commit/25fc2bcef8cb565f04081660fc60697d1f863b98 says that this was the original intention
    * The pipeline succeeds
* If someone can test this on Linux and/or macOS that would be appreciated.

Other mentions of `uint_64_t`:
* https://gitlab.com/graphviz/graphviz/-/merge_requests/1465
* https://gitlab.com/graphviz/graphviz/-/issues/1613#note_355406067","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1522","69a98fa67caea3281d615a10380cb10e2752a414","2020-08-13 00:07:19.638-04","","[]"
1979,1947,"output source data for Linux downloads on the website during deployment","Commit 1b218752f5b6a1e661e158337fc1b976424fc6a0 of the website repository¹
changed how Linux downloads appear on the website to be driven by a JSON data
file. This commit updates the deployment script to produce this file for a
release as a CI job artifact. Related to #1979.

¹ https://gitlab.com/graphviz/graphviz.gitlab.io

This is hard to test until we do the next release, but @markhnsn does this look right to you?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1947","a5b0b93eefc083d55c546750da92869a223f9741","2021-05-06 00:07:38.691-04","2021-05-12T19:25:03.762Z","[]"
570,3075,"common: some clarification of the HTML parser code","While looking into #570, I noticed a number of things that could be simplified/clarified.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3075","d0faf11056e1b3bb31b650843e9a0c7f52a5e9b2","2023-01-31 00:04:12.759-05","2023-02-14T21:14:12.812Z","[]"
1793,2593,"tred: [nfc] replace inline stack implementation with generic API","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2593","83d963152dddf3d1fa291d28583c9ff4c22d8c9f","2022-04-13 00:05:33.223-04","2022-04-16T05:46:37.159Z","[]"
2154,2405,"move the remainder of mingle into C++","Closes #2154.

There's still more simplification that could be done here, but left for the future.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2405","75f20271076ce1ba83006819866d71666d2429c7","2022-01-15 00:01:44.317-05","2022-01-16T20:00:25.780Z","[]"
2145,2236,"Gts for windows","Added GTS to Mingw.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2236","bc0be9e8d92857e83b0c6171f79aa8b9f19ae803","2021-10-17 00:08:48.138-04","","[]"
1801,1593,"remove one use of longjmp","Related to #1801. This also removes a large number of warnings.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1593","44f1fff7c1b7ebd4692180b3eb2d6519f92b6937","2020-09-27 00:06:13.889-04","2020-10-04T19:34:27.613Z","[]"
2325,3000,"fix out-of-bounds memory reads with large 'style' strings","Parsing a large style would acquire pointers into the `agxbuf` it wrote into,
but then go on to append more data to the buffer, potentially triggering a
reallocation thus leaving those prior pointers dangling. Later attempts to
access the style would read from these (now invalid) pointers. This bug has
existed since the very first commit of Graphviz.

Note that this change does nothing to alter the NUL-separated-string design of
the return value of `parse_style`. This still remains because some callers rely
on it, despite it being known as problematic.

Gitlab: fixes #2325","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3000","a4dcf7a66332a01e58d5528aa6a9eec1a9d245f5","2022-12-11 00:01:05.467-05","2022-12-14T02:01:15.090Z","[]"
1789,1489,"fix inconsistent iteration order over subgraphs","This is a second attempt at fixing #1767. There's actually two different issues fixed here:
* use of a potentially stale pointer in the Pango plugin
* subgraph iteration order dependent on heap pointers

This MR involved touching some code I only partially understand, so this could do with a careful review by others.

I'll merge on 2020-08-07 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1489","14be5169ef49faad0f30cd9d36cdd438e1739f77","2020-08-01 00:07:48.739-04","2020-08-08T02:17:43.737Z","[]"
1753,1477,"CMake installs missing symlinks/copies of dot and gml2gv; related to 1753","Issue #1753 noted a number of missing executables (`gvpr`, `neato`, `gv2gml`, *etc.*) when building with CMake. This change fixes simple cases where multiple commands were symlinked to the same real executable on unix-y platforms but were omitted on Windows due to uneven support of symlinks.

On Windows systems, CMake will now install copies of `dot` or `gml2gv` with the appropriate names (similar to the 2.38 `.msi` behavior); on non-Windows systems, symlinks will be made instead of copies. This is done within CMake/CPack so should work with 'dumb' archives (`.zip`, `.tgz`) as well as smarter installers (`.dmg`, `.exe`, `.msi`)

This MR doesn't address the missing `gvpr` which does not appear to be built under the current CMake configuration. Regardless, this should be a partial fix for #1753.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1477","d1af2c8316aa6bfeac292729cee7606e1a05851d","2020-07-21 00:04:58.198-04","","[]"
2331,3016,"Draft: Test case for Issue 2331","Signed-off-by: Gordon Smith <GordonJSmith@gmail.com>","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/3016","09f3f8d4288a15e3a45af5315019aad57c8020bf","2022-12-26 00:04:12.829-05","","[]"
1999,3017,"twopi: fix crash with > 65535 nodes","UBSan revealed the graph attached to #1999 was triggering two integer overflow, later on causing a crash in `twopi`. This fix still does
not enable the graph to be processed in a reasonable amount of time. It runs for several hours and then exceeds available memory. But `twopi` at least exits gracefully now.

Gitlab: #1999","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3017","5a0c69f09e31b2bf3145605fc4da128920f9f01f","2022-12-26 00:02:59.682-05","2023-01-08T21:41:06.645Z","[]"
1954,1828,"fix: remove BROWSER #define from Windows MS Build compilation","This is only used by two plugins, glitz and xlib, and it’s unclear whether
either are intended to run on Windows. The code path using BROWSER is also only
enabled when the build environment has sys/types.h and unistd.h, neither of
which typically exist on Windows. In any event, xdg-open is not the way to open
a browser on Windows. It is better that we exclude this and fail at compile time
than build plugins that fail in unpredictable ways at runtime. Closes #1954.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1828","df9326056703f22bb4843efcb6a62f62e67bc034","2021-03-04 00:07:01.501-05","2021-03-16T02:19:16.055Z","[]"
1873,1894,"more sfstropen removal","More work towards #1873 as well as some miscellaneous clean up and fixes noticed along the way.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1894","b3871c4de518e477b1e29304c666f9836bc4bede","2021-04-10 00:04:59.88-04","2021-04-18T02:53:17.721Z","[]"
1481,1340,"[Issue #1481]: MSB4018 The NativeCodeAnalysis task failed unexpectedly.","For *Debug* builds, *NativeRecommendedRules.ruleset* is used for code analysis (didn't investigate why, and why not on *Release*). The problem is that the file is referenced by ***Visual Studio 2015* default install path** (which is kind of lame), meaning it will fail for:
- *Visual Studio 2015* custom install path
- Other *Visual Studio* version (probably)

This *MR* removes the hardcoded path, leaving the file base name only (will be resolved internally by *Visual Studio* used to build the projects).

Tested manually with *Visual Studio 2017* installed in custom location.

Reference: #1481.

As a side note, I discovered this while debugging [\[SO\]: Pygraphviz crashes after drawing 170 graphs (@CristiFati's answer)](https://stackoverflow.com/questions/60876623/pygraphviz-crashes-after-drawing-170-graphs/61050313#61050313).
","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1340","b585d2d2517c17680a8ac92df2199368eaf73794","2020-04-04 00:03:30.976-04","2020-04-06T19:22:29.815Z","[]"
796,1443,"remove index.html fragment","@truenorth, this was added in 457c872a1ba01a48c7c2ac0393b7c04ce47ae21e but then never updated. I take it this is unused and can be removed?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1443","880cbdce61ce0f600f088b5aac5bc5beb5293cae","2020-06-26 00:09:00.546-04","2020-07-01T00:03:42.125Z","[]"
2058,1924,"Clean up export macro handling","This uses the CMake support to define the export macros to control exported symbols.  This is purely a clean up change and is not intended to result in any functional change.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1924","d065cab8b6733f9cb31183574500d8d447f4314a","2021-04-25 00:06:18.717-04","","[]"
2204,2531,"gvc: remove unused unistd.h #include","Gitlab: #2204","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2531","e27dfd3f2466a0ac84962bcebd766c2f44fd89c0","2022-03-26 00:02:26.168-04","2022-03-26T18:27:03.492Z","[]"
1742,1481,"remove exception-style control flow in rbtree","This removes the exception-style error handling in lib/rbtree, thus closing #1742. I'll merge on 2020-08-01 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1481","15379daf5273c8bcf3ffc09f75b8e29d003f262c","2020-07-26 00:06:18.842-04","2020-08-01T17:40:28.794Z","[]"
1246,1283,"Prevent exponential growth of length of edges in clusters","`edgelabel_ranks` gets called for the root graph and all of its cluster
subgraphs. It should only double `ED_minlen` for each edge once. Reverting the
test for labeled edges to check only the active graph, rather than its root,
prevents it from expanding the `minlen` once for every level of cluster
containing the edge.

Fixes #1246","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1283","b3e8099771ee752c791d861e2f936beba1cb5a14","2018-03-23 00:08:48.85-04","2018-05-04T22:05:08.774Z","[]"
1832,1662,"minor modernization in libvpsc","These are some pre-C++11-migration (#1832) steps to clean up a few things.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1662","4bf2972508d4abf0547036fa7a465848bf09ca6d","2020-11-07 00:09:00.851-05","2020-11-14T03:02:26.382Z","[]"
2091,2719,"fix: anticipate non-normal edges during path construction","When constructing a path, the `beginpath` and `endpath` functions assumed they
could follow a chain of `.to_orig` back pointers to eventually reach a normal
edge. However this is not necessarily true, a situation exemplified by
tests/graphs/b15.gv that caused these traversal loops to eventually reach the
start of this linked list and then dereference a null pointer.

The fix in this commit is to simply treat the head of the list as the original
edge if we have not encountered a normal edge before then. Whether this is
correct or not seems unimportant, as a graph that causes this scenario is
incorrect. This change turns a crash during path construction into a graceful
exit later when the lack of normal edges is discovered.

This fix has similarities with 84e468e7. Perhaps
the code base should be audited for all such traversal loops, which seem to have
been written prior to a time when constructing a non-normal-edge-containing list
became possible.

Gitlab: fixes #827","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2719","2c07d238d7badf47879cbe98837ef658276f515f","2022-06-18 00:08:52.394-04","2022-06-23T04:59:21.810Z","[]"
1457,1438,"Windows builds in the Gitlab CI/CD pipeline","* Adds the same builds as we currently have on Appveyor to the GitLab CI/CD pipeline
* When merged, will deploy binaries to https://www2.graphviz.org/Packages/development/windows/10/
* Includes an upgrade from Visual Studio 2015, Windows SDK 8.1 to Visual Studio 2019, Windows SDK 10.0
* Test run that deploys to https://www2.graphviz.org/Packages/experimental-development/windows/10/ can be seen [here](https://gitlab.com/graphviz/graphviz/-/pipelines/159672916). The Appveyor builds fail because Visual Studio 2019 is not supported there.
* When merged, the Appveyor builds will fail in master so want can't use them in parallel.
* Before merging I will prepare an update to the documentation

## Future enhancements deliberately not included
* Single source of truth for version numbering for autogen, CMake & MBuild (but !1440 provides this for CMake)
* Fix for https://gitlab.com/graphviz/graphviz/-/issues/1748
* Separation of Windows build and test jobs
* Windows Docker images with preinstalled prerequisites
  * Will speed up builds because no installations will be needed in the build jobs
  * Will remove the need for the git submodules containing dependencies","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1438","295817e55ebebb91be2262cca60868a69884247b","2020-06-24 00:01:04.873-04","2020-06-29T04:24:50.412Z","[]"
2131,2189,"gv2gml: fix attribute escaping","Fixes #1276.

The path to this was surprisingly long and winding, so this commit series may contain some surprises.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2189","7d607090a00e03d6809d61755dbbe39a003b875c","2021-09-25 00:06:01.734-04","2021-10-01T15:50:10.878Z","[]"
1854,2419,"fix Gvedit `-?` and enable building in CI on macOS","Related to #1842, #1852, #1854.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2419","ddd4c16ab065b503bf081c639572d179ffefffe7","2022-01-30 00:01:39.083-05","2022-02-02T07:48:29.132Z","[]"
1791,1476,"Single source of truth of Grahviz version for all build systems: autotools, CMake & MSbuild","Replaces all instances where the version was manually entered with one single location: the new `gen_version.py`script.

Also changes the versioning scheme from even minor versions for stable releases and odd minor versions for development releases to letting the development version have the same version as the next intended stable release with the suffix `~dev.<committer date>` added to the patch version number as discussed in preparatory discussion: https://forum.graphviz.org/t/version-numbering-going-forward/237","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1476","c6741197981d58157d5790a49a28dd7e4a4ad651","2020-07-21 00:00:46.681-04","2020-07-31T17:21:15.420Z","[]"
2080,2595,"Increase the size of mark to handle more clusters","This fixes the issue reported in #2080 where 128 clusters or more caused the trouble in init_rank error. This appears to be caused by the call to decompose from `collapse_cluster`: the first 127 calls correctly leave the size of the subgraph as 2 (i.e. following a call to `decompose(g)`, `GD_comp(g).size` is 2), but the 128th call sets `GD_comp(g).size` on the final subgraph to 0. The root cause of this appears to be a simple overflow in the mark variable: Cmark wraps-around to -127 which I think breaks the invariants of `search_component`.

I'm not completely sure if this is the right fix for this issue, but it does appear to fix it and also related problems I've seen on other graphs.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2595","4c8ba783e1cd72f7a65cf6369d0f893af67f4046","2022-04-13 00:06:37.352-04","2022-04-16T20:30:58.604Z","[]"
1770,1541,"Fix path too long using Windows CMake build .exe-installer","Fixed by using updated preinstalled NSIS with string length 8192.

Fixes https://gitlab.com/graphviz/graphviz/-/issues/1770.

Requires https://gitlab.com/graphviz/graphviz-build-utilities/-/merge_requests/12.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1541","66ed0ec6b34575d6ca2f0664e7f5c0efa8e1404e","2020-08-26 00:04:08.613-04","2020-08-26T14:52:18.438Z","[]"
1950,3056,"compiler warning squashing, fix a memory leak, remove some 'sprintf'","A bit of a grab bag of changes driven by more `sprintf` removal.

Gitlab: #1950","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3056","a5445c382962a4d2125d53b1a0103b6c35eb176c","2023-01-15 00:00:17.965-05","2023-01-21T05:39:16.296Z","[]"
2088,2216,"Draft: Builds with CMake and Mingw64 and GTS library.","This fixes the message ""label: area too large for rtree"" on Windows with sfdp/neato/fdp, which appears because GTS is removed Graphviz after 2.38.0 : See https://gitlab.com/graphviz/graphviz/-/issues/2088

Now it builds with CMake and Mingw64, and GTS. Also, several harmless compilers warnings are fixed.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2216","01fce40486fc6c7d847eaf4d4f9e8e9a39a6269f","2021-10-10 00:02:27.811-04","","[]"
1955,1834,"fix: correctly recognize Windows packages in deploy script","239f6301789b603202d500f7ae58e800354c1524 identified Windows packages containing
the word “Windows” but the package filenames actually have this in lower case.
Closes #1955.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1834","1e2be41d193613b4708c9172a0ea6359273155b8","2021-03-10 00:00:34.533-05","2021-03-10T01:48:06.937Z","[]"
2294,3109,"common: use a distinct type for arrow flags","Flags for arrows (type of the arrow and various modification bits) were being
stored in a `uint32_t` at known offsets. This had various downsides, including:

  1. Reading and writing fields of this (latent) struct required using bitwise
     operators. This is both error prone and permitted ambiguity in which
     `uint32_t` variables were storing a single flag and which were storing an
     array of flags.

  2. Using a scalar in this way defeats any type safety analysis the compiler
     can provide. It cannot determine where the boundaries between fields lie so
     cannot diagnose, e.g., writing `ARR_MOD_INV` to the type field instead of
     bit 5.

This change defines a proper struct for both an individual flag and for an array
of 4 flags. The actual bit layouts of both of these are intended to be
unchanged.

The definition of `arrowflag_t` in this commit uses a non-standard extension of
a `uint8_t` bitfield. This is technically not allowed by C99 but all major
compilers appear to support this extension.

Arrow flags outside of arrows.c are still represented as opaque `uint32_t`
values, which accurately models that no other code should need to deal with the
internals of this type.

Gitlab: closes #2294","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3109","ac6a330b389ce480ce95b64530af00652f843e32","2023-03-14 00:03:05.836-04","2023-03-19T03:08:33.068Z","[]"
1242,1588,"disambiguate #includes (4/5)","Following !1582, this is part 4 of the series towards #1242 and #1785.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1588","5ae6926db484707e39ae50fbd61c37c8594f89f2","2020-09-22 00:00:46.844-04","2020-09-29T00:22:48.340Z","[]"
2302,2997,"cgraph: remove 'agxbstart'","I have been doing some investigations into implementing Small String Optimization on `agxbuf` (#2302). Profiling some representative examples indicates this reduces peak memory usage by >50%.

Of the `agxbuf` interface, there are two problematic functions: `agxbstart` and `agxbnext`. Both of these allow acquiring pointers into the internal space of an `agxbuf` with difficult-to-preserve lifetime guarantees. Specifically, any operation that appends more data to the `agxbuf` must conservatively be assumed to invalidate a pointer previously returned from one of these functions. But this is not spelled out in comments or expressed in the type system.

Looking into how these functions are used, each is only called in a single place:
* `agxbnext` is called from `parse_style`. Its use here appears to be buggy (#2325) for exactly the hidden lifetime constraint described above.
* `agxbstart` is used in debug code in a way that is non-essential.

This MR rephrases the `agxbstart` call to avoid it and goes on to remove `agxbstart`. In future, we should do similar work on `agxbnext`.

Gitlab: related to #2325","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2997","9a5abdbbfec90edb8d4860b55831f9cf8a3fed90","2022-12-10 00:02:16.32-05","2022-12-14T01:03:05.992Z","[]"
1822,1981,"fix: do not fclose(NULL) in gvmap","As discussed on #1822, gvmap currently crashes sometimes. It seems this is not
input dependent, but rather platform dependent. This MR contains a partial fix; it fixes one problem, but it seems this was masking another platform-dependent problem.

CC @contyk","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1981","260f20a43cf1d7803157daddeb5e034a025efa58","2021-05-30 00:04:54.757-04","2021-06-05T03:39:52.247Z","[]"
1613,1,"Workaround for unresolved symbols in libcommon on OSX","(cherry picked from commit 992e6c2693c16c2a056efe849c612d0e1ee6d85e)
Adds `-fno-common` option when compiling `libcommon` on OSX. Weak fix for graphviz/graphviz#1613; see discussion.","opened","https://gitlab.com/apthorpe/graphviz/-/merge_requests/1","1b628544f02f65cc1e54fb9522f0f6ee2542cbc7","2020-07-12 00:05:25.706-04","","[]"
372,2650,"Minor cleanup in common","Some extremely minor things I found while working on #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2650","4f8af55f0d77fb875aefdbace45e258f53bee4ef","2022-05-04 00:02:47.604-04","2022-05-15T07:58:02.918Z","[]"
2000,2079,"plugin/gdiplus: Fix warning with header file name","This fixes the following warning with clang in mingw
warning: non-portable path to file '<gdiplus.h>'; specified path differs in case from file name on disk [-Wnonportable-include-path]","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2079","48b86be809c318b108c35f866096b9c5aaf09b7f","2021-07-28 00:02:50.737-04","","[]"
372,2914,"Fix issue 372 for diamond arrows","Following !2701, !2907 and !2910, this MR fixes #372 also for diamond shaped edge arrows.

Towards https://gitlab.com/graphviz/graphviz/-/issues/372.

Below is a list of node shape families and arrow types to show which are fixed and not by this and previous MRs.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [ ] tee
- [x] box
- [x] diamond
- [x] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2914","7a5b32e9334fef7e5e4171ea6012daa91138a319","2022-10-18 00:02:28.442-04","2022-10-31T06:01:53.956Z","[]"
372,2693,"remove unnecessary use of arrow_length function and make it static","In `sameport.c`, the output from the `arrow_length` function was unused. After removing that, the function is no longer used outside of its containing file.

Something I discovered while working on #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2693","5472a71aeaceb1b823ef695f3b7db912b5379095","2022-05-24 00:09:39.192-04","2022-05-25T12:36:11.288Z","[]"
1371,1719,"use release version for generic package version when possible","This addresses my comment from the 2.46.0 retrospective:

> I realized after the fact that, though the generic package versions have a
  restricted format, our release versions fit that format. I.e. we could have
  the generated 0.0.287364… versions for commit snapshots, but for packages that
  contain a release we could use a version that is the same as the release
  version itself, e.g. 2.46.0.

Now generic packages that correspond to a stable release will get the same
generic package version as the release version itself. This should avoid some
user confusion in future.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1719","1689e75690473faca5f8b4b4670d3e71465f9aba","2021-01-30 00:09:07.588-05","2021-02-06T03:12:29.465Z","[]"
1710,1345,"small fixes for larger graphs","Changes:
1. short -> int in rank values to avoid overflow
2. changes to cleanup1() to improve performance","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1345","ba59204bbb589d326504ba28b24b1c8a8b2fbe52","2020-04-19 00:03:09.003-04","2020-05-07T02:03:08.527Z","[]"
2088,2236,"Gts for windows","Added GTS to Mingw.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2236","bc0be9e8d92857e83b0c6171f79aa8b9f19ae803","2021-10-17 00:08:48.138-04","","[]"
1883,2162,"CMake: generate gzipped man pages if possible","On most platforms, man has built in support for reading gzipped man pages so it
is an advantage to compress these at build time to reduce Graphviz’ on-disk
footprint.

Closes #1883.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2162","ee364e62be2ada0dd6b6e45f53e79e48b7c59382","2021-09-14 00:01:41.943-04","2021-09-14T14:50:46.975Z","[]"
2332,3022,"Autotools: remove legacy `python` discovery","When removing Python 2 support, the discovery paths that checked for the Python
interpreter as `python` were retained to support older distros in the Red Hat
ecosystem where Python 3 goes by the name `python`. All currently supported
distros use the name `python3`, so this code is no longer needed.

Gitlab: related to #2332","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3022","971ac0baae6b4ce099afb8aab193a7a6b05110d1","2022-12-29 00:07:14.616-05","2022-12-30T18:25:38.023Z","[]"
2228,2566,"CMake: enable installation of example graphs","Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2566","28986573f2db664597354a22684472fe0e78af51","2022-04-07 00:06:21.567-04","2022-04-12T05:25:35.850Z","[]"
1791,1513,"Correct package version in CMake exe installer","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1791","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1513","eaf2a72750825978e4c12821f17199940abcb028","2020-08-11 00:04:19.509-04","2020-08-11T17:48:07.017Z","[]"
2363,3117,"fix test_1332 failing on macOS","Gitlab: fixes #2363","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3117","93562f634711af111bf7e4ae294d7d71a72a13fc","2023-03-18 00:05:31.755-04","2023-03-18T14:43:44.212Z","[]"
2102,2106,"Fix CMake options and add minimal build","This MR fixes a number of issues I discovered while working on https://gitlab.com/graphviz/graphviz/-/issues/2102 that are mostly unrelated to MinGW. I spawned it off from an upcoming MR to make that MR a little bit smaller.

Only one of the commits is actually a step towards https://gitlab.com/graphviz/graphviz/-/issues/2102.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2106","f0ce360a3d7bdd41b9d0d94fbd35725077a76c80","2021-08-17 00:07:33.048-04","2021-08-23T20:57:55.098Z","[]"
1776,1491,"fix: suppress Xlib finalization if initialization failed","The initialization function of a device plugin has no way of reporting failure
to its called. So an attempt to use the x11 back end calls xlib_finalize() even
if xlib_initialize() failed. To make this safe, we set a flag if initialization
succeeds and make xlib_finalize() a no-op if the flag is not set. Fixes #1776.

I'll merge this on 2020-08-07 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1491","e7af9da749352bd9367c14886895c5c41925af10","2020-08-02 00:03:05.245-04","2020-08-08T01:46:11.358Z","[]"
1824,1575,"fix failure to find Cairo, PangoCairo under CMake < 3.12","The changes introduced in 3ecf2f6206a486fecdea870b7f29ea539345642a and
b4f998c133566ef9cb416c085d1ce49e539bec30 were accidentally assuming the behavior
of PkgConfig that is only true after CMake 3.12. Namely that it sets the
*_LINK_LIBRARIES variable for packages it discovers. Closes #1824.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1575","b14ac3c0734fc493eb2247b915eae9aff26ca703","2020-09-13 00:06:47.385-04","2020-09-13T22:54:22.113Z","[]"
1719,2608,"Simplify PDF generation","* Make the suffix rule visible unconditionally, make only the PDF target (`pdf_DATA`) visible if `groff` is available and the user hasn't explicitly disabled PDF generation.

@smattr I have compared the different approaches, I don't think increasing the tarball by 10% just to bundle PDFs most people can generate themselves is worth it.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2608","def16bd0dd2cc161ac474c2ac1e2003a30224f0b","2022-04-17 00:09:12.705-04","2022-04-20T01:43:48.991Z","[]"
2317,2964,"remove 'GRAPHVIZ_VERSION_BUILD', 'GRAPHVIZ_VERSION_REVISION' from build system","These are only used in legacy Windows files that are no longer built.

Gitlab: #2317","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2964","54f29a7bad65e2d5024cd9032ff7b858bbc0925a","2022-11-19 00:05:41.884-05","2022-11-24T20:33:47.855Z","[]"
2285,2886,"Draft: SVG output format for inlining into HTML","Towards #2285

Also working around #2227

```
$ echo 'digraph {}' | /usr/local/bin/dot -Tsvg_inline
<!-- Generated by graphviz version 6.0.2~dev.20221007.1037 (20221007.1037)
 -->
<!-- Pages: 1 -->
<svg width=""8pt"" height=""8pt""
 viewBox=""0.00 0.00 8.00 8.00"">
<g id=""graph0"" class=""graph"" transform=""scale(1 1) rotate(0) translate(4 4)"">
<polygon fill=""white"" stroke=""none"" points=""-4,4 -4,-4 4,-4 4,4 -4,4""/>
</g>
</svg>
```","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/2886","0f5c5b2065563130a5f916468300b866f7af8c45","2022-10-07 00:02:59.911-04","","[]"
1793,2622,"lib/neatogen: replace inline stack with generic implementation","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation. This also introduces some missing allocation failure checks.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2622","274a040fdeea1d655e51c82d74be5a6d4525ddb2","2022-04-21 00:03:10.046-04","2022-04-24T04:02:38.637Z","[]"
1940,1760,"fix multiple definitions of CDT variables under MinGW on Windows","Building with MinGW on Windows resulted in lots of build errors of the form:

  …/x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):
    dtdisc.c:(.bss+0x0): multiple definition of `Dtset';
    CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first
    defined here

The problem is that this environment defines `_WIN32`, so it sees the `__declspec`
alternatives for `CDT_API` in cdt.h. This is fine as GCC understands `__declspec`,
but it results in variable declarations in this header then missing the `extern`
qualifier. GCC’s semantics, in contrast to MSVC, interpret this as a definition
rather than a declaration.

The solution here is to *always* apply `extern` to these declarations, as MSVC is
happy with this as well. This is only addressing the immediate cause, and not
the longer term issue that `__declspec(dllexport)` and `__declspec(dllimport)` in a
Windows build should really be mapped to `__attribute__((visibility(""default"")))`
and `__attribute__((visibility(""hidden"")))` in a non-Windows build, not to `extern`.

Fixes #1940. Thanks to @Synoecium and @swaldhoer for guidance on this fix.

----

@synoecium, @swaldhoer, do you have a chance to review/test this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1760","88ca57327b090c4b0003f07e3bd243c95d7c95a4","2021-02-15 00:04:45.622-05","2021-04-24T16:27:24.371Z","[]"
14,2577,"Draft: ortho: refactor checks","_Disclaimer: I don't know semantics of `np->cells`. If you know, pleae enlighten me. Or better add [doxygen] comments into the source._

I found that asserts in chkSgraph very likely are false negative
and redundant. Graphs, which trigger these asserts, after removing
asserts produce valid output. So I removed these asserts.

To preserve checks I've moved them from chkSgraph into
debug function emitSearchGraph.
Additionally I've made emitSearchGraph tolerant to absent cells.

Example of using `emitSearchGraph` with checks:

`dot rtest/14.dot -G'odb=s'`

Finally I've removed empty body and usage of function chkSgraph.

Fixes #14, #1408, #1447","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2577","1a4a2f39a40c90154048f13869b21073e4aeabb6","2022-04-09 00:03:17.307-04","","[]"
2102,2110,"make expr’s exparse.h a static checked-in file","There is no need to generate this file. It contains statically known content.
Generating it was proving a maintenance headache across the three build systems.
Related to #2102.

----

@magjac I piqued my own curiosity with https://gitlab.com/graphviz/graphviz/-/merge_requests/2107#note_658432644 and attempted to do it myself.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2110","09973560cc67c5277df8732ebba75da784afbe51","2021-08-24 00:01:26.551-04","2021-08-24T14:34:06.013Z","[]"
2001,2033,"WIP: Add a very basic C++ API","Baby steps towards #2001.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2033","4a28ca138f27e4fb796caedbd90078e9cbc5ecdb","2021-07-04 00:08:07.471-04","","[]"
1901,1703,"fix: suppress re-running CI on tagged commits","Several tasks in the CI setup were allowed to run on tagged commits. This meant
that pushing a new tag would result in re-running CI on the tagged commit. This
was already confusing, but was compounded by these unrestricted tasks depending
on non-tag-only tasks. The result was that CI would stall and fail because
dependencies could not be satisfied.

To fix this we simply disallow all CI on a tag. This means that a tagged commit
that is not on any branch will not be tested. However, no one should be pushing
such a commit to the Graphviz repository. All tagged commits that are on a
branch will be tested via their SHA. This is not expected to cause any problems
as the Graphviz build system never checks the Git tag or whether a commit is
tagged at all.

Fixes #1901.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1703","4b783f8d1bc2db323a712bd41e0094da8d31a122","2021-01-17 00:09:28.04-05","2021-01-24T02:17:42.682Z","[]"
1535,1315,"Mac dark mode fixes","Use correct colors in the Attributes table view, so text is readable in dark mode. Should fix #1535.

The main window toolbar item icons (like zoom in/out) still don't look right in dark mode though, I think a proper fix for this will be reworking the toolbar to use the modern ""segmented"" style like Preview.app and using those icons. This is a minor issue though.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1315","3339e2d094734826db485fa1fb74c10dc36b819d","2019-05-15 00:08:15.908-04","2019-05-25T00:20:53.448Z","[]"
372,2797,"Extend the SVG analyzer with Graphviz awareness","Following !2780, this is the second in a series of MRs extracted from !2702. It adds awareness of Graphviz graphs, nodes and edges to the SVG analyzer and the capability to calculate bounding boxes and center positions of nodes and graphs. It also adds a simple test case for the `rankdir` attribute to show how these can be used.

Upcoming MRs will extend the functionality further, create a test case for node and edge overlap and fixes for these overlaps.

Towards #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2797","8cbe9edeeed6f99909b20ce13d4139f8727ef4b0","2022-08-18 00:00:02.752-04","2022-08-23T07:12:25.491Z","[]"
1763,2608,"Simplify PDF generation","* Make the suffix rule visible unconditionally, make only the PDF target (`pdf_DATA`) visible if `groff` is available and the user hasn't explicitly disabled PDF generation.

@smattr I have compared the different approaches, I don't think increasing the tarball by 10% just to bundle PDFs most people can generate themselves is worth it.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2608","def16bd0dd2cc161ac474c2ac1e2003a30224f0b","2022-04-17 00:09:12.705-04","2022-04-20T01:43:48.991Z","[]"
2000,1896,"in Windows CI tasks, install Python 3 from Chocolatey","Huge thanks to @magjac for guiding me through this.

tl;dr: this is a step towards never writing PowerShell again.

It might not be obvious what this MR is or where I'm going with this, so let me elaborate on my comments on #2000...

I would like to move as much build/package/CI/... logic out of .gitlab-ci.yml. YAML is an extremely unpleasant language to program in due to both non-obvious built-in semantics as well as non-obvious extra semantics the program interpreting your YAML applies. It's all the power of a domain-specific language with the ergonomics of assembly. I humbly propose a path of greater sanity.

I would like every CI build task to look like this:

1. install Python
2. `ci/build.py`

and every CI test task to look like:

1. install Python
2. `ci/test.py`

Let's do all CI steps (and all platform specialization) in Python, a superior abstraction to /bin/sh and friends. If you object to the previous sentence please comment and explain your motivation.

This is a first baby step along the above described path.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1896","2b6019560f6a3239f15dad5f4931c71d14359fb9","2021-04-11 00:04:10.811-04","2021-04-18T05:02:48.844Z","[]"
1881,1711,"Fix potential null pointer dereferences in UniformStressSmoother_new","The null check needs to happen before the pointers are dereferenced.

Defect identified by [scan-build](https://clang-analyzer.llvm.org/scan-build.html). (It was actually reported as a ""dead assignment"" defect but when I looked at it I realized that there was a bigger problem here.)","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1711","a3ed98540c74db147758f98491569519b1269df0","2021-01-24 00:00:24.349-05","","[]"
2115,2144,"sed-removal motivated changes","Some plodding progress on a cruft-removal goal.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2144","390061b2a4b896d9e730fde2ec8ce305c121fa38","2021-09-06 00:01:58.671-04","2021-09-13T15:49:50.448Z","[]"
1710,3010,"fix reading incorrect input in #1710 test case","A mistake in 632fe0bd1cfc6a4f636db4f85206aff6720bdc6b made this test read from
/dev/null instead of the input file it was supposed to read. Note that this
required some tweak to the skip condition. The Windows platforms on which this
fails seems all over the place and expressing the exact pattern seemed too
complex. For the curious, what we currently see in CI is:

```
  ┌──────────────┬─────────┬──────────────┬─────────┬────────┐
  │ architecture │ OS      │ build system │ mode    │ result │
  ╞══════════════╪═════════╪══════════════╪═════════╪════════╡
  │ x86          │ Windows │ MS Build     │ debug   │ FAIL   │
  │              │         │              ├─────────┼────────┤
  │              │         │              │ release │ pass   │
  │              │         ├──────────────┼─────────┼────────┤
  │              │         │ CMake        │ debug   │ FAIL   │
  │              │         │              ├─────────┼────────┤
  │              │         │              │ release │ FAIL   │
  │              ├─────────┼──────────────┼─────────┼────────┤
  │              │ MinGW   │ CMake        │ -       │ pass   │
  ├──────────────┼─────────┼──────────────┼─────────┼────────┤
  │ x86-64       │ Windows │ CMake        │ debug   │ FAIL   │
  │              │         │              ├─────────┼────────┤
  │              │         │              │ release │ FAIL   │
  │              ├─────────┼──────────────┼─────────┼────────┤
  │              │ MinGW   │ CMake        │ -       │ FAIL   │
  └──────────────┴─────────┴──────────────┴─────────┴────────┘
```

I would not be surprised if these results are not stable. It is likely this
failure presents across all platforms, but is dependent on things like Address
Space Layout Randomization to exhibit.

Gitlab: #1710, #1720","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3010","c1e794c17a91095a7a5c105921e3483f536efaa9","2022-12-24 00:01:25.124-05","2022-12-24T17:50:35.344Z","[]"
14,2672,"final fix of four 🪲🪲🪲🪲 ortho bugs 🎉","Root cause of bugs were floating point comparison and precision issues.

Fixes #14, #1408, #1658 and #1990

Please read patch descriptions for details.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2672","d3248f7b8e965af98f4a3e1e47da716e41db2ff9","2022-05-16 00:02:41.946-04","2022-06-11T19:23:14.229Z","[]"
2301,2940,"sfio: remove 'SF_ERROR', simplify page size calculation","When doing some unrelated refactoring, Windows compile errors emerge:

```
  sfsetbuf.c
  C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\oaidl.h(322,9):
    error C2059: syntax error: 'constant'
    [C:\GitLab-Runner\builds\graphviz\graphviz\build\lib\sfio\sfio.vcxproj]
```

Some investigation leads us to a guess¹ that oaidl.h contains:

```c
  typedef /* [v1_enum] */
  enum tagSF_TYPE
      {
          SF_ERROR    = VT_ERROR,
          SF_I1   = VT_I1,
          SF_I2   = VT_I2,
          SF_I4   = VT_I4,
          SF_I8   = VT_I8,
          SF_BSTR = VT_BSTR,
          SF_UNKNOWN  = VT_UNKNOWN,
          SF_DISPATCH = VT_DISPATCH,
          SF_VARIANT  = VT_VARIANT,
          SF_RECORD   = VT_RECORD,
          SF_HAVEIID  = ( VT_UNKNOWN | VT_RESERVED )
      }   SF_TYPE; // Line 319
```

673b9f1a7dbde9c9cc5d9a2a22ee835a08ab40ab tried to work around this in the past.
But there remained a foot gun. If you (possibly transitively) included sfio.h
but did not include sfhdr.h, you could end up facing this error.

Surprising as it may seem, nothing in the code base checks for `SF_ERROR`. So a
cleaner solution that removes the problem in perpetuity is to remove our
`SF_ERROR`. Note that `SF_FLAGS` does not need to be adjusted because `SF_ERROR`
was not a public flag.

Gitlab: fixes #2301

¹ https://stackoverflow.com/questions/13827599/oaidl-h319-error-c2057-expected-constant-expression","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2940","99ba8a134d5ce3205effbdfd323cc560d49932fe","2022-11-07 00:07:50.366-05","2022-11-10T03:48:16.312Z","[]"
1445,1301,"(##1445) Attempt to support MacOS X 10.13 and above builds","Had to open the xib files, set the OS X target, and resave.  Chose 10.13
as the minimum version.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1301","02b66b92b1f177a4fceb2acd3aa1c5da7d6a8c50","2018-12-15 00:00:27.647-05","","[]"
1767,1518,"Remove rtest workaround for non stable cluster order","Since https://gitlab.com/graphviz/graphviz/-/issues/1767 (Duplicate: https://gitlab.com/graphviz/graphviz/-/issues/1789) was fixed, the test runs fine.

Thanks for fixing @smattr :muscle:","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1518","27030bffaeee757286c26967a442cfc8016512e4","2020-08-12 00:07:55.058-04","2020-08-12T15:04:14.695Z","[]"
1868,2208,"gv2gxl: remove duplicate XML escaping functionality","The next step towards #1868.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2208","269f02283d2459446ebc2926df2f82b4e765c394","2021-10-09 00:03:41.285-04","2021-10-16T01:33:41.523Z","[]"
1854,2779,"remove dotty, lefty, lneato","Lefty, and its dependent tools Dotty and Lneato, have been suspected unused for
a long time. They were scheduled for removal, but we took a cautious and very
slow approach to this given how pervasive Graphviz is and the limited visibility
we have into its usage:

  1. 2021-09-25 make Lefty default to disabled in the build system¹
  2. 2022-01-16 disable Lefty in published graphviz.org packages²
  3. 2022-03-28 remove build system support³

This completes the final step of removing the code from the repository. It is
still retained in the history, should anyone need access to it or need to build
a past version of Graphviz with Lefty.

So far, we have only heard two notable reactions from the downstream world:

  1. Lefty disabling was not quite complete on the first attempt.⁴
  2. There has been an offer of assistance to maintain Lefty.⁵ No patches have
     yet emerged, but if and when they do we could feasibly reverse direction on
     this and reinstate Lefty and friends.

Gitlab: closes #219, closes #552, related to #1836, #1854

¹ 1a4ad00b59cc1e1e9302fcbd1a205495ee59cab5
² 04a78cc9ae01b2a7e5d5435146cd503c45af90b9
³ 6faa34010f947510ec129af2d998614de8a513ed
⁴ https://gitlab.com/graphviz/graphviz/-/issues/2153
⁵ https://forum.graphviz.org/t/lefty-not-a-graphviz-application/835/6","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2779","b2f287ca315dd5bf689d9ce2ca71dbfe63fb8a61","2022-08-03 00:08:37.228-04","2022-08-08T14:56:44.374Z","[]"
2232,2728,"fix: select DEB CPack back end on Debian","Debian’s /etc/os-release does not include the field `ID_LIKE`, which is perhaps
reasonable as it is a base distribution not derived from another. A side effect
of this was that CPack picked the RPM back end when generating a Graphviz
package. This change teaches it that Debian should also get the DEB back end.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2728","aa96c7356f38ff20e486e3632405e70fd44bfc69","2022-06-25 00:08:10.143-04","2022-06-26T19:01:07.841Z","[]"
1708,1396,"remove unused gvbuffstderr.c","The functions in this file seem to have only been used for past testing. They
are not exposed in gvc.h, so we can safely assume no users are calling them.
Fixes #1708.

I haven't added a changelog entry for this because the issue being closed was filed by me and this does not affect user-visible behavior.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1396","844a920090ff820f38a009573215080483e6e763","2020-06-03 00:09:18.086-04","2020-06-08T14:28:41.211Z","[]"
634,2072,"make agsetfile argument a const char*","Related to #634.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2072","b769681d2da394ec7c5c7d3a7aa2924cd2dbec23","2021-07-24 00:02:27.561-04","2021-07-30T04:23:11.175Z","[]"
2371,3161,"label RectArea: fix: handle rectangles whose area exceeds 2³²-1","Some graphs generate rectangles that trigger the overflow check in this
function. Such graphs are large, but not unreasonable. Graphviz should still
attempt to handle these if it can.

This change extends the range of supported computed areas from 0..2³²-1 to
0..2⁶⁴-1.

This MR adds an expensive test case (~7 seconds on my local machine), but manually reducing it made the exhibited behavior disappear. We can look into mechanically minimizing this in future.

Gitlab: fixes #2371<br/>
Reported-by: Kanatos","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3161","ba05aa457648dcb862a3dae9065f2df47684ea56","2023-04-05 00:00:21.101-04","2023-04-07T18:12:50.392Z","[]"
1529,1951,"Add --tag=CC when compiling quartz plugin","Fixes #2065","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1951","6e95ab177e1753d563a8275217426b8eddb9ae9a","2021-05-08 00:02:03.948-04","","[]"
56,2701,"Fix overlap caused by penwidth for polygon-based nodes and normal and inv edge arrows","Following !2780, !2797, !2808, !2824, !2828, !2845 and !2849, this is the eighth in a series of MRs extracted from !2702. It fixes https://gitlab.com/graphviz/graphviz/-/issues/372 for all [polygon-based node shapes](https://graphviz.org/doc/info/shapes.html#polygon) (Note that this also includes ellipse-based shapes which Graphviz special-cases as two-sided polygons) except `cylinder` and for the `normal` and `inv` [primitive edge arrow shapes](https://graphviz.org/doc/info/arrows.html#primitive-shapes).

Upcoming MRs include (not necessarily in this order or partitioned like this):

- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.
- Replacement of the use of the rounding macro `POINTS` with the non-rounding macro `INCH2PS` which started already in this MR since it caused overlap problems.
- Fixes for other primitive edge arrow shapes.

Below are images showing the stepwise fixes applied for this DOT source:
```
digraph g1 {
  graph [rankdir=TB]
  node [penwidth=2 shape=box color=""#00000060""]
  edge [dir=both arrowhead=onormal arrowtail=oinv penwidth=2 color=""#00000060""]  a -> b
}
```
I've used a semi-transparent pen color to make it easy to see were the overlaps are.

Original image:

![step0.svg](/uploads/f5664c86e94855d09adf8cf9fcec8c13/step0.svg)

After taking edge penwidth into account when positioning arrow:

![step1.svg](/uploads/73792345da1491ff980e97bd95163c60/step1.svg)

After taking node penwidth into account when clipping edge at node boundary:

![step2.svg](/uploads/b69b21887f3906664a55e4895efc71f1/step2.svg)

After clipping the edge just inside the node outline boundary instead of just outside (to avoid a gap):

![step3.svg](/uploads/feed75ad3714b8a7042ca86fb09d6ccc/step3.svg)

After taking edge penwidth into account when clipping the edge stem at the edge arrowhead or arrowtail:

![step4.svg](/uploads/5ab12b803df7659b688c1956af52af94/step4.svg)

Below is a list of node shape families and arrow types to show which are fixed and not by this MR.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [ ] tee
- [ ] box
- [ ] diamond
- [ ] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2701","beede1476b3b23cd22ca1cb0f3b089aa397e42ab","2022-05-27 00:06:15.781-04","2022-10-11T20:46:22.761Z","[]"
1842,2419,"fix Gvedit `-?` and enable building in CI on macOS","Related to #1842, #1852, #1854.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2419","ddd4c16ab065b503bf081c639572d179ffefffe7","2022-01-30 00:01:39.083-05","2022-02-02T07:48:29.132Z","[]"
372,2607,"render: unconditionally include stdlib.h","The Draft status is because I'm not entirely sure what I'm removing here and hope that someone else understands this. This a thing I stumbled upon while working on #372.

Without this change, attempting to include geomproc.h in render.h
would cause the following warning:

```
In file included from /home/magjac/graphviz/lib/common/shapes.c:12:
/home/magjac/graphviz/lib/common/render.h:24: warning: ""__USE_GNU"" redefined
   24 | #define __USE_GNU
      |
In file included from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/limits.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h:203,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/syslimits.h:7,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h:34,
                 from /home/magjac/graphviz/lib/common/arith.h:21,
                 from /home/magjac/graphviz/lib/common/geom.h:16,
                 from /home/magjac/graphviz/lib/common/geomprocs.h:21,
                 from /home/magjac/graphviz/lib/common/shapes.c:11:
/usr/include/features.h:407: note: this is the location of the previous definition
  407 | # define __USE_GNU      1
      |
```

This is casued by arith.h defining _GNU_SOURCE to 1 which seems to
implicitly set __USE_GNU.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2607","13987e752a557d35be02e4a88010f81300f92b75","2022-04-17 00:04:52.893-04","2022-04-18T07:23:31.028Z","[]"
1909,1686,"revert changes to add non-local names to internal map","Merge Request !1489 made a change to which names were stored in the internal
map. Following this, non-local names (user-provided ones; not starting with '%')
were stored in the internal map as well as local names. This inadvertently broke
some fdp and circo assumptions (#1876, #1877, !1676).

This change reverts the main pieces of the following commits, resolving #1876
and #1877, while re-opening #1767 and #1789.
   * 4f283dd1c02a6a4999b53ad2fcbf2264a7074a8b
   * 85b09cf13179b0e5ab8bddb4857e3d2af0a39a31
   * 9409324489a69557229d3d6f505857b9af85a913
   * 2a9449a99b2a2146fce01fa1d9713e999ad3dd4e
   * 14be5169ef49faad0f30cd9d36cdd438e1739f77
   * b6ffeca3a4457efcffbc3fcdbcee683375f74d05

We will need to find a different solution to #1767.

----

This is a more conservative MR that supersedes !1676. It simply backs out the original changes, reopening some issues.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1686","25e2d0cc91e026b54ebde6f1c7133d36ddb3bcdf","2020-11-29 00:03:19.22-05","2021-01-12T01:18:19.767Z","[]"
1802,1533,"fix Pango plugin build on macOS","Compiling plugin/pango depends on the discovery of PangoCairo and its dependent
libraries which is handled by cmake/FindPangoCairo.cmake. This file was assuming
all libraries were available at default system paths, which is not true on e.g.
macOS when you install libraries via Homebrew or Macports. We now simply ask
pkg-config to find all necessary information for us (unless we are on Windows).

This also incidentally cleans up the following warning issued by CMake in CI:

```
  CMake Warning (dev) at C:/…/FindPackageHandleStandardArgs.cmake:272 (message):
    The package name passed to `find_package_handle_standard_args` (PANGOCAIRO)
    does not match the name of the calling package (PangoCairo).  This can lead
    to problems in calling code that expects `find_package` result variables
    (e.g., `_FOUND`) to follow a certain pattern.
  Call Stack (most recent call first):
    cmake/FindPangoCairo.cmake:20 (find_package_handle_standard_args)
    CMakeLists.txt:85 (find_package)
  This warning is for project developers.  Use -Wno-dev to suppress it.
```

----

This commit stems from [discussion on the forum](https://forum.graphviz.org/t/does-anyone-here-know-cmake/135/22). This doesn't seem to fully resolve the macOS problems, but it at least makes things less broken. I'll merge on 2020-08-27 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1533","b4f998c133566ef9cb416c085d1ce49e539bec30","2020-08-22 00:01:11.288-04","2020-08-27T14:44:09.973Z","[]"
2059,2070,"add Fedora 34 testing to CI","Closes #2059.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2070","6b37c95646c0743486f9b91b1b1421ffd0d5ad05","2021-07-24 00:09:36.901-04","2021-07-24T18:22:57.189Z","[]"
2204,2614,"de-dupe unistd compat headers; remove unistd detection","unistd.h is a header commonly provided by most platforms, with the exception being Windows. Graphviz provides not one, but two compatibility shims to deal with this, lib/ast/compat_unistd.h and windows/include/unistd.h. The latter is more comprehensive and correct than the former.

This MR removes compat_unistd.h and removes unistd.h detection altogether from all three build systems. Any platform on which Graphviz is built is now assumed to have unistd.h, with the exception of non-MinGW Windows for which the Graphviz shim is provided. Any platform that does not provide unistd.h will need to supply its own shim.

This is a more honest admission that Graphviz has a hard dependency on the unistd.h-supplied functionality, and the existing shim is only suitable for Windows.

Closes #2204","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2614","8f07bac0434e5bf2f0b56d3c395be3d7474b69fd","2022-04-18 00:07:16.251-04","2022-04-24T17:32:40.971Z","[]"
2112,1715,"some rtest.py tweaks and generate a .tar.xz portable source","The rtest.py changes in this MR allow `make check-recursive` to properly run it. It doesn't pass, as discussed in `test_regression_failure`, but it's at least runable now.

The remaining commit builds an xz archive, so we have a more compressed alternative to gz.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1715","38e0d1b532a4cd1d17fb6a6a0d22ddf36c3436dc","2021-01-25 00:05:37.665-05","2021-01-31T03:46:33.244Z","[]"
1835,2383,"add Mingle to the CMake build system","I thought I would post where I'm at with this, even though it fails CI.

Current blockers:
* Both Cygwin and Msys2 seem unusable right now. Chocolatey is failing to fetch these packages.
* Both macOS and 64-Windows CI environments do not seem to have libANN available
* Mingle on 32-bit Windows is erratic. When built using MS Build, it can run and return success. When built using CMake, it just segfaults.

Combining the above details into the relevant exemptions in ci/tests.py and rtest/test_tools.py was turning into a mess. Will revisit this later.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2383","c824d586363cc80dd872052ae37ad61930cb6bb9","2022-01-08 00:09:20.081-05","2022-03-19T21:54:38.175Z","[]"
2342,3116,"Draft: common: fix assertion failure when processing 0-sized arrows","This change was written by Matthew Fernandez but has Rob Hart as the author
because its content was copy-pasted from Rob’s description of the fix.

When processing an arrow with 0 size, an assertion failure would be triggered:

```
  assert.h assertion failed at lib/common/arrows.c:465 in pointf miter_point(
    pointf, pointf, pointf, double): theta >= 0 && theta <= M_PI && ""theta out
    of range""
  *** Check failure stack trace: ***
      @     0x560ace7573f4  __assert_fail
      @     0x560ace6a8a2e  miter_point
      @     0x560ace6a864a  arrow_type_normal0
      @     0x560ace6a7417  arrow_length_normal
      @     0x560ace6a63e7  arrowEndClip
      @     0x560ace6d7246  clip_and_install
      @     0x560ace2562df  _dot_splines
      @     0x560ace24fb55  dotLayout
      @     0x560ace24f27c  dot_layout
      @     0x560ace23458a  gvLayoutJobs
      @     0x560ace230fe3  main
      @     0x7fabd7c7b633  __libc_start_main
      @     0x560ace230e6a  _start
```

This change bounds miter calculations to avoid this problem. Bisecting indicated
the problem being fixed here was introduced in
70993eb576d42a86b932f05f9f4906213c7e9df3.

Gitlab: fixes #2342","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/3116","73f8aec9ac22a72d1ea6e232588188ffbae3f07a","2023-03-17 00:04:06.571-04","","[]"
1812,1521,"Add CMake option to enable/disable unit testing","When using graphviz as a subdirectory in cmake, it would be nice to disable testing. This patch provides a cmake option to do this, with the default value enabling testing.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1521","5041e0621c2607493c50387fbb6de478b5f809e4","2020-08-13 00:01:02.953-04","","[]"
1977,1840,"remove superfluous empty @param in doxygen comments","Fixes #1977.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1840","b4a253402dea807cec83220d2abf09d3cfb86a96","2021-03-14 00:05:34.738-05","2021-03-20T21:15:59.044Z","[]"
56,1614,"WIP: partial fix for #56","This is some work towards fixing #56. I've marked it as WIP because it seems this fix actually doesn't help the example in #56. After bypassing the trapezoid exhaustion issue, this example later causes Graphviz to allocate a huge array that exhausts memory. ASan back trace follows:

```sh
$ dot -Tsvg 56.dot -o /dev/null
Warning: Orthogonal edges do not currently handle edge labels. Try using xlabels.
==30743==AddressSanitizer's allocator is terminating the process instead of returning 0
==30743==If you don't like this behavior set allocator_may_return_null=1
==30743==AddressSanitizer CHECK failed: ../../../../src/libsanitizer/sanitizer_common/sanitizer_allocator.cc:216 ""((0)) != (0)"" (0x0, 0x0)
    #0 0x7f8362ee4fa5  (/lib/x86_64-linux-gnu/libasan.so.5+0xf3fa5)
    #1 0x7f8362efff39 in __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) (/lib/x86_64-linux-gnu/libasan.so.5+0x10ef39)
    #2 0x7f8362eea006  (/lib/x86_64-linux-gnu/libasan.so.5+0xf9006)
    #3 0x7f8362eea043  (/lib/x86_64-linux-gnu/libasan.so.5+0xf9043)
    #4 0x7f8362e1832d  (/lib/x86_64-linux-gnu/libasan.so.5+0x2732d)
    #5 0x7f8362eda4f1 in calloc (/lib/x86_64-linux-gnu/libasan.so.5+0xe94f1)
    #6 0x7f8362c36e61 in gcalloc /home/matthew/graphviz-56/lib/common/memory.c:42
    #7 0x7f8362d0eeb5 in convertSPtoRoute /home/matthew/graphviz-56/lib/ortho/ortho.c:158
    #8 0x7f8362d198b2 in orthoEdges /home/matthew/graphviz-56/lib/ortho/ortho.c:1346
    #9 0x7f835e92cc4e in _dot_splines /home/matthew/graphviz-56/lib/dotgen/dotsplines.c:280
    #10 0x7f835e931642 in dot_splines /home/matthew/graphviz-56/lib/dotgen/dotsplines.c:522
    #11 0x7f835e8f5120 in dotLayout /home/matthew/graphviz-56/lib/dotgen/dotinit.c:323
    #12 0x7f835e8f65ee in doDot /home/matthew/graphviz-56/lib/dotgen/dotinit.c:450
    #13 0x7f835e8f6bc9 in dot_layout /home/matthew/graphviz-56/lib/dotgen/dotinit.c:496
    #14 0x7f8362be376d in gvLayoutJobs /home/matthew/graphviz-56/lib/gvc/gvlayout.c:85
    #15 0x558075192960 in main /home/matthew/graphviz-56/cmd/dot/dot.c:132
    #16 0x7f836298f09a in __libc_start_main ../csu/libc-start.c:308
    #17 0x558075192269 in _start (/tmp/tmp.cfvBUBCvnb/bin/dot+0x2269)
```

I need some further direction on what to do here. Should I continue to debug this next, revealed error? Is the input graph actually invalid somehow? Is this out-of-memory scenario a duplicate or some other open issue?

Note the suggested fix on #56 to expand `TRSIZE` is invalid. ASan detects that this results in an out-of-bounds heap access.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1614","450920509e45c24958bd7fb6440c3dc8efc7e42d","2020-10-11 00:02:31.351-04","","[]"
2065,1951,"Add --tag=CC when compiling quartz plugin","Fixes #2065","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1951","6e95ab177e1753d563a8275217426b8eddb9ae9a","2021-05-08 00:02:03.948-04","","[]"
2184,2516,"2184.dot: remove eol spaces","to keep the source clean","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2516","e5639a98f71b333b691ea66e44fc50c2691a4571","2022-03-18 00:00:17.61-04","2022-03-18T16:10:30.969Z","[]"
1737,1426,"Fix ""Python language bindings library for Ubuntu does not contain any Python code or binaries""","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1735

~~The error message was: ""/bin/sh: 1: Syntax error: ""&"" unexpected"".~~

~~The |& syntax is only valid for bash, not for sh.~~

**EDIT:** The above description was what I thought was the only problem when I wrote this bug, but I later realized it was worse and updated the title accordingly.

This was introduced in b861a44f39521be6c5c81f0d7aa39bdedae6be82.

Also fixed install of libgv-python for multiple python versions which
was masked by this problem.
","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1426","eb01a2e117bb116855701faa70c75d2c42f50907","2020-06-10 00:02:29.118-04","2020-06-21T08:24:15.844Z","[]"
1797,1525,"Fix windows artifact archiving","* Fixes https://gitlab.com/graphviz/graphviz/-/issues/1797
* Changes functionality in the `gen_version.py` script:
    * The `collection` is now part of the script and the maintainer sets it to either `stable` or `development`.
    * The new option `--collection` can be used to output the collection instead of the version.
    * The different parts (major, minor & patch) of the version that the maintainer sets in the script are now all-numeric. The `~dev` suffix is automatically added when `collection == 'development'`.
    * Some assertions added to check for common mistakes that the maintainer can make.
    * Shebang added for easier execution under `bash`.
* `autogen.sh` adapted to get the `collection` from `gen_version.py`.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1525","eac153bde2c3e4f8e52f530104d61ff0a353734f","2020-08-14 00:07:57.594-04","2020-08-15T05:13:43.335Z","[]"
2143,2261,"enable persistent Chocolatey cache in Windows CI jobs","The intention of this change is to accelerate Windows CI jobs, currently one of
the limiting factors on our CI throughput. This change takes a conservative
approach, giving each relevant job its own cache. In theory these jobs could all
share a cache, but the Gitlab docs¹ imply this is only safe if only a single job
has a `push` policy. To do this effectively, we would probably have to create a
new preliminary CI job that only built the cache. Then all other jobs would
become `pull` consumers of this cache. Perhaps an improvement to make in future.

Closes #2143.

¹ https://docs.gitlab.com/ee/ci/yaml/index.html#cachepolicy","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2261","cd5b08d686350ac074cee0f86a33659b5d2e7345","2021-11-02 00:02:59.279-04","2021-11-08T01:09:37.154Z","[]"
2234,2636,"CI: add Ubuntu 22.04 as a tested platform","Closes #2234","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2636","d2e0c2f03645c9f224f1c10c920cb2c4f552de85","2022-04-26 00:06:19.889-04","2022-05-01T04:37:29.650Z","[]"
56,2983,"fix changelog entry that was entered under an older release","When rebasing 8f60584180071ab9c0f212c3f31aac1d53ed4757, I mistakenly forgot to
adjust its changelog entry for the release that had happened in the intervening
time.

Gitlab: #56","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2983","848da2e586ac88a8b10e6ab79a5139127d738cde","2022-11-30 00:07:39.015-05","2022-12-01T15:47:22.405Z","[]"
1893,1859,"fix: correctly handle HTML content ending in ]","As described in the source comment in this commit, expat attempts to recognize
CDATA section enders which results in some internal buffering that Graphviz did
not anticipate. Specifically, any HTML content ending in ""]"" or ""]]"" would be
parsed with these characters truncated. The next call to expat would flush this
buffered data, resulting in Graphviz believing the next content was malformed.

For example, the content ""my label]]]"" would be parsed as the text ""my label]"".
The next call to expat would return ""]]"" prepended to whatever was then being
parsed.

Fixes #1893.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1859","d745ee64e34e84753bb20960858aed4317448f01","2021-03-21 00:03:57.838-04","2021-03-29T04:35:07.365Z","[]"
2277,2870,"remove SWIG setup steps in Windows build preparation script","As discussed on Gitlab,¹ this Windows build script tries to discover SWIG, but
none of the Windows options for building Graphviz support compiling any of the
components that use SWIG.

¹ https://gitlab.com/graphviz/graphviz/-/issues/2277#note_1100714918","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2870","a63083013b7bf30f12c792558b40044fafeebb8e","2022-09-30 00:03:37.724-04","2022-10-05T02:02:05.862Z","[]"
2069,1957,"remove diff and grep as Windows build and test dependencies","#2069","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1957","44643e930255a25a0818f14024f3a6fd377ddc35","2021-05-13 00:00:35.938-04","2021-05-19T15:27:15.154Z","[]"
2095,2584,"Draft: refactor test_2095: use gvgen instead heavy dot file","Generating graph for huge rtest/2095.dot file takes some minutes.
It is much more time than all other tests together!
The purpose of this test is just to test dot with graph
with more than 1000 nodes.
Refactored test with gvgen (with 1100 nodes) runs no more than seconds!

Benefits of using gvgen instead rtest/2095.dot:
- rtest and CI time is reduced in dozens of times
- reduced carbon footprint","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2584","86c25001406ba4c9070e04db963d20d7b6f2e06e","2022-04-11 00:03:44.604-04","","[]"
1806,1576,"implement string mapping of expr parser's token table using Bison feature","This removes some juggling to construct a string table of the tokens in the
expr parser, to replace it with native Bison functionality. Loosely related to
#1806.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1576","6ca590c9228520498f9a905dc13eee43563217f2","2020-09-14 00:08:26.795-04","2020-09-20T22:53:39.913Z","[]"
1806,1599,"add changelog notes for Flex, Bison dependency bump","A series of commits beginning with 8c099fc032074a0bb5961d67ef4df05ddca7eba4
raised the minimum required versions of Flex and Bison. No changelog entries
were added at the time because we were working under an ad hoc policy that
changes that only affected users compiling from source were not eligible for
changelog entries. This has since changed. Related to #1806.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1599","4740887bf4e5244c6d791b1ac15bb47e30385789","2020-10-01 00:08:18.149-04","2020-10-07T15:15:57.458Z","[]"
1998,2093,"remove some use of sfputc, sfputr","More progress towards #1998.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2093","482e7d9dff7bc96fb65ac5081dd976d2e77c42ec","2021-08-11 00:00:08.179-04","2021-08-14T02:21:02.282Z","[]"
1868,2198,"libcommon: provide more generic XML escaping","This MR is unfortunately quite long, but I thought it made sense to take it through to a logical endpoint, demonstrating the benefit of this change. As a high-level summary of what this does: it replaces the thread-unsafe, allocating libcommon XML escaping functions with a single implementation that is thread-safe and performs no dynamic allocation.

The bigger picture is that this is a step towards #1868. In the future, the new `xml_escape` function could be extended to subsume and replace all other XML escaping logic in the Graphviz code base (e.g. `xml_string` in gv2gxl, `xml_string` in Smyrna, `html_string` in the VML plugin, ...).","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2198","7f425243aefccc91bf603441c087da6e4be35d3d","2021-10-02 00:00:37.307-04","2021-10-08T16:00:18.546Z","[]"
1944,1748,"Delete ubuntu-19.10 CI","It's discontinued release, can't build Dockerfile any more.

Fixes #1944","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1748","f28ed8a54026752ea8c39a098f33e2716004cb15","2021-02-14 00:02:44.341-05","2021-02-14T04:33:00.276Z","[]"
2216,2527,"move XML validation tests into a separate CI job","This parametrized test was checking the validity of checked in Graphviz HTML
sources. There is no need to run this identical check in every single CI test
job nor on end users machines where they may have differing versions of
`xmllint` installed.

Gitlab: closes #2216","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2527","16f5deb1e255ae28de7bdeec2220bdc945e33dc8","2022-03-23 00:05:36.503-04","2022-03-26T15:45:30.440Z","[]"
1924,1707,"move to C99 and C++11","Following the 2.46.0 release, we're clear to move compilation standards to C99 and C++11. This MR does this as well as a couple of other things, including addressing #1924.

Some suboptimal things:
* This does not update the MS Build files. MSVC doesn't seem to have command line options for C99 or C++11. Maybe we should move compilation there to C++14?
* Quite a few new `-Wdouble-promotion` warnings are triggered in the autotools build.

CC @evorgriahr","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1707","0a990630e5e1637d958d9d9a6a0ee0998fff7753","2021-01-24 00:07:49.214-05","2021-01-30T18:47:36.421Z","[]"
1961,2458,"tclpkg vgpanecmd: remove acceptance of ambiguous abbreviated commands","`vgpanecmd` accepted abbreviations of commands, e.g. `li` for list. However
these abbreviations were accepted as first match with no disambiguation. So `r`
would always be interpreted as `rotate`, not `remove`. This behavior appears to
be an unintentional side effect of commands being incrementally introduced over
time without this kind of prefix-matching overlap being taken into account,
though this is mostly a guess as all this code was implemented prior to the
first Git commit.

Gitlab: fixes #1961","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2458","6528616adea51833f6ba7d4301b8c17e0d106ed0","2022-02-19 00:05:09.864-05","2022-02-20T19:45:04.743Z","[]"
2227,2723,"CI: install librsvg on macOS","This is a dependency of the rsvg plugin.

Gitlab: #2227","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2723","8f2669a2d751f77c2b1cbf5d21607ceeda339247","2022-06-21 00:04:52.35-04","2022-06-25T19:33:20.737Z","[]"
1289,1283,"Prevent exponential growth of length of edges in clusters","`edgelabel_ranks` gets called for the root graph and all of its cluster
subgraphs. It should only double `ED_minlen` for each edge once. Reverting the
test for labeled edges to check only the active graph, rather than its root,
prevents it from expanding the `minlen` once for every level of cluster
containing the edge.

Fixes #1246","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1283","b3e8099771ee752c791d861e2f936beba1cb5a14","2018-03-23 00:08:48.85-04","2018-05-04T22:05:08.774Z","[]"
2154,2381,"convert lib/mingle/ink.c to C++","More progress on #2154.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2381","b358405a9d10e94dcc35c4791b93a461dca9bb60","2022-01-07 00:04:00.177-05","2022-01-08T17:12:02.815Z","[]"
372,2702,"Draft: Extensions to the SVG analyzer, test case and partial fix for #372","**NOTE: This MR is not meant to be reviewed!** It's provided as a reference for !2701 if someone want's to look at, or run, the test case for the fixes of #372.

I will clean up the code and squash commits before submitting something for review. This MR will probably also be broken up into several reviewable of MRs. Probably at least MRs for:

* Extending the C++ API with a few needed functions.
* Extending the SVG Analyzer to be able analyze and recreate SVG for simple graphs exactly.
* Adding a test case for #372.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2702","ec8ea31c02dd63104f869bacaba6e7f38d358fa6","2022-05-27 00:09:53.021-04","","[]"
1979,2720,"fix: include Windows links in deployment-produced JSON","This is a second attempt at 6117abe680037824d134149b0de42f589fb24466. It seems
the previous attempt did not account for the fact that the source path of an
artifact has not yet been safely escaped into a filename and contains directory
separators (`/`). This change was made by studying the last deploy.py execution
logs and making a best guess. There is no easy way to test this other than
running the release deployment process, so we should do one soon to validate
this.

Gitlab: fixes #1979 (I hope)","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2720","156b57941de82d1d229c0ccf331cf2dc3a9f7e32","2022-06-19 00:05:33.114-04","2022-06-22T01:51:25.672Z","[]"
178,2822,"Revert ""gvc auto_output_filename: avoid 'strdup' when constructing file name""","This reverts commit 4291cc769a3eeef8b1c171e5479194733a4da6cd. This commit that
was intended to be a functional no-op actually altered the generated output
filename to remove `.` characters.

Github: xflr6/graphviz #178, NixOS/nixpkgs #188175
Gitlab: fixes #2270
Reported-by: Sebastian Bank <sebastian.bank@uni-leipzig.de>","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2822","8d662734b6a34709d9475b120e7ce3de872339e2","2022-09-04 00:03:14.118-04","2022-09-04T23:31:49.864Z","[]"
1710,3011,"also allow macOS to fail the long chain test","It seems this test can also fail in CI on macOS.

Gitlab: #1710, #1720","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3011","9f7c37b77f6f8be529a69a7ec05a001234642ea6","2022-12-24 00:08:20.464-05","2022-12-25T01:16:09.953Z","[]"
2196,2464,"fix C++ API not usable after install","Fixes https://gitlab.com/graphviz/graphviz/-/issues/2196.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2464","9102cade8697bafd563d4f6402819a9c1d824704","2022-02-20 00:07:34.325-05","2022-02-22T08:05:34.941Z","[]"
1950,3036,"migrate some 'sprintf' to agxbufs","Some progress on #1950.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3036","f620d039e8ad5401b644437502edf67534fb9246","2023-01-02 00:05:37.474-05","2023-01-14T18:45:16.288Z","[]"
1775,1492,"remove in-tree strcasecmp and strncasecmp implementations","Closes #1775. This entire change is intended to be functionally a no-op.

I'll merge on 2020-08-07 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1492","e918a90da3dd9d0ae679fd79feff67b3ad160359","2020-08-02 00:02:19.693-04","2020-08-07T14:25:58.291Z","[]"
2232,2928,"fix installing example graphs during CPack; rewrite 'SMYRNA_PATH' discovery","This one requires a bit of an essay to explain and I don't fully understand all the moving parts.

----

## CMake: fix installing example graphs during CPack

When running `cpack`, instead of staging the Smyrna auxiliary files (share/\*\*)
and the example graphs (graphs/\*\*) in build-local directories, they would be
incorrectly staged into their final install paths. This was quite unexpected as
it would result in errors if you did not have permission to write to the install
directories or deleting+replacing files from a previous Graphviz installation if
you did.

This bug was introduced in 67f88eb8 as an accidental side effect of enabling Smyrna in the CMake build system. A close
re-reading of the CPack¹ and `GNUInstallDirs`² docs suggests that absolute paths
should never be used in `install` rules:

```
  `CMAKE_INSTALL_<dir>`
    Destination for files of a given type. This value may be passed to the
    `DESTINATION` options of `install()` commands for the corresponding file
    type. It should typically be a path relative to the installation prefix so
    that it can be converted to an absolute path in a relocatable way (see
    `CMAKE_INSTALL_FULL_<dir>`). However, an absolute path is also allowed.

  `CMAKE_INSTALL_FULL_<dir>`
    The absolute path generated from the corresponding `CMAKE_INSTALL_<dir>`
    value. If the value is not already an absolute path, an absolute path is
    constructed typically by prepending the value of the `CMAKE_INSTALL_PREFIX`
    variable. However, there are some special cases as documented below.
```

This change brings the behavior on Linux in line with how CPack operates on
other platforms – the default value of `CMAKE_INSTALL_DATAROOTDIR` is `share`
which is the hard coded value set on non-Linux platforms.

----

## smyrna: rewrite 'SMYRNA_PATH' discovery

This aligns Smyrna on other platforms with how Smyrna on Windows locates its
templates, examples etc. This resolves a problem where a build time path was
being baked into the Smyrna binary, preventing it from being relocatable.

The code for locating our own executable in this MR is adapted from public
domain source.³

This change also lifts the 1024 character limit on path discovery in the Windows
branch of this logic. It now dynamically expands the target buffer until the
current executable name will fit.

Gitlab: fixes #2232<br/>
Reported-by: Magnus Jacobsson <magnus.jacobsson@berotec.se>

¹ https://cmake.org/cmake/help/book/mastering-cmake/chapter/Packaging%20With%20CPack.html<br/>
² https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html<br/>
³ https://github.com/Smattr/clink/blob/main/clink/src/find_me.c as of commit
  8cadfc49a74e429fa69afdc460cb2b0662d81260","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2928","a15c4a67cc22a39029726513a2990af750b1cb34","2022-11-02 00:08:10.319-04","2022-11-04T00:51:37.060Z","[]"
2058,1944,"clean up references to `__IMPORT__` and `__EXPORT__`","This removes any reference to the custom `__IMPORT__` and `__EXPORT__`
macros.  These are remnants from supporting uwin.  However, the need for
uwin is greatly diminished by proper native Windows support for the
library.

Furthermore, the functionality that this enables will be restored
imminently by means of decoration of public interfaces.

The uwin system used `_BLD_STATIC` to indicate a static build and
`__DYNAMIC__` to indicate a shared build.  Furthermore, it used
`_BLD_DLL` to indicate a dynamic library on Windows, that is a DLL.
This augmented the check of `_DLL` which is the Microsoft specified
define that indicates a shared library build.  Based upon the state of
these four flags (why four flags for 2 states?) it then defined
`__IMPORT__` and `__EXPORT__` to `__declspec(dllimport)` and
`__declspec(dllexport)` respectively.

To further complicate things, UWIN was built up during Windows 3.1,
which meant that it predated the linker support for DLL storage.
Instead, this is required work by the user, and it has special macros
for declaring the (now) synthetic import symbol as well as defining it.
This is now no longer required due to improved support in the compiler
and linker which will perform the necessary work.

On Unix, this synthetic symbol declaration and definition is not
required as the linker has always supported this for shared libraries -
it is responsible for creating the PLT which is roughly equivalent to
the IAT (technically, the IAT is both the PLT and the GOT).  This is now
also automated on Windows, at least for the past ~25 years.

This clean up is meant to simplify the migration to `[module]_EXPORTS`
as the ""standard"" macro which is defined by CMake (and is generally used
elsewhere now as well) to indicate that the symbols for the module
should be exported.  `_DLL` provides the necessary information whether a
DLL is being built or not.

With that history, it is clear that this is a regression for GraphViz on
uwin, the temporary breakage seems reasonable to simplify the migration.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1944","3a3dbc37f18ede6dbaf45180ef666ee2c230a303","2021-05-03 00:08:49.016-04","2021-05-09T02:05:48.439Z","[]"
2102,2111,"Cleanup of drand48 declarations","Spawned off from !2107. Towards #2102.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2111","e34883b713b8b4a46e598cfd4f9fb42a71bc442c","2021-08-25 00:08:54.685-04","","[]"
1767,1470,"WIP: fix: remove Pango font caching","The Pango plugin was caching font descriptions upon lookup. Unfortunately the
cached description could outlive some of the pointers to the font's details that
were stored with it, leading to use-after-free accesses to these pointers in
subsequent calls to pango_textlayout. To address this, we simply remove the
caching altogether and destruct and then reconstruct the font description each
time. Fixes #1767.

@Caryon1, if you're in a position to build this from source, can you confirm it solves your problem?

----

This has a potential performance impact, as it's removing a caching mechanism. I think it's the right direction, as the caching mechanism was unsafe, but I wanted to outline an alternative so we go into this more informed. We could alternatively retain the cache and do a pointer comparison between `fontname` and `span->font->name`, and only discard the cached `desc` in this circumstance. This would avoid dereferencing the (stale) `fontname` pointer, but using a pointer comparison for this is a bit hacky. Thoughts?

We should probably also regression test this. However, I don't think the test suite currently has a convenient mechanism for compiling and running a C test case. Opinions on this (both whether this needs a test case and how it should be constructed)? I could just roll a pytest test case that compiles some C to a temporary directory and execs that?","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1470","ce172de3407f5fd7d5863f122e78095796b25512","2020-07-18 00:09:54.957-04","","[]"
2171,469,"Link to latest versions of dot.demo in GitLab.","Should fix https://gitlab.com/graphviz/graphviz/-/issues/2171","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/469","f38e3fcfb12a05e8de7294d615c37559c0be1f5a","2022-01-18 00:04:15.063-05","2022-01-18T07:17:02.311Z","[]"
1700,1480,"fix: out-of-bounds write on invalid label","When the label for a node cannot be parsed (due to it being malformed), it falls
back on the symbol name of the node itself. I.e. the default label the node
would have had if it had no label attribute at all. However, this is applied by
dynamically altering the node's label to ""\N"", a shortcut for the symbol name of
the node. All of this is fine, however if the hand written label itself is
shorter than the literal string ""\N"", not enough memory would have been
allocated to write ""\N"" into the label text.

Here we account for the possibility of error during label parsing, and assume
that the label text may need to be overwritten with ""\N"" after the fact. Fixes
issue #1700.

Will merge on 2020-07-31 if there are no objections.

----

Some (hopefully constructive) thoughts that came to me while debugging this one...

This required looking at lib/common/shapes.c. Nothing particularly dramatic about that, until I noticed the style of C written in this file. Let me explain what I mean, through the two lines lib/common/shapes.c:3305-3306:

```c
      if (!(mode & (HASTEXT | HASTABLE)))
    mode |= HASTEXT, *tsp++ = ' ';
```

So what exactly is going on here? Let's break it down. `mode` is a [bitmap](https://en.wikipedia.org/wiki/Bit_array) of settings. The conditional essentially says ""does the mode have neither `HASTEXT` nor `HASTABLE`?"". (Note that `HASTABLE` is referring to ""has table"", not a ""hash table""). That is, applying a logical op (`!`) to the result of a check of bit flags. OK. Now, there are no braces, so this `if` only guards a single statement. But the ""statement"" is using the comma operator to do two operations within a single statement. Note that we don't need any bracketing because of operator precedence working out in our favor. Now, the body of the `if` turns on `HASTEXT` by accumulating it into the bitmap. And we then write a space into our buffer we're accumulating and bump it forwards so we can continue appending. (As an aside, the [comma operator is a sequence point in C/C++](https://en.wikipedia.org/wiki/Sequence_point#Sequence_points_in_C_and_C++), so we don't need to think about aliasing between `mode` and `tsp`, though this is not a widely known fact.).

So unpacking this and removing the confusing indentation, I believe this is equivalent to:

```c
if (!(mode & (HASTEXT | HASTABLE))) {
  mode |= HASTEXT;
  *tsp = ' ';
  ++tsp;
}
```

Taking a step back, my intention is not to complain about this code, but rather to open a dialog here. The C in lib/common/shapes seems written by experts to only be comprehended by experts. My opinion is that it was impossible to debug the issue in question, #1700, without a deep understanding of C and its rules for precedence. This is a kind of technical debt that I think is still mostly invisible in the Graphviz code base. Should we be working to investigate and pay this down? Alternatively, maybe we should simply be looking at porting parts of Graphviz out of C where we can?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1480","784411ca3655c80da0f6025ab20634b2a6ff696b","2020-07-26 00:03:44.912-04","2020-07-31T14:34:48.407Z","[]"
2073,1963,"Stable Release 2.47.2","Proposing the next release for 2021-05-23.

@ryandesign, if you have time to update the !1951 commit message in the next week it could make it into this release. If not, no big deal, we try to release once a month or so now.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1963","7f6c9173ccb82cab3edcfb7bd76e34c65bd0fe27","2021-05-16 00:09:10.001-04","2021-05-27T00:53:31.526Z","[]"
552,2779,"remove dotty, lefty, lneato","Lefty, and its dependent tools Dotty and Lneato, have been suspected unused for
a long time. They were scheduled for removal, but we took a cautious and very
slow approach to this given how pervasive Graphviz is and the limited visibility
we have into its usage:

  1. 2021-09-25 make Lefty default to disabled in the build system¹
  2. 2022-01-16 disable Lefty in published graphviz.org packages²
  3. 2022-03-28 remove build system support³

This completes the final step of removing the code from the repository. It is
still retained in the history, should anyone need access to it or need to build
a past version of Graphviz with Lefty.

So far, we have only heard two notable reactions from the downstream world:

  1. Lefty disabling was not quite complete on the first attempt.⁴
  2. There has been an offer of assistance to maintain Lefty.⁵ No patches have
     yet emerged, but if and when they do we could feasibly reverse direction on
     this and reinstate Lefty and friends.

Gitlab: closes #219, closes #552, related to #1836, #1854

¹ 1a4ad00b59cc1e1e9302fcbd1a205495ee59cab5
² 04a78cc9ae01b2a7e5d5435146cd503c45af90b9
³ 6faa34010f947510ec129af2d998614de8a513ed
⁴ https://gitlab.com/graphviz/graphviz/-/issues/2153
⁵ https://forum.graphviz.org/t/lefty-not-a-graphviz-application/835/6","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2779","b2f287ca315dd5bf689d9ce2ca71dbfe63fb8a61","2022-08-03 00:08:37.228-04","2022-08-08T14:56:44.374Z","[]"
793,1656,"fix: fclose(NULL) in the VRML plugin when current directory is not writable","The VRML plugin writes PNG files of each node in the graph alongside the VRML
    output that then references these files. If you give no output location (do not
    pass `-o` to dot), the VRML output is written to stdout and the node PNG files
    are written to the current directory. However, the plugin was not checking
    whether opening of these PNG files succeeded. As a result, if the current
    directory was not writable, it would end up calling fclose() with a NULL
    pointer.

This change makes the plugin report the failure to open PNG files and cause dot
    to eventually exit with non-zero. Note that VRML processing is not stopped, so
    the user can still get complete VRML output, albeit missing the associated PNG
    files that will be referenced.

The test case included in this commit does not necessarily reproduce the failure
    prior to these changes. This is because Glibc allows fclose(NULL). However, this
    is beyond the spec and other libcs do not provide these guarantees.

Fixes #793.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1656","33fed9db1d4f73f46d297e3a268e419179e33d0c","2020-10-31 00:04:17.07-04","2020-11-07T01:23:59.972Z","[]"
2204,2551,"acyclic: remove unused unistd.h #include","Gitlab: #2204","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2551","68c447f3b8b8b25b351c6de65eba65f628db6792","2022-04-02 00:04:35.707-04","2022-04-05T01:39:30.397Z","[]"
1733,1419,"Correct path to test report","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1733

Broke in https://gitlab.com/graphviz/graphviz/-/commit/8b51a82287fe23a282e2933ffe321c200ddf797e","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1419","3cb3f4aab59fed3c5b52665a5875fa35c6abff87","2020-06-07 00:08:47.914-04","2020-06-07T18:39:10.921Z","[]"
1767,1489,"fix inconsistent iteration order over subgraphs","This is a second attempt at fixing #1767. There's actually two different issues fixed here:
* use of a potentially stale pointer in the Pango plugin
* subgraph iteration order dependent on heap pointers

This MR involved touching some code I only partially understand, so this could do with a careful review by others.

I'll merge on 2020-08-07 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1489","14be5169ef49faad0f30cd9d36cdd438e1739f77","2020-08-01 00:07:48.739-04","2020-08-08T02:17:43.737Z","[]"
1814,1812,"rewrite agxbputc as a function","This solves an issue where the macro implementation did not sufficiently bracket
its arguments. Fixes #1814.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1812","5dd296165e66f97769fa465b881b0b9c902113af","2021-03-01 00:01:19.453-05","2021-03-07T19:46:30.735Z","[]"
1718,3045,"CMake: enable LTO in release mode","Link-Time Optimization (LTO) is a mechanism that enables the compiler to
optimize across translation unit boundaries. In particular, it enables
cross-file function inlining. This is present and mature in the majority of
contemporary compilers and switching it on has few downsides.

Some performance numbers:

```
  ┌───────┬──────────────────┬──────────────────┬──────┐
  │       │ before           │ after            │ diff │
  ╞═══════╪══════════════════╪══════════════════╪══════╡
  │ 1652¹ │ 17.88s           │ 17.85s           │  -0% │
  │       │ 50.4MB peak RSS  │ 50.5MB peak RSS  │  +0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 1718² │ 2m21s            │ 2m13s            │  -6% │
  │       │ 15.8MB peak RSS  │ 15.9 MB peak RSS │  +1% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 1864³ │ 13.26s           │ 13.07s           │  -1% │
  │       │ 462.0MB peak RSS │ 461.8MB peak RSS │  -0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 2064⁴ │ 11m42s           │ 11m30s           │  -2% │
  │       │ 1.26GB peak RSS  │ 1.26GB peak RSS  │  -0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 2095⁵ │ 2m18s            │ 2m19s            │  +1% │
  │       │ 92.3MB peak RSS  │ 92.1MB peak RSS  │  -0% │
  └───────┴──────────────────┴──────────────────┴──────┘
```

¹ The test case from https://gitlab.com/graphviz/graphviz/-/issues/1652 run as
  `neato -Tsvg -o /dev/null 1652.dot`.
² swedish-flat.dot Magnus attached to
  https://gitlab.com/graphviz/graphviz/-/issues/1718 run as
  `circo -Tsvg -o /dev/null swedish-flag.dot`.
³ The test case from https://gitlab.com/graphviz/graphviz/-/issues/1864 run as
  `twopi -Tsvg -o /dev/null 1864.dot`.
⁴ The test case from https://gitlab.com/graphviz/graphviz/-/issues/2064 run as
  `dot -Gnslimit=2 -Gnslimit1=2 -Gmaxiter=5000 -Tsvg -o /dev/null 2064.dot`.
⁵ The tests/2095.dot test case from prior to minimization
  (3819821ea70fae730dd224936628ed3929b03531). Run as
  `dot -Tsvg -o /dev/null 2095.dot`.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3045","11c2897cc52385aa0bb03b022088a875814488b3","2023-01-08 00:06:13.804-05","2023-01-09T15:43:48.633Z","[]"
2102,2107,"Add MinGW CMake build jobs to CI","This commit series still uses a mixture of `.def` files and Microsoft storage-class attributes. The changes are almost the bare minimum to get MinGW CMake builds running in CI. More cleanup and removal of the `.def` files will follow in upcoming MRs.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2107","d5e67508b09c2e65d8647fd4e54f7170ef5bf2ea","2021-08-23 00:08:42.672-04","2021-09-01T16:11:53.087Z","[]"
1843,1592,"Add tools test","The overall goal of this MR is to add extremely basic testing of all (to me, to Ubuntu 18.04 autotools and to Windows MSBuild) known tools in the Graphviz suite. What is tested is that it is possible to start the tool and have it report its usage. In order to be able to achieve this, usage was added to some tools where missing and fixed in some tools where broken. No issues were written on these minor bugs, but CHANGELOG entries has been added for all of them.

Additional changes included in this MR that are not strictly necessary, but related and stumbled upon while working on it are:
* Add archiving of test report also from CI tests on Windows
* Fix apparently incorrect indentation disturbing understanding of changed functionality.
* Fix edgepaint -o option

Additional necessary fix:
* Fix gvmap.sh to be executed by the correct interpreter (ksh)

This MR stands on it's own feet, but the real reason for doing it now is to have better testing before dealing with https://gitlab.com/graphviz/graphviz/-/issues/1820.

Tools that do not exist or for some reason is broken for a particular combination of OS and build system are skipped and the code, commit messages and skip messages contain references to issues describing what the problem is.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1592","3ee3e2df9101be7f02506d561282280556e564b2","2020-09-26 00:01:33.365-04","2020-10-02T14:29:45.305Z","[]"
2093,2726,"gxl2gv: fix: anticipate elements with missing ID","This fixes a previous out-of-bounds pointer dereference that occurred in
`startElementHandler`.

Gitlab: fixes #2093","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2726","7f665faa134c62b0a1b5dffb01228c74a9117451","2022-06-24 00:05:40.063-04","2022-06-25T22:30:55.303Z","[]"
1800,1557,"Remove uncompiled code to increase readability","While debugging #1800, I stumbled on uncompiled code within `#ifdef`'s or `#if 0` that made the code harder to read. Most of these and some more are removed with this MR. No code that is compile is removed, so it should be a no-op.

I did't touch `cmd/smyrna` because: 1. There was an enormous amount of such code in it. 2. We will most certainly not make modifications to it in the forseable futher unless we just delete it as Stephen have mentioned as an option.

* Removes all code within `#ifdef OLD`
* Removes most code within `#ifdef UNUSED`
* Removes some code within `#if 0`.
* Removes some commented out code.
* Fixes one single insane indentation

I did *not* do this blindly. There are motivations for each commit. I've split up the cleanup of `lib/dotgen` into several commits because the motivations differ.

There are a lot more to be done. Especially if you grep for `#if 0`, but since I wanted make sure I didn't delete something that might have value, this was as much as I could handle at the moment.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1557","28d6eb1a475418248c08a5c7060b9796cc079ec9","2020-09-04 00:04:23.454-04","2020-09-11T05:36:00.008Z","[]"
2173,2393,"Unify storage class declarations in plugins","The sixth step after !2376 towards making storage-class declarations follow the Graphviz ""standard"" as described in https://gitlab.com/graphviz/graphviz/-/issues/2058#note_678679545.

The previous steps were !2378, !2380, !2386, !2389 & !2390.

Related to, but not necessary for #2058.

Towards https://gitlab.com/graphviz/graphviz/-/issues/2173.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2393","f43f461bb78ea52aabe2deb5d2dea7d433488e31","2022-01-10 00:09:14.981-05","2022-01-10T22:49:04.889Z","[]"
2185,2463,"various test cases for #2185","Some things based on discussion on #2185.

CC @truenorth, @steveroush","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2463","fd7dfdf876c447339ae306829917fee830711127","2022-02-20 00:02:56.493-05","2022-02-24T07:08:26.484Z","[]"
1772,1483,"Drive all tests from pytest","Resolves https://gitlab.com/graphviz/graphviz/-/issues/1772

* Uses `python3 -m pytest --junitxml=report.xml tests rtest` to drive all tests on all platforms.
* Use of `ctest` has been removed, but all existing `CMake` test code is left untouched (but is not complete and no longer regression tested).
* Tests that currently do not run on some platforms/build variants are skipped in the test case itself with a specified `reason` including a bug reference. Also `FIXME` comments explains this.
* The `CMake` `Debug` builds now also produces an `.exe` installer like the `Release` builds and testing has been enabled for them.

This means that new pytest tests added under `tests` or `rtest` will automatically run in CI on all platforms. While this is highly desirable, it may pose problems for developers without access to certain platforms. In this case one solution can be to add skipping of the test for a specific platform and file an issue about it.

While this MR is complete with respect to the `master` that it is based on, it should be rebased on the current master before merge and adaption of newly introduced tests may be necessary to be able to run them on all platforms. Hence the WIP.

Known new tests that have been introduced or will be introduced in master and may need adaption:

* ~~https://gitlab.com/graphviz/graphviz/-/merge_requests/1472~~ (reverted from master after merge and replaced by https://gitlab.com/graphviz/graphviz/-/merge_requests/1484)
* ~~https://gitlab.com/graphviz/graphviz/-/merge_requests/1460~~ (incorporated and adapted)
* ~~https://gitlab.com/graphviz/graphviz/-/merge_requests/1484~~ (incorporated and adapted)","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1483","e706cea6e53bc8f0eef81d577a8dd7c242b6fc32","2020-07-28 00:06:23.699-04","2020-07-31T22:34:23.071Z","[]"
1726,1393,"Fix mode=hier in neato","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1726.

The bug was introduced in 443592f1e8950df88f6df9c71b60667c9ad98006","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1393","cad84d27c75bb900e3224ca27723b106860d9f56","2020-06-02 00:04:37.107-04","2020-06-05T09:09:22.020Z","[]"
1707,1350,"fix out-of-bounds access with labels involving \","The following input would result in entering these loops with str == ""\"":

```dot
digraph structs {
node [shape=record];
struct1 [shape=record,label=""<f0> left|<f1> mid\ dle|<f2> right""];
struct2 [shape=record,label=""<f0> one| two""];
struct3 [shape=record,label=""hello\nworld |{ b |{c|<h\re> d|e}| f}| g | h""];
struct1 -> struct2;
struct1 -> struct3;
}
```

This would result in iterating past the end of the array. As reported by
@le3d1ng. Closes #1699.

----

After this there are still some remaining memory leaks but these seem secondary:

```sh
$ ./cmd/dot/dot ./heapBof
digraph structs {
        graph [bb=""0,0,246.15,148.4""];
        node [label=""\N"",
                shape=record
        ];
        struct1 [height=0.51389,
                label=""<f0> left|<f1> mid\ dle|<f2> right"",
                pos=""102.61,129.9"",
                rects=""34.864,111.9,69.52,147.9 69.52,111.9,127.91,147.9 127.91,111.9,170.35,147.9"",
                width=1.8817];
        struct2 [height=0.51389,
                label=""<f0> one| two"",
                pos=""36.606,37.7"",
                rects=""0,19.7,36.215,55.7 36.215,19.7,73.212,55.7"",
                width=1.0168];
        struct1 -> struct2      [pos=""e,49.068,55.732 89.88,111.51 80.048,98.071 66.295,79.275 55.226,64.147""];
        struct3 [height=1.0472,
                label=""hello\nworld |{ b |{c|<h\re> d|e}| f}| g | h"",
                pos=""168.61,37.7"",
                rects=""91.062,0.5,139.72,74.9 139.72,50.1,200.15,74.9 139.72,25.3,161.93,50.1 161.93,25.3,177.93,50.1 177.93,25.3,200.15,50.1 139.72,0.5,\
200.15,25.3 200.15,0.5,223.15,74.9 223.15,0.5,246.15,74.9"",
                width=2.154];
        struct1 -> struct3      [pos=""e,141.99,75.079 115.33,111.51 121.24,103.43 128.57,93.414 135.88,83.423""];
}

=================================================================
==4701==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 2100 byte(s) in 1 object(s) allocated from:
    #0 0x7fb59947d330 in __interceptor_malloc (/lib/x86_64-linux-gnu/libasan.so.5+0xe9330)
    #1 0x7fb5991d7c12 in gmalloc /home/matthew/graphviz/lib/common/memory.c:47
    #2 0x7fb599194dbf in gvconfig /home/matthew/graphviz/lib/gvc/gvconfig.c:542
    #3 0x7fb59919aed5 in gvContextPlugins /home/matthew/graphviz/lib/gvc/gvc.c:42
    #4 0x556ba142f74c in main /home/matthew/graphviz/cmd/dot/dot.c:100
    #5 0x7fb598f3009a in __libc_start_main ../csu/libc-start.c:308

Direct leak of 44 byte(s) in 8 object(s) allocated from:
    #0 0x7fb5993ce810 in strdup (/lib/x86_64-linux-gnu/libasan.so.5+0x3a810)
    #1 0x7fb59925961e in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3313
    #2 0x7fb59925b70e in record_init /home/matthew/graphviz/lib/common/shapes.c:3553
    #3 0x7fb599268311 in common_init_node /home/matthew/graphviz/lib/common/utils.c:653
    #4 0x7fb596386959 in dot_init_node /home/matthew/graphviz/lib/dotgen/dotinit.c:40
    #5 0x7fb596387461 in dot_init_node_edge /home/matthew/graphviz/lib/dotgen/dotinit.c:81
    #6 0x7fb596388ed0 in dotLayout /home/matthew/graphviz/lib/dotgen/dotinit.c:308
    #7 0x7fb59638a62d in doDot /home/matthew/graphviz/lib/dotgen/dotinit.c:463
    #8 0x7fb59638ac08 in dot_layout /home/matthew/graphviz/lib/dotgen/dotinit.c:509
    #9 0x7fb59918478c in gvLayoutJobs /home/matthew/graphviz/lib/gvc/gvlayout.c:85
    #10 0x556ba142f960 in main /home/matthew/graphviz/cmd/dot/dot.c:132
    #11 0x7fb598f3009a in __libc_start_main ../csu/libc-start.c:308

Direct leak of 6 byte(s) in 3 object(s) allocated from:
    #0 0x7fb5993ce810 in strdup (/lib/x86_64-linux-gnu/libasan.so.5+0x3a810)
    #1 0x7fb59925961e in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3313
    #2 0x7fb5992592b4 in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3291
    #3 0x7fb5992592b4 in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3291
    #4 0x7fb59925b70e in record_init /home/matthew/graphviz/lib/common/shapes.c:3553
    #5 0x7fb599268311 in common_init_node /home/matthew/graphviz/lib/common/utils.c:653
    #6 0x7fb596386959 in dot_init_node /home/matthew/graphviz/lib/dotgen/dotinit.c:40
    #7 0x7fb596387461 in dot_init_node_edge /home/matthew/graphviz/lib/dotgen/dotinit.c:81
    #8 0x7fb596388ed0 in dotLayout /home/matthew/graphviz/lib/dotgen/dotinit.c:308
    #9 0x7fb59638a62d in doDot /home/matthew/graphviz/lib/dotgen/dotinit.c:463
    #10 0x7fb59638ac08 in dot_layout /home/matthew/graphviz/lib/dotgen/dotinit.c:509
    #11 0x7fb59918478c in gvLayoutJobs /home/matthew/graphviz/lib/gvc/gvlayout.c:85
    #12 0x556ba142f960 in main /home/matthew/graphviz/cmd/dot/dot.c:132
    #13 0x7fb598f3009a in __libc_start_main ../csu/libc-start.c:308

Direct leak of 4 byte(s) in 2 object(s) allocated from:
    #0 0x7fb5993ce810 in strdup (/lib/x86_64-linux-gnu/libasan.so.5+0x3a810)
    #1 0x7fb59925961e in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3313
    #2 0x7fb5992592b4 in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3291
    #3 0x7fb59925b70e in record_init /home/matthew/graphviz/lib/common/shapes.c:3553
    #4 0x7fb599268311 in common_init_node /home/matthew/graphviz/lib/common/utils.c:653
    #5 0x7fb596386959 in dot_init_node /home/matthew/graphviz/lib/dotgen/dotinit.c:40
    #6 0x7fb596387461 in dot_init_node_edge /home/matthew/graphviz/lib/dotgen/dotinit.c:81
    #7 0x7fb596388ed0 in dotLayout /home/matthew/graphviz/lib/dotgen/dotinit.c:308
    #8 0x7fb59638a62d in doDot /home/matthew/graphviz/lib/dotgen/dotinit.c:463
    #9 0x7fb59638ac08 in dot_layout /home/matthew/graphviz/lib/dotgen/dotinit.c:509
    #10 0x7fb59918478c in gvLayoutJobs /home/matthew/graphviz/lib/gvc/gvlayout.c:85
    #11 0x556ba142f960 in main /home/matthew/graphviz/cmd/dot/dot.c:132
    #12 0x7fb598f3009a in __libc_start_main ../csu/libc-start.c:308

SUMMARY: AddressSanitizer: 2154 byte(s) leaked in 14 allocation(s).
```

I can't seem to test this because the test suite doesn't run in my config:

```sh
$ make check
...
Making check in rtest
make[2]: Entering directory '/home/matthew/graphviz/rtest'
make[2]: *** No rule to make target '../contrib/diffimg/diffimg', needed by 'check'.  Stop.
make[2]: Leaving directory '/home/matthew/graphviz/rtest'
make[1]: *** [Makefile:835: check-recursive] Error 1
make[1]: Leaving directory '/home/matthew/graphviz'
make: *** [Makefile:1130: check] Error 2
```

This is with the same `--enable-perl=no --enable-tcl=no` options I was using in #1707.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1350","cfd8364842fb0492e7d76e90de7cb6b607535999","2020-05-08 00:01:27.535-04","2020-05-15T12:24:10.948Z","[]"
1854,2083,"flip Smyrna default to disabled in the Autotools build system","This is step 1 of a 4 step plan to remove Smyrna:¹

  1. Default it to disabled.
  2. Disable it in CI jobs that build release artifacts.
  3. Remove build system support.
  4. Remove Smyrna code.

The current plan is to have ≥1 release in between each of these steps. This
should make backing out these steps straightforward if compelling reasons for
continuing to support Smyrna emerge.

The present change only affects users who build Smyrna using the Autotools build
system on Linux. Other environments are unaffected:

  - CMake build system: no support for building Smyrna (#1836).
  - macOS: Smyrna is disabled (#1854).
  - Windows: Smyrna is built but seems unusable (#1829).

Related, Smyrna is also not currently built on CentOS (#1834).

¹ https://gitlab.com/graphviz/graphviz/-/issues/1834#note_576332436","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2083","3b56e37a7850b9d7493af51979762fa9bf1e6583","2021-08-03 00:01:49.855-04","","[]"
1242,1566,"disambiguate #includes (2/5)","Following !1555, this is part 2 of the series towards #1242 and #1785.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1566","c35653d9a0eda7084dedbf95da0e2388c24e9dca","2020-09-10 00:05:24.163-04","2020-09-16T14:41:34.380Z","[]"
975,1456,"clean up unused parts of vmalloc","These changes fix #975 and #1424, as well as being a step on the way to fixing #1603 and #1757. A number of unused modes are removed, simplifying this significantly in preparation for delegating to the system allocator (`malloc`). Moving towards simply calling `malloc` to back vmalloc is roughly the approach @markhnsn suggested on [the forum discussion](https://forum.graphviz.org/t/some-vmalloc-questions/124). I've attempted to do these changes in a fine grained way. Though the diff is large, there's nothing particularly complicated going on. Hopefully each commit is comprehensible in isolation.

I'll merge this on 2020-07-11 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1456","34830836f4753e590685f5ce1f95ff9624bda4ad","2020-07-06 00:08:40.766-04","2020-07-11T17:36:15.850Z","[]"
372,2780,"Extend the SVG analyzer with basic SVG re-creation","This MR is the first in a series of MRs extracted from !2702. It lays the foundation for extending the SVG analyzer to understand Graphviz concepts, although the actual awareness of Graphviz graphs, nodes and edges will be added in an upcoming MR to avoid making this MR larger than it already is. Other MRs will extend the functionality further, create a test case for node and edge overlap and fixes for these overlaps.

Towards #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2780","66b0217fe50226ce0e62e312e493c2da736ac66e","2022-08-03 00:07:28.847-04","2022-08-16T11:16:18.342Z","[]"
1992,1801,"Cleanup config_python.py","- apply main convention
- use argparse instead of sys.argv
- There was no shebang, so using python3 should be compatible","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1801","34d14bf93fca92660285323197cc893f837d6b72","2021-02-27 00:09:33.783-05","","[]"
163,1586,"drop explicit libstdc++ references, allowing linking with libc++","Fixes #163.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1586","ed155274912f3eded8833ae644625e6017637634","2020-09-21 00:09:12.506-04","2020-09-27T02:17:40.305Z","[]"
1796,1535,"fix macOS lexer compilation","@truenorth, does this solve your problems from !1523?

----

Commits 3b00c1fc6b949cc9744d075e0d2b2ed4b1c46763 and
5162bfe8e72624ef7988b217e289476325365810 removed find-and-replace of an isatty
string, which exposed the following compilation error on macOS:

```
  [ 69%] Building C object lib/cgraph/CMakeFiles/cgraph.dir/grammar.c.o
  [ 70%] Building C object lib/cgraph/CMakeFiles/cgraph.dir/scan.c.o
  /Users/north/src/graphviz/build/lib/cgraph/scan.c:1706:12: error: expected
        identifier or '('
  extern int isatty (int );
             ^
  scan.l:44:19: note: expanded from macro 'isatty'
  #define isatty(x) 0
                    ^
  1 error generated.
  make[2]: *** [lib/cgraph/CMakeFiles/cgraph.dir/scan.c.o] Error 1
  make[1]: *** [lib/cgraph/CMakeFiles/cgraph.dir/all] Error 2
  make: *** [all] Error 2
```

which conveniently explained why this find-and-replace had existed in the first
place. Rather than reverting this, the present change uses a more principled way
of instructing Flex not to call isatty().

This reverts 40a5a33ac76e4d3d22662fd51e7c0e1d2be3100b. Related to #1796, !1522,
!1523.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1535","429718cb387092b5bf81850ac97d18ca34149055","2020-08-22 00:01:20.796-04","2020-08-23T18:11:45.589Z","[]"
1687,1335,"XML-escape xlink:href attribute in SVG","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1687","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1335","e2b87beb0732c170f543dd031dbda4ad8e11bbcc","2020-03-29 00:02:34.884-04","2020-03-30T17:33:19.700Z","[]"
2361,3128,"fix: anticipate non-normal edges when constructing ortho splines","When `splines=ortho` and `concentrate=true` were used in combination, scenarios
could occur when spline construction would dereference a null pointer. The root
cause was the logic touched in this change, that attempted to reverse an edge
back to its originating copy, while assuming that the originator was `NORMAL`.

As implied by 2c07d238d7badf47879cbe98837ef658276f515f and
84e468e775e1d1b293624f1c8e70c226eb4a6e41 on which this change is based, there
are almost certainly further remaining problematic `ED_edge_type` loops in the
code base.

Gitlab: fixes #2361<br/>
Reported-by: forum user jmetz","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3128","411d067a8d0dc1afa104ea1bebc949ff004d3e25","2023-03-23 00:00:12.693-04","2023-03-27T03:01:19.593Z","[]"
1838,2947,"CMake: fix: teach 'gvpack' how to find plugins at run time","Because `gvpack` links against the plugins as libraries rather than loading them
on demand, the dynamic linker needs to be able to locate the plugin libraries at
run time.

I am not sure if these changes work correctly on macOS. We may want to push this branch into the main repo to get macOS CI pre-merge.

@yarda, this goes against your suggestion of not using rpath. But this was the least invasive way I could see of dealing with this problem. Please let me know if you have a better suggestion.

@StefanBruens, you may have thoughts about this change too.

CC: Jaroslav Škarvada &lt;jskarvad@redhat.com&gt;<br/>
Gitlab: fixes #1838<br/>
Red Hat: fixes https://bugzilla.redhat.com/show_bug.cgi?id=1838679","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2947","315c1cf5243ee5d237f14cf81dd4800cd9852959","2022-11-12 00:07:47.32-05","2022-11-19T03:57:44.084Z","[]"
2058,2061,"Replace redefinition of extern","Redefinition of `extern` made it much harder to understand the code.

This MR replaces this redefinition by instead defining macros that are named after the file in which they are used or, in one case, removes a useless redefinition. It's meant to be a non-functional change. No other changes other than those needed to avoid redefining `extern` has been made.

A baby step towards #2058.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2061","ef5fa2b8ec4cc61aac7350bad93da9a4ac3de32e","2021-07-20 00:08:18.164-04","2021-07-21T17:19:56.250Z","[]"
1801,1615,"remove some use of setjmp/longjmp","More work towards #1801. This also squashes some compiler warnings along the way.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1615","4fa7b8719670d4fa089c2cf3d38ee1c87b841cde","2020-10-12 00:00:21.19-04","2020-10-20T02:10:37.454Z","[]"
2195,2450,"fix or avoid some warnings","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2450","287318ef6458a4c89291d39797eadef3c7991ef8","2022-02-16 00:00:06.794-05","2022-03-01T16:25:27Z","[]"
1734,1428,"fix building of blank PDFs for manpages","This is a fix of #1734 as well as some other Makefile cleanup. Note that this patch series renames the output file prune.pdf to prune.1.pdf, to be consistent with other manpage PDFs. I'll merge this on 2020-06-19 if I don't hear any objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1428","74f181aa9d9ee519cd2444267850038c90056329","2020-06-13 00:02:44.932-04","2020-06-20T00:27:52.066Z","[]"
2058,2348,"Remove useless exporting of symbols in gvc.def file","The is the first minor steps towards removing the `gvc.def` file.

The symbols removed in this MR already have correct storage-class attributes in their header files.

Towards #2058.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2348","8eeba1d5a854d97c6ce8fb4ccf2cbee095f25845","2021-12-19 00:01:31.951-05","2021-12-20T09:16:52.057Z","[]"
2102,2127,"More linking cleanup","Inspired by https://gitlab.com/graphviz/graphviz/-/merge_requests/2107#note_659379789. Similar to !2116, !2123 and !2124.

Implicitly towards #2102.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2127","358dfd9bbea3d63db6db7a207476a5de154cd8d0","2021-08-30 00:01:31.772-04","2021-08-30T16:41:20.390Z","[]"
205,1760,"fix multiple definitions of CDT variables under MinGW on Windows","Building with MinGW on Windows resulted in lots of build errors of the form:

  …/x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):
    dtdisc.c:(.bss+0x0): multiple definition of `Dtset';
    CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first
    defined here

The problem is that this environment defines `_WIN32`, so it sees the `__declspec`
alternatives for `CDT_API` in cdt.h. This is fine as GCC understands `__declspec`,
but it results in variable declarations in this header then missing the `extern`
qualifier. GCC’s semantics, in contrast to MSVC, interpret this as a definition
rather than a declaration.

The solution here is to *always* apply `extern` to these declarations, as MSVC is
happy with this as well. This is only addressing the immediate cause, and not
the longer term issue that `__declspec(dllexport)` and `__declspec(dllimport)` in a
Windows build should really be mapped to `__attribute__((visibility(""default"")))`
and `__attribute__((visibility(""hidden"")))` in a non-Windows build, not to `extern`.

Fixes #1940. Thanks to @Synoecium and @swaldhoer for guidance on this fix.

----

@synoecium, @swaldhoer, do you have a chance to review/test this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1760","88ca57327b090c4b0003f07e3bd243c95d7c95a4","2021-02-15 00:04:45.622-05","2021-04-24T16:27:24.371Z","[]"
1998,2066,"remove sfsprintf","Another step on the way to removing sfio. Related to #1998.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2066","1e5d4f9e0059dc2c7edb9e1adc1db7fc9b418a4b","2021-07-22 00:00:15.387-04","2021-07-28T04:43:57.432Z","[]"
2154,2384,"move lib/mingle/nearest_neighbor_graph.c into C++","More progress on #2154.

Windows jobs are all failing because Chocolatey is busted.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2384","b8d23ff68e7d14a6b12dc0b158518157aa005ecf","2022-01-08 00:04:10.533-05","2022-01-11T16:48:50.641Z","[]"
1998,2089,"more steps towards removing sfio","#1998.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2089","c6279f9c073718ea6ef6a4656372efc646dd77ce","2021-08-09 00:04:30.747-04","2021-08-12T15:43:11.631Z","[]"
2058,2036,"Fix ODR violation in lib/ortho","Fixes https://gitlab.com/graphviz/graphviz/-/issues/2096.

Spawned of from https://gitlab.com/graphviz/graphviz/-/merge_requests/2033 after discussions in https://gitlab.com/graphviz/graphviz/-/merge_requests/2033#note_619081872. I haven't dealt with the feedback that I've already gotten on https://gitlab.com/graphviz/graphviz/-/merge_requests/2033, hence this MR is WIP.

Another reason for the WIP is that this MR contains the commits from https://gitlab.com/graphviz/graphviz/-/merge_requests/2035 and should be rebased on the new master when that MR has been merged.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2036","f65f739bf23aa4f491a38631cc8dd5a22251345e","2021-07-06 00:02:52.033-04","2021-07-14T10:05:25.207Z","[]"
1931,1717,"fix: no longer lose \n within quoted strings","9bdd24cae96d01fc6b2a940bc87d27edeb5d84a7 addressed a problem where line number
tracking was not working across new line characters embedded within quoted
strings. However it accidentally unmasked another bug involving a parsing rule
that swallowed new lines which was incorrectly enabled within quoted strings.
Fixes #1931.

CC @robhart","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1717","2150241f101d87a971ef6b4d12b9edb47b3bf174","2021-01-30 00:02:23.485-05","2021-02-05T04:41:47.108Z","[]"
1318,3082,"fix: ignore CPP line directives claiming a line number greater than 'INT_MAX'","When using a C pre-processor line directive with a very large claimed line
number, the computation of the current line would wrap negatively, something
that is undefined behavior with respect to the C standard. This change causes
the lexer to ignore any such directives.

Gitlab: fixes #1318<br/>
Reported-by: Google Autofuzz project","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3082","40d2faf7b64bf0b9c5301c275cc2c2bdded9b0b4","2023-02-02 00:09:39.687-05","2023-02-13T02:50:22.040Z","[]"
1992,1987,"remove Python 2 support","~~These were copy-pasted from the generic Python support in
32466ecc452102a1fc84f4331c0ed099da4e7edc without noticing that they are unused
in the way Python 2 and 3 detection is written. Related to #1992.~~

Rebased this into a more thorough series that removes dead code and then finally Python 2 support. Note that this is additive wrt !1985. That is, !1985 is removing other Python 2 legacy (though inactive) pieces that are not covered by this MR.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1987","e632785ebda741ae6b394449fc115c2a7c0c7989","2021-06-04 00:01:40.996-04","2021-06-09T03:05:46.619Z","[]"
1808,1489,"fix inconsistent iteration order over subgraphs","This is a second attempt at fixing #1767. There's actually two different issues fixed here:
* use of a potentially stale pointer in the Pango plugin
* subgraph iteration order dependent on heap pointers

This MR involved touching some code I only partially understand, so this could do with a careful review by others.

I'll merge on 2020-08-07 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1489","14be5169ef49faad0f30cd9d36cdd438e1739f77","2020-08-01 00:07:48.739-04","2020-08-08T02:17:43.737Z","[]"
1883,1684,"Add gvpr to CMake builds","Adds gvpr to CMake builds on all platforms.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1684","8054c4ce7cb480849e9786a82c8140aa9ae7499f","2020-11-22 00:03:17.505-05","2021-02-16T16:01:18.431Z","[]"
1836,2549,"CMake: enable DevIL plugin","Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2549","9a35082b07bf826f27b3c375e9e1b73206ba9f69","2022-04-01 00:08:35.315-04","2022-04-02T16:18:38.008Z","[]"
934,3039,"remove webdot","Gitlab: closes #934, closes #1048, closes #1131","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3039","55494ef8efc4e7046a0fca57019dab99b8e44ab1","2023-01-05 00:06:07.748-05","2023-01-05T02:50:39.671Z","[]"
1688,90,"Convert index.md to markdown, mostly","Left images and links as raw HTML. Converted the rest though.","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/90","84858142e6bc15a6d1bb213665f167592507ff3c","2020-06-03 00:04:06.153-04","2020-06-03T12:05:33.281Z","[]"
1710,3031,"increase stack size on non-Linux platforms to 32MB","This repairs the long chain test after it was previously inadvertently broken. In a 64-bit
address space, 32MB is trivial and we could even adjust this limit higher in
future. Note that this is the reserved size, not the committed size.

Gitlab: closes #1710","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3031","0dbc370e123c68ea72da8ee2661d5e79a220007f","2023-01-01 00:01:25.049-05","2023-01-01T18:34:20.941Z","[]"
1916,2008,"CMake: when finding Bison, require ≥3.0","Commit 4a13c9598ad3d950a251e5d3e5be8d05c59c6214 make the minimum Bison baseline
3.0. This change teaches CMake ths constraint, so using a version of Bison <3.0
now results in a clearer error during configuration rather than a cryptic
failure during build. Closes #1916.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2008","c8cd2571b9de64d3ac4c5ec8082821bf13f0e6b9","2021-06-20 00:09:37.41-04","2021-06-26T23:23:34.574Z","[]"
1796,1523,"Remove obsolete and incorrect mangling of yacc output","Removes no longer needed transformation of yacc output for the `autotools` and `CMake` build systems. The `MSBuild` build system didn't have any AFAICT.

This mangling is (no longer?) necessary and some of them was anyway incorrect in that they converted unsigned long to uint_64_t which doesn't exist.

Fixes https://gitlab.com/graphviz/graphviz/-/issues/1796

Replaces https://gitlab.com/graphviz/graphviz/-/merge_requests/1522

Tanks @smattr for helping me stay on the straight and narrow path :innocent:","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1523","3b00c1fc6b949cc9744d075e0d2b2ed4b1c46763","2020-08-13 00:03:27.239-04","2020-08-18T09:43:25.757Z","[]"
2325,2997,"cgraph: remove 'agxbstart'","I have been doing some investigations into implementing Small String Optimization on `agxbuf` (#2302). Profiling some representative examples indicates this reduces peak memory usage by >50%.

Of the `agxbuf` interface, there are two problematic functions: `agxbstart` and `agxbnext`. Both of these allow acquiring pointers into the internal space of an `agxbuf` with difficult-to-preserve lifetime guarantees. Specifically, any operation that appends more data to the `agxbuf` must conservatively be assumed to invalidate a pointer previously returned from one of these functions. But this is not spelled out in comments or expressed in the type system.

Looking into how these functions are used, each is only called in a single place:
* `agxbnext` is called from `parse_style`. Its use here appears to be buggy (#2325) for exactly the hidden lifetime constraint described above.
* `agxbstart` is used in debug code in a way that is non-essential.

This MR rephrases the `agxbstart` call to avoid it and goes on to remove `agxbstart`. In future, we should do similar work on `agxbnext`.

Gitlab: related to #2325","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2997","9a5abdbbfec90edb8d4860b55831f9cf8a3fed90","2022-12-10 00:02:16.32-05","2022-12-14T01:03:05.992Z","[]"
2185,2479,"fix gvpr corruption of dynamically allocated arguments to user-defined functions","Gvpr programs can define their own functions which can then be called within the
same program:

```
  void foo(string s) {
    print(s);
  }

  foo(""bar"");
```

This mostly worked. However in some cases the gvpr implementation was not
extending the lifetime of the memory allocated to store the passed in value
long enough. Enumerating the cases in which this occurred is complicated because
whether this (used-after-free) memory retained its intended content depended on
(1) the complexity of the expression of the passed in value and (2) what the
target function (`foo` in the above example) was itself doing. As a result, it
seems users mostly did not observe the problem (program/output corruption)
unless they were writing non-trivial functions and calling them with non-trivial
expressions.

Commit 8da53964edec8a665c3996d483df243eb150c2c4 compounded the above problem by
replacing the underlying allocator. While both before and after states use an
arena allocator,¹ the allocator after this change eagerly returns memory to the
backing system allocator (`malloc`) on `vmclear` while the allocator before this
change retained it within its own internal pool. The system allocator is used
much more pervasively in the Graphviz code base than the more tightly scoped
lib/vmalloc allocator, and it also typically does much more aggressive reuse of
recently-freed memory under the assumption that this is more likely to still be
cache-resident and thus faster to access. The net effect of this was that the
chance of the memory in question being reused and overwritten significantly
increased, making a number of latent cases of the problem described above now
user-visible.

The fix in this commit removes the freeing of expressions that are still
potentially in use. The contents of a subexpression in the above described
scenarios now remains intact up to the point it is accessed when evaluating its
parent containing expression.

The astute reader who has followed everything up to now may notice that the
subexpressions’ contents are actually maintained _beyond_ the point of
evaluation of the parent expression, and may be wondering, “didn’t you just turn
a use-after-free into a memory leak?” Unfortunately the answer is yes. However,
it is unclear how to determine when it is safe to free a subexpression without
introducing a more complex concept of call stacks and arbitrarily nested
expressions to lib/expr. Thus given the choice right now between use-after-free
or leaking memory, we are choosing to leak memory. Hopefully this can be
revisited in future.

Gitlab: fixes #2185

¹ https://en.wikipedia.org/wiki/Region-based_memory_management","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2479","7d0906d3d3a6da012849816093a377f1971b7e5e","2022-02-26 00:03:29.968-05","","[]"
2291,2937,"CMake: fix bugs and enable some more seat belts","This series is the result of enabling the CMake warnings described in #2291 and then just squashing bugs until the damn thing builds.

Gitlab: fixes #2291","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2937","612b2f7f97440f81e6b044ee09da20db971404f1","2022-11-05 00:00:26.645-04","2022-11-08T05:46:46.438Z","[]"
1311,3072,"fix: exit when erroring during HTML lexing","Labels can be either plain text or HTML-like labels (`<`, `>` delimited). When
parsing an HTML-like label, the lexer would return the same result for a warning
or an error. This meant the caller would attempt to fallback to a plain text
label in either case. But when the HTML lexer has errored, the input has been
determined unparseable. Falling back to parsing a plain text label is unlikely
to work, and even if it does it produces something that is certainly not what
the user intended. In most scenarios, this fallback behavior would go onto to
crash messily, now that labels were populated with garbage data.

This change simply teaches the calling code to notice the error and exit instead
of falling back. Exiting from within library code like this is not particularly
clean or desirable, but there is no easy elegant error path from this code.

Gitlab: fixes #1311<br/>
Reported-by: Google Autofuzz project","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3072","0dbe5d3b038854d5be735f3eb52234a4f93e2065","2023-01-28 00:04:40.693-05","2023-01-29T16:18:47.120Z","[]"
1940,1741,"remove recapitulated prototypes of strcasecmp","These actually cause warnings in CMake Windows builds:

```
  …\lib\cgraph/strcasecmp.h(15,47): warning C4273: '_stricmp': inconsistent
    dll linkage […\graphviz\build\plugin\gd\gvplugin_gd.vcxproj]
  C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h(193,22):
    message : see previous definition of '_stricmp'
    […\build\plugin\gd\gvplugin_gd.vcxproj]
```

and MSBuild Windows builds:

```
  …\lib\cgraph\strcasecmp.h(23,64): warning C4211: nonstandard extension used:
    redefined extern to static […\graphviz\lib\cgraph\cgraph.vcxproj]
  …\lib\cgraph\strcasecmp.h(27,75): warning C4211: nonstandard extension used:
    redefined extern to static […\lib\cgraph\cgraph.vcxproj]
```

and Cygwin MinGW builds:

```
  …/lib/cgraph/strcasecmp.h:15:5: warning: '_stricmp' redeclared without
    dllimport attribute: previous dllimport ignored [-Wattributes]
     15 | int strcasecmp(const char *s1, const char *s2);
        |     ^~~~~~~~~~
  …/lib/cgraph/strcasecmp.h:16:5: warning: '_strnicmp' redeclared without
    dllimport attribute: previous dllimport ignored [-Wattributes]
     16 | int strncasecmp(const char *s1, const char *s2, size_t n);
        |     ^~~~~~~~~~~
```

Related to #1940.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1741","a115a5ddb0d2f772b804d640e5416a0b29050df1","2021-02-11 00:06:48.34-05","2021-02-17T01:44:34.665Z","[]"
2326,3003,"cgraph: implement SSO on agxbuf","This series modifies the generic string buffer `agxbuf` to implement [Small String Optimization](https://stackoverflow.com/questions/10315041/meaning-of-acronym-sso-in-the-context-of-stdstring), a technique for minimizing the in-memory footprint of shorter strings. It involves many commits, but most are small self-contained steps towards the goal.

For motivation, I will just quote the performance table from the last commit:

| | before                     | after                      | diff |
| --- | --- | --- | ---: |
| chain | 1.16s<br/>10436971652 instructions<br/>444MB peak RSS | 1.05s<br/>9006483829 instructions<br/>180MB peak RSS | -9%<br/>-14%<br/>-59% |
| long  | 2.69s<br/>22856315061 instructions<br/>1056MB peak RSS                      | 2.39s<br/>19359309874 instructions<br/>416MB peak RSS                      | -11%<br/>-15%<br/>-61% |
| 456a | 4h16m36s<br/>881MB peak RSS | 4h13m46s<br/>861MB peak RSS | -1%<br/>-2% |
| 1652a | 17.98s<br/>113257927412 instructions<br/>97MB peak RSS                     | 17.81s<br/>113083410200 instructions<br/>52MB peak RSS                     |  -1%<br/>-0%<br/>-46% |
| 1652b | 2m09s<br/>20MB peak RSS                     |  2m08s<br/>16MB peak RSS                      |  -1%<br/>-20% |
| 1718  | 2m34s<br/>1620909322870 instructions<br/>20MB peak RSS                      | 2m35s<br/>1620889232022 instructions<br/>18MB peak RSS                      |  +1%<br/>-0%<br/>-10% |
| 1864a | 32m05s<br/>3435MB peak RSS | 34m22s<br/> 1479MB peak RSS | +7%<br/>-57% |
| 1864b | 14.68s<br/>89053964853 instructions<br/>2421MB peak RSS | 13.62s<br/>83880586677 instructions<br/>464MB peak RSS | -7%<br/>-6%<br/>-81% |
| 2064  | 11m37s<br/>815499533953 instructions<br/>1370MB peak RSS                     | 11m38s<br/>814007887571 instructions<br/>1261MB peak RSS                     |  +0%<br/>-0%<br/>-8% |
| 2095 | 2m10s<br/>74871386805 instructions<br/>113MB peak RSS | 2m11s<br/>74549569707 instructions<br/>92MB peak RSS | +1%<br/>-0%<br/>-19% |

I'm still waiting on some further profiling to complete, but I wanted to post the series now to avoid delaying the 7.0.5 release. I think the data already paints a pretty compelling story.

Fixes #2326, Closes #2302","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3003","49df513ba741ca07de361039c9451d128415a63d","2022-12-18 00:07:16.381-05","2022-12-21T04:07:47.989Z","[]"
1836,2565,"CMake: enable Rsvg plugin","Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2565","ab513cdb5002bbb31956e06e86eee490e8bb5498","2022-04-07 00:08:44.748-04","2022-04-09T16:19:16.080Z","[]"
684,3093,"doc: update libguide.pdf to match sources for 'GVRENDER_*' constants","This table, and the rest of this document, was very out of date. This change
addresses specifically this table. The rest of the document remains out of date
and is most probably not used by contemporary programmers developing
applications using Graphviz libraries, who are better off reading the header
comments.

Gitlab: fixes #684<br/>
Reported-by: Steve Roush","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3093","c8a735724073e2baca734c627ff815c96ddfe279","2023-02-27 00:00:24.437-05","2023-03-12T17:55:40.335Z","[]"
1763,1496,"Port rtest.sh to Python and enable rtest on Windows","* New `rtest.py` Python 3 script which is a drop-in replacement of the old `test.sh` ksh script with the same functionality, the same options and the same use of environment variables. The image comparisons are made in exactly the same way as the old script using the same external tools (diff, diffimg, awk & sed).
* New rtest.sh bash script which is a simple wrapper for the new Python script.
* Enable execution of rtest tests on Windows.
* Workarounds for Windows issues including logging and FIXME comments with reference to GitLab issues.

The ksh to Python port is in the single commit https://gitlab.com/magjac/graphviz/-/commit/2b0a2fed58526704b5fd2dbfa52492fa0a4cc11a and effort has been made to make the implementation as similar as possible to the old ksh implementation to ease review of the code. Hence it's not very Pythonic. Improvements can be made later when the new script has gotten some mileage.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1496","4a4ca6a0715c1026547318151080349e3dcef0f4","2020-08-05 00:07:03.635-04","2020-08-08T05:22:54.567Z","[]"
1851,1643,"Ensure all existing tools are tested","The overall goal of this MR is to ensure that all tools built on different OSs using different build systems are also tested in CI. It does so by adding a check to the tools test, that for each individual tool that is skipped because it is not built with the OS/build system combination being tested, also checks that that tool is actually missing and fails the test if the tool is actually present.

While it may seem silly to fail a test because a tool is unexpectedly present, this will ensure that we don't forget to remove the skip once we actually start building the tool for that OS/build system combination. This is of course not a test that a normal user would like to have so it should be placed in the CI test category under `ci/tests` as discussed in https://gitlab.com/graphviz/graphviz/-/issues/1851 when that issue is resolved.

In order to accomplish this goal, the following changes were also needed:
* Don't skip testing the `gc` tool for CMake builds (This incorrect skip was actually detected be the new check :grin:)
* Ensure that Graphviz tools are found before other programs with the same name (e.g. `gc.exe`) in CI.
* Uninstall any old version of Graphviz before installing the new one in CI in order to avoid finding an old version of a tool that is not present in the OS/build system combination being tested.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1643","bd3abe9fde610e4e419fea203012788a49157639","2020-10-24 00:06:54.887-04","2020-10-25T09:26:52.291Z","[]"
82,1282,"Fix: copy pangoft2-1.dll with correct file name","A typo in gvplugin_pango.vcxproj caused pangoft2-1.dll to be copied as
pango2-1.dll. Fixes #1315.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1282","82610de2304838190d1416735e42e6e21cf0c349","2018-01-28 00:07:19.353-05","2018-03-02T12:11:29.758Z","[]"
2064,3045,"CMake: enable LTO in release mode","Link-Time Optimization (LTO) is a mechanism that enables the compiler to
optimize across translation unit boundaries. In particular, it enables
cross-file function inlining. This is present and mature in the majority of
contemporary compilers and switching it on has few downsides.

Some performance numbers:

```
  ┌───────┬──────────────────┬──────────────────┬──────┐
  │       │ before           │ after            │ diff │
  ╞═══════╪══════════════════╪══════════════════╪══════╡
  │ 1652¹ │ 17.88s           │ 17.85s           │  -0% │
  │       │ 50.4MB peak RSS  │ 50.5MB peak RSS  │  +0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 1718² │ 2m21s            │ 2m13s            │  -6% │
  │       │ 15.8MB peak RSS  │ 15.9 MB peak RSS │  +1% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 1864³ │ 13.26s           │ 13.07s           │  -1% │
  │       │ 462.0MB peak RSS │ 461.8MB peak RSS │  -0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 2064⁴ │ 11m42s           │ 11m30s           │  -2% │
  │       │ 1.26GB peak RSS  │ 1.26GB peak RSS  │  -0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 2095⁵ │ 2m18s            │ 2m19s            │  +1% │
  │       │ 92.3MB peak RSS  │ 92.1MB peak RSS  │  -0% │
  └───────┴──────────────────┴──────────────────┴──────┘
```

¹ The test case from https://gitlab.com/graphviz/graphviz/-/issues/1652 run as
  `neato -Tsvg -o /dev/null 1652.dot`.
² swedish-flat.dot Magnus attached to
  https://gitlab.com/graphviz/graphviz/-/issues/1718 run as
  `circo -Tsvg -o /dev/null swedish-flag.dot`.
³ The test case from https://gitlab.com/graphviz/graphviz/-/issues/1864 run as
  `twopi -Tsvg -o /dev/null 1864.dot`.
⁴ The test case from https://gitlab.com/graphviz/graphviz/-/issues/2064 run as
  `dot -Gnslimit=2 -Gnslimit1=2 -Gmaxiter=5000 -Tsvg -o /dev/null 2064.dot`.
⁵ The tests/2095.dot test case from prior to minimization
  (3819821ea70fae730dd224936628ed3929b03531). Run as
  `dot -Tsvg -o /dev/null 2095.dot`.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3045","11c2897cc52385aa0bb03b022088a875814488b3","2023-01-08 00:06:13.804-05","2023-01-09T15:43:48.633Z","[]"
1664,3165,"add a pre-processor script for downloading external images","A consistent request from Graphviz users has been the ability to use external
URLs in `image` attributes. While this is a perfectly reasonable requirement, it
is unclear how to implement this feature safely. Graphviz is a large, 40+ year
old code base, written in a memory unsafe language, that has proliferated
throughout the computing ecosystem. Adding the ability to make network requests
and download (potentially untrusted) content from the internet seems to
dramatically expand the Graphviz attack surface, something that may not be clear
to sysadmins around the world when they update Graphviz on their systems and
unwittingly acquire this functionality.

This MR takes an alternative, more conservative approach. The included
script can be used as a pre-processor, sitting in front of Graphviz itself. It
deals with external resources, allowing Graphviz to then see input with only
local image references.

Note that this script, in addition to being used standalone on the command line,
can be used programmatically:

```python
  import tempfile
  from pathlib import Path
  from dot_url_resolve import resolve

  with open(""my-graph.dot"", ""rt"") as src:
    with open(""my-translated-graph.dot"", ""wt"") as dst:
      tmp = Path(tempfile.mkdtemp())
      resolve(src, dst, tmp)
```

Gitlab: closes #1664<br/>
Reported-by: Wolfgang Fahl","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/3165","3cbfbc38740250eb260e1100505c42c35c291d90","2023-04-08 00:03:20.257-04","","[]"
1820,1592,"Add tools test","The overall goal of this MR is to add extremely basic testing of all (to me, to Ubuntu 18.04 autotools and to Windows MSBuild) known tools in the Graphviz suite. What is tested is that it is possible to start the tool and have it report its usage. In order to be able to achieve this, usage was added to some tools where missing and fixed in some tools where broken. No issues were written on these minor bugs, but CHANGELOG entries has been added for all of them.

Additional changes included in this MR that are not strictly necessary, but related and stumbled upon while working on it are:
* Add archiving of test report also from CI tests on Windows
* Fix apparently incorrect indentation disturbing understanding of changed functionality.
* Fix edgepaint -o option

Additional necessary fix:
* Fix gvmap.sh to be executed by the correct interpreter (ksh)

This MR stands on it's own feet, but the real reason for doing it now is to have better testing before dealing with https://gitlab.com/graphviz/graphviz/-/issues/1820.

Tools that do not exist or for some reason is broken for a particular combination of OS and build system are skipped and the code, commit messages and skip messages contain references to issues describing what the problem is.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1592","3ee3e2df9101be7f02506d561282280556e564b2","2020-09-26 00:01:33.365-04","2020-10-02T14:29:45.305Z","[]"
1745,1517,"Remove test workaround for previously wrong version in MSBuild builds","https://gitlab.com/graphviz/graphviz/-/issues/1745","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1517","c204c4f25046ed53c0bad409257e52258252f7c1","2020-08-11 00:02:33.16-04","2020-08-12T06:51:25.706Z","[]"
2352,3133,"improve robustness of detection of external SVG files","Resolves #2352. Though [as Stephen mentions](https://gitlab.com/graphviz/graphviz/-/issues/2352#note_1328032923) we may want to just bite the bullet and replace all this ad hoc logic with a proper SVG parser.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3133","4e1d9e120eaa70389f1567f530e053f0246ce82f","2023-03-25 00:00:32.678-04","2023-03-27T15:42:57.675Z","[]"
1630,1473,"clean up legacy build scripts and remove non-standard configure exec in autogen.sh","Closes #1630. I'll merge on 2020-07-25 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1473","2ffaad4fc607d8c84bfc997ec415b7b56ca8d4b9","2020-07-19 00:09:46.264-04","2020-07-25T20:37:31.709Z","[]"
2284,3044,"CMake: Similar to 3fcf0968, use gdlib.pc if available","The `gdlib-config` program is no longer installed with the newer versions
of the library as it is deprecated. The CMake build on CI for Fedora
prints the following, which is no longer the case with this patch:

```
CMake Warning at cmake/FindGD.cmake:63 (message):
  gdlib-config not found; skipping feature checks
Call Stack (most recent call first):
  contrib/diffimg/CMakeLists.txt:1 (find_package)
```

xref: https://github.com/libgd/libgd/issues/376#issuecomment-276138975","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3044","7db8e665cced464c15dfb4bd449d75e0dbce6ac9","2023-01-07 00:04:21.689-05","2023-01-23T17:07:15.323Z","[]"
2173,2389,"Miscellaneous non-functional changes to unify storage class declarations","The forth step after !2376 towards making storage-class declarations follow the Graphviz ""standard"" as described in https://gitlab.com/graphviz/graphviz/-/issues/2058#note_678679545.

The previous steps were !2378, !2380 & !2386.

Related to, but not necessary for #2058.

Towards https://gitlab.com/graphviz/graphviz/-/issues/2173.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2389","ac8e23758bdc58c0ec60b1ecd5e188fd12939952","2022-01-09 00:06:26.596-05","2022-01-10T14:01:55.516Z","[]"
1652,1619,"speed up Neato","These changes do something like what was described on #1652. They reduce the runtime of the Neato example from that issue by ~10%.

Apart from eyeballing the changes to ensure they have no effect on functionality, I ran the Neato example before and after and diffed the resulting SVGs. These were identical except for Graphviz version identifiers.

After these changes, the example spends ~64% of its time in `right_mult_with_vector_ff`, which could be an interesting target for further optimization. The two other notable expensive small functions are `invert_sqrt_vec` (~7.5%) and `sqrt_vecf` (~6.9%). I don't think much can be done to these two, though we could try to reduce how frequently they are called or use [one of the inversion trick approximations](https://en.wikipedia.org/wiki/Fast_inverse_square_root).

Unfortunately I suspect this MR has little effect on the original test case in #1652, because it was not using Neato. We could look at optimizing that next, though it would have to be on a partial trace as that example does not run to completion. This also strongly indicates that peephole optimizations like this will have little effect and we probably have to find an algorithmic optimization.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1619","3b11777b671e77e3567e9ec6bc2eb076fb5c18be","2020-10-15 00:03:38.023-04","2020-10-22T00:28:19.040Z","[]"
2282,2863,"core plugin: some simplification and clean up of the JSON renderer","Some minor improvement opportunities I noticed while debugging #2282.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2863","a3343ed56ae4ff92d55ae2815d6e048c0e7e4e8f","2022-09-28 00:03:58.422-04","2022-09-28T15:53:04.392Z","[]"
2342,3120,"Fix assertion failure when processing 0-sized arrows","Fixes https://gitlab.com/graphviz/graphviz/-/issues/2342 for all arrow shapes affected (`normal`, `inv`, and `diamond`) and ensures that there's no gap between the edge (stem) and the node for any 0-sized arrow shape which was a problem introduced by the fixes for #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3120","6800aa6b2a3ac9f25bbc6bacaf84ec2e389d91a0","2023-03-20 00:00:55.991-04","2023-03-21T01:08:43.502Z","[]"
1285,2718,"fix: use '-module -avoid-version' when compiling TCL packages","Quoting from #1285:

>  They are runtime loadable (dlopen, or equivalent, from tcl program, via
  'load') rather than shared libraries for dynamic linking by others. On OS X,
  these two concepts have different extensions (.so vs .dylib). It's confusing
  when a runtime-loadable module has a dynamic-linker extension. In commit
  40123aedcd2761e98d8c9917be6040ea6187c97f, the -module flag was added to
  LDFLAGS in tclpkg/gv/Makefile.am, which fixes libgv_tcl.
  Could the same change be applied to the other tclpkg/*/Makefile.am LDFLAGS?

Gitlab: fixes #1285

Suggested-by: Daniel Macks","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2718","aecbd46a2cc33234f8132f49a44196f6a0141824","2022-06-17 00:01:46.834-04","2022-06-22T04:40:48.058Z","[]"
1671,1328,"Fix issue 1671: Workaround: avoid creating a virtual edge loop.","See https://gitlab.com/graphviz/graphviz/-/issues/1671

Note that this is not an actual solution! But it makes the testcase not hang, and shouldn't break any working examples.

The code removed from flat_rev is already done in merge_oneway. Doing it in flat_rev just reintroduces the problem that merge_oneway just bypassed.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1328","549c7725b043c03cf62dae3acc0509350d03cd7b","2020-03-12 00:02:45.139-04","2020-04-06T23:05:05.892Z","[]"
1793,2639,"gvpr: replace use of alternative stack implementation with Graphviz generic one","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation. This also adds checks for allocation failures that were
previously missing.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2639","3cb475f26539cbb6a2edbef1d6285b39a409288c","2022-04-26 00:05:51.132-04","2022-04-28T06:11:49.258Z","[]"
2047,1908,"clean up and warning squashing in lib/neatogen","This does not affect any functionality or user-visible behavior.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1908","c3a47c78d262da6de1621352bc89fb3fe39ee4e9","2021-04-18 00:00:12.361-04","2021-04-24T21:11:55.703Z","[]"
2131,2192,"CMake: fix: build gv2gml instead of symlinking gml2gv","Fixes #2131.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2192","0f53142f71ce26215ffc7392a3096a43d46ecf19","2021-09-26 00:09:48.017-04","2021-09-27T00:48:37.931Z","[]"
45,1760,"fix multiple definitions of CDT variables under MinGW on Windows","Building with MinGW on Windows resulted in lots of build errors of the form:

  …/x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):
    dtdisc.c:(.bss+0x0): multiple definition of `Dtset';
    CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first
    defined here

The problem is that this environment defines `_WIN32`, so it sees the `__declspec`
alternatives for `CDT_API` in cdt.h. This is fine as GCC understands `__declspec`,
but it results in variable declarations in this header then missing the `extern`
qualifier. GCC’s semantics, in contrast to MSVC, interpret this as a definition
rather than a declaration.

The solution here is to *always* apply `extern` to these declarations, as MSVC is
happy with this as well. This is only addressing the immediate cause, and not
the longer term issue that `__declspec(dllexport)` and `__declspec(dllimport)` in a
Windows build should really be mapped to `__attribute__((visibility(""default"")))`
and `__attribute__((visibility(""hidden"")))` in a non-Windows build, not to `extern`.

Fixes #1940. Thanks to @Synoecium and @swaldhoer for guidance on this fix.

----

@synoecium, @swaldhoer, do you have a chance to review/test this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1760","88ca57327b090c4b0003f07e3bd243c95d7c95a4","2021-02-15 00:04:45.622-05","2021-04-24T16:27:24.371Z","[]"
2094,3096,"gxl2gv: fix: stop attempting to delete nodes closed after graphs","It is not clear to me why a terminating node tag (`</node>`) appearing after a
terminating graph tag (`</graph>`) requires any special handling. Git history
provides no clues either. In the #2094 test case, this code path leads to null
pointer dereferences. We can fix this by simply removing this logic.

Gitlab: fixes #2094<br/>
Reported-by: chiba of topsec alphalab","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3096","b265f2c9a625df13a53f51376653ca87f8891e36","2023-03-01 00:01:14.244-05","2023-03-06T23:51:56.999Z","[]"
1042,1801,"Cleanup config_python.py","- apply main convention
- use argparse instead of sys.argv
- There was no shebang, so using python3 should be compatible","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1801","34d14bf93fca92660285323197cc893f837d6b72","2021-02-27 00:09:33.783-05","","[]"
2299,2934,"smyrna: fix memory leak in column construction","By using string views, we can avoid the need to duplicate the graph attribute
value here. This allocation that was previously being lost no longer is made at
all.

Gitlab: fixes #2299","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2934","7590e36dd22dd7e7f0efe6cf6b5b420b0459fa66","2022-11-05 00:01:28.206-04","2022-11-10T04:40:40.317Z","[]"
1998,2621,"sfio: remove some dead code","The long plan remains removing SFIO altogether, as discussed in #1998. However, it seems unlikely we'll be able to achieve that in the short term, so this at least reduces the code we're maintaining/compiling.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2621","49ab810da44129b18955202684c39b14a97138d9","2022-04-21 00:06:59.76-04","2022-04-24T02:34:11.387Z","[]"
2220,2895,"Draft: SVG support for 'desc' accessibility attr","I figured let's just use the 'desc' name, same as SVG. It's a decent
name, but could go with other names too.

Towards #2220","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/2895","c3b78f0029e199306f4048160cf3db1f5ae656a9","2022-10-08 00:07:42.896-04","","[]"
1933,1725,"remove dead suffix parsing code","As discussed on #1933.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1725","074eeea616f3d49e0e5d74b1d4e249db5c386660","2021-02-01 00:04:51.666-05","2021-02-13T19:02:32.275Z","[]"
2000,2872,"Make vimdot work with $EDITOR that is not a full path","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2872","2c364a58c2df0838f1bdf2874d2bb141917b5038","2022-09-30 00:01:30.863-04","2022-10-01T02:00:45.175Z","[]"
2200,2722,"CI: make UBSan errors fatal in sanitizer job","This does some work to make UBSan more useful in CI. It also removes the `use_sanitizers` option in the CMake build system as my experience was that its effect is neither necessary nor sufficient to enable ASan or UBSan. This may be controversial, so please comment if you disagree.

Gitlab: #2200","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2722","07cd81faeb48cad16d5e1d5a033ba7be2c6d0729","2022-06-19 00:00:57.292-04","2022-06-25T04:02:53.746Z","[]"
2227,2892,"Import cairo-svg.h without cairo/ prefix","Some places in our codebase we load `cairo.h` directly.

This seems to pass CI. And it makes me able to build graphviz on macOS.

Seems pretty common for OSS projects to include `cairo-svg.h` like this: https://github.com/search?l=C&q=include+cairo-svg.h&type=Code, though there is a mix of `cairo-svg.h` and `cairo/cairo-svg.h`.

Fixes #2227 

Supercedes !2887, this is pushed to the Graphviz repo branch so the macOS runners can run.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2892","ec45746fbcef17cd4fd54ea666cb24330ee52dff","2022-10-08 00:05:34.637-04","2022-10-11T10:00:56.226Z","[]"
1789,1518,"Remove rtest workaround for non stable cluster order","Since https://gitlab.com/graphviz/graphviz/-/issues/1767 (Duplicate: https://gitlab.com/graphviz/graphviz/-/issues/1789) was fixed, the test runs fine.

Thanks for fixing @smattr :muscle:","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1518","27030bffaeee757286c26967a442cfc8016512e4","2020-08-12 00:07:55.058-04","2020-08-12T15:04:14.695Z","[]"
634,2100,"more char* → const char* in libcgraph","The final pieces of #634.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2100","a0490586e2e7c62fc032ad75d3933e1a03bbb96f","2021-08-15 00:00:47.459-04","2021-08-19T03:35:36.513Z","[]"
2185,2480,"expr: [nfc] some clean up","Some minor things I came across while working on #2185. Posting this separately to avoid complicating the review of !2479.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2480","807f4d1bb4499b7e5f2767a52df686251301ff60","2022-02-26 00:04:50.64-05","2022-02-28T00:06:31.605Z","[]"
1869,1663,"Remove warnings and enable all warnings for non MSVC CMake builds","Enables ""all"" warnings in CMake builds by setting `-Wall` and removes all the 50+ warnings that were revealed. Also fixes a few minor issues that were discovered and removes some commented out code.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1663","017a0471a371f965301dbfb2275954fabb5fde1f","2020-11-08 00:07:55.301-05","","[]"
1772,1460,"replace vmalloc with system allocator (malloc)","This is the second half of !1456, that closes #1603 and #1757. As with !1456, I've tried to compose a set of fine-grained commits where every intermediate state passes the test suite and does not introduce any new compiler warnings. This change preserves the pool-style characteristic of vmalloc (see below), but the allocator method and discipline are no longer configurable. The system allocator (`malloc`) is always used.

I'll merge on 2020-07-17 if I don't hear objections.

# ""Why didn't you remove the vmalloc abstraction altogether and replace it with `malloc` and friends?""

It seems to me that lib/expr relies on using vmalloc as a pool allocator: it allocates blocks, which it never frees, assuming that a final call to `vmclose` will clean this up. To preserve the ability to do a final sweep clean up of an entire generation of allocations, I left the interface roughly the same.

# ""How does vmalloc accounting/metadata work now?""

An allocator instance, `Vmalloc_t`, tracks the heap pointers it has handed out in an array `allocated`. This array gets dynamically expanded, doubling each time it needs to be reallocated. `bestresize` and `bestfree` use the array to confirm pointers the allocator has previously given out. `vmclear` frees everything the allocator has given out (its ""pool"") and resets this array to its initial state. `vmclose` calls `vmclear` before deallocating the `Vmalloc_t` itself.

# ""How do I now debug memory leaks, use-after-free, etc?""

With conventional tools like [Valgrind](https://valgrind.org/) and [ASan](https://clang.llvm.org/docs/AddressSanitizer.html). This is actually somewhat easier than before, as vmalloc is now more transparent to these tools. Accidental memory leaks from a vmalloc caller are still hard to catch because a pointer to the allocation will remain in the `Vmalloc_t` metadata, so ASan/Valgrind will only flag this if the caller also fails to call `vmclose`. To make this more transparent, we would have to remove the use of vmalloc altogether.

# ""Does this affect performance?""

Honestly I have not profiled, but if anything I would expect this to accelerate Graphviz. The `malloc` implementations in libcs like Glibc and Musl have had decades of work put into optimizing them. While Graphviz' vmalloc seems like a solid design based on established strategies, it has had relatively little attention recently. Having said that, the existing vmalloc usages don't look like they're on hot paths to me, so I would not be surprised if there is no measurable difference.

# ""Why did you leave the `allocf`, `resizef`, `freef` function pointers when they're now always wired to the same functions?""

I guess I thought I'd quit while I was ahead :) We can certainly simplify this further in future.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1460","ff5a77bdc7670815b8c9ba7ce8d816b5113d952b","2020-07-12 00:00:39.706-04","2020-07-27T13:40:41.119Z","[]"
1832,1869,"use range-based for loops to clean up some code","This change has no effect on functionality. Related to #1832.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1869","d5fe1bf473799ee1cba0328b3702a7faaf91bc3a","2021-03-27 00:03:09.622-04","","[]"
1526,1314,"#1526  Update shapes.html with a missing </TABLE> tag...","#1526  Update shapes.html with a missing </TABLE> tag (https://www.w3.org/TR/html401/struct/tables.html 11.2.1)","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1314","cbeca707fde309da39616e5623c22ede691d1d2d","2019-04-30 00:05:40.21-04","2019-05-24T03:09:13.806Z","[]"
2103,2409,"expr: fix misinterpretation of shifts","Fixes #2103","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2409","f1baa04e064631847cb065a0d3af53c51d21e008","2022-01-16 00:03:26.475-05","2022-01-19T17:17:53.996Z","[]"
1088,1672,"Stable Release 2.46.0","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1672","d94465b13f1636f8e3e6a4f6dc69b9301b592534","2020-11-15 00:07:37.714-05","2021-01-18T17:47:32.226Z","[]"
1980,1846,"Fix for TBbalance attribute code","As described in #1339 TBbalance is an undocumented graph attribute that is
supposed to cause nodes to ""rise"" or ""fall"" to the minimum or maximum rank
possible.  The attached code snippet seems to repair the bug in this code.

Comment from Matthew Fernandez: I committed this, but I don’t understand enough
about the context to judge its correctness. The above is Steve’s description of
the situation.

Fixes #1339 and #1980.

CC @steveroush","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1846","e511e26c6ffaed28d476532928073f6f111d89f9","2021-03-18 00:04:02.309-04","2021-03-29T01:13:28.038Z","[]"
1713,1438,"Windows builds in the Gitlab CI/CD pipeline","* Adds the same builds as we currently have on Appveyor to the GitLab CI/CD pipeline
* When merged, will deploy binaries to https://www2.graphviz.org/Packages/development/windows/10/
* Includes an upgrade from Visual Studio 2015, Windows SDK 8.1 to Visual Studio 2019, Windows SDK 10.0
* Test run that deploys to https://www2.graphviz.org/Packages/experimental-development/windows/10/ can be seen [here](https://gitlab.com/graphviz/graphviz/-/pipelines/159672916). The Appveyor builds fail because Visual Studio 2019 is not supported there.
* When merged, the Appveyor builds will fail in master so want can't use them in parallel.
* Before merging I will prepare an update to the documentation

## Future enhancements deliberately not included
* Single source of truth for version numbering for autogen, CMake & MBuild (but !1440 provides this for CMake)
* Fix for https://gitlab.com/graphviz/graphviz/-/issues/1748
* Separation of Windows build and test jobs
* Windows Docker images with preinstalled prerequisites
  * Will speed up builds because no installations will be needed in the build jobs
  * Will remove the need for the git submodules containing dependencies","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1438","295817e55ebebb91be2262cca60868a69884247b","2020-06-24 00:01:04.873-04","2020-06-29T04:24:50.412Z","[]"
2058,2338,"Remove pathplan.def file","The pathplan.def file is replaced with correct storage-class attributes in the pathplan header files.

Towards https://gitlab.com/graphviz/graphviz/-/issues/2058.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2338","e10d49e47b62c3c50b794e1d32293d58a19bf996","2021-12-12 00:07:52.797-05","2021-12-19T21:17:16.941Z","[]"
227,1801,"Cleanup config_python.py","- apply main convention
- use argparse instead of sys.argv
- There was no shebang, so using python3 should be compatible","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1801","34d14bf93fca92660285323197cc893f837d6b72","2021-02-27 00:09:33.783-05","","[]"
2317,2974,"remove unused 'PLATFORMSDKINCLUDE_ESCAPED' build system variable","More progress towards working NetBSD compilation, #2317.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2974","9e2c85757e0aee4f17fe8d11c83df8aeb6814f4c","2022-11-24 00:02:41.239-05","2022-11-27T19:27:37.329Z","[]"
1753,2953,"add 'gvedit' to the CMake build system","Note that we need to disable building GVEdit on Windows in CI because we do not
currently have Qt installed there.¹

Gitlab: closes #1753, closes #1836

¹ See graphviz/graphviz!1569 for further
  discussion.

----

This works (a functional GVEdit comes out the end of the build), but it fails coverage testing because gcov/lcov cannot read one of the generated files. Ideas? I am not sure if it is failing to parse C++ or trying to open a file that does not exist on disk.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2953","473399214a3a989ae06897962d11aef4559882a6","2022-11-14 00:00:07.611-05","2022-11-17T05:57:09.936Z","[]"
2173,2394,"Unify storage class declarations in gvc++","The seventh step after !2376 towards making storage-class declarations follow the Graphviz ""standard"" as described in https://gitlab.com/graphviz/graphviz/-/issues/2058#note_678679545.

The previous steps were !2378, !2380, !2386, !2389, !2390 & !2393.

Related to, but not necessary for #2058.

Towards https://gitlab.com/graphviz/graphviz/-/issues/2173.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2394","000e24569b5aced7f60f2d72e0c920911e862d99","2022-01-10 00:04:59.746-05","2022-01-11T07:15:50.459Z","[]"
1759,1511,"Use preinstalled diffutils instead of installing it in CI","One more step towards https://gitlab.com/graphviz/graphviz/-/issues/1759.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1511","6828dcf0b40e582aa43ed9ac3d87ab16d190f49a","2020-08-10 00:01:51.721-04","2020-08-10T07:13:49.762Z","[]"
1876,1686,"revert changes to add non-local names to internal map","Merge Request !1489 made a change to which names were stored in the internal
map. Following this, non-local names (user-provided ones; not starting with '%')
were stored in the internal map as well as local names. This inadvertently broke
some fdp and circo assumptions (#1876, #1877, !1676).

This change reverts the main pieces of the following commits, resolving #1876
and #1877, while re-opening #1767 and #1789.
   * 4f283dd1c02a6a4999b53ad2fcbf2264a7074a8b
   * 85b09cf13179b0e5ab8bddb4857e3d2af0a39a31
   * 9409324489a69557229d3d6f505857b9af85a913
   * 2a9449a99b2a2146fce01fa1d9713e999ad3dd4e
   * 14be5169ef49faad0f30cd9d36cdd438e1739f77
   * b6ffeca3a4457efcffbc3fcdbcee683375f74d05

We will need to find a different solution to #1767.

----

This is a more conservative MR that supersedes !1676. It simply backs out the original changes, reopening some issues.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1686","25e2d0cc91e026b54ebde6f1c7133d36ddb3bcdf","2020-11-29 00:03:19.22-05","2021-01-12T01:18:19.767Z","[]"
1540,1317,"fix: check for mmap failure in plugin code","When mmap fails, it returns MAP_FAILED, not NULL. The code following these mmap
calls is expecting us->data to end up NULL in the case of failure.

Closes #1540

----

I don't have a good strategy for testing these changes, so if there's something particular you'd like me to run to validate them please let me know.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1317","1eefb70ca5cf6d2d9ece4f6173fc9486e5b46a77","2019-07-28 00:03:56.241-04","","[]"
2227,2572,"Fix unintended recursion in vec_delete","Fixes #2225","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2572","dbe5dbb222eb419d3498e73166621fb97a539fb9","2022-04-08 00:07:36.27-04","2022-05-05T00:58:45.743Z","[]"
2250,2529,"fix neatopack crashes and restore the test","Fixes #1800

Introduce agbindrec before GD_* ND_* where is required.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2529","243eecaa23a699c121493e21caedf2dc8e58ed6c","2022-03-24 00:08:11.007-04","","[]"
1829,2083,"flip Smyrna default to disabled in the Autotools build system","This is step 1 of a 4 step plan to remove Smyrna:¹

  1. Default it to disabled.
  2. Disable it in CI jobs that build release artifacts.
  3. Remove build system support.
  4. Remove Smyrna code.

The current plan is to have ≥1 release in between each of these steps. This
should make backing out these steps straightforward if compelling reasons for
continuing to support Smyrna emerge.

The present change only affects users who build Smyrna using the Autotools build
system on Linux. Other environments are unaffected:

  - CMake build system: no support for building Smyrna (#1836).
  - macOS: Smyrna is disabled (#1854).
  - Windows: Smyrna is built but seems unusable (#1829).

Related, Smyrna is also not currently built on CentOS (#1834).

¹ https://gitlab.com/graphviz/graphviz/-/issues/1834#note_576332436","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2083","3b56e37a7850b9d7493af51979762fa9bf1e6583","2021-08-03 00:01:49.855-04","","[]"
2317,2962,"push some build system logic into Python","Some partial steps towards #2317. It seems the existing `date` logic in autogen.sh was not portable.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2962","67060ba72b59e189b7b2a3d3e3db65e43a699bb4","2022-11-19 00:08:44.859-05","2022-11-24T19:40:00.370Z","[]"
1242,1520,"WIP: disambiguate include paths (1/5)","This is part 1 of 5 of a patch series towards #1242 and #1785. None of the changes in this or the follow up parts are complicated, but there are a lot of them so I chose to split them up. They are:

1. disambiguate `lib/*/*.c` #includes (this MR)
2. disambiguate `cmd/*` #includes ([1785-2](https://gitlab.com/smattr/graphviz/-/tree/1785-2))
3. disambiguate `plugin/*` #includes ([1785-3](https://gitlab.com/smattr/graphviz/-/tree/1785-3))
4. disambiguate `tclpkg/*` #includes ([1785-4](https://gitlab.com/smattr/graphviz/-/tree/1785-4))
5. disambiguate `lib/*/*.h` #includes and remove extraneous include paths ([1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5))

@ldionne.2, can you confirm the final end state, [1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5) resolves your libc++ compilation problem?","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1520","56afa9562e8800686c6f7246d2f823e36b8a3ff3","2020-08-13 00:03:10.062-04","","[]"
1950,3066,"graphml2gv, gv2gxl: 'sprintf' replacement and bug fixing","Another attempt at dealing with #1950 but once again side tracked by coming across bugs along the way.

Gitlab: #1950","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3066","cc686d8e1612a284f794dd2502a6fa2d6656a60c","2023-01-22 00:04:02.766-05","2023-01-28T07:39:16.079Z","[]"
2154,2618,"move gvpack into C++","`gvpack` conditionally links against lib/vpsc which is partly written in C++. So it needs to play an Autotools trick to link against libstdc++. We can avoid the need for this trick as well as simplifying its code by moving it into C++ instead of C.

This MR does not do everything possible, but does some first steps at simplifying the code.

#2154.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2618","41dbe467f56a253c89955f78892310fe9f34c37e","2022-04-20 00:08:32.81-04","2022-04-25T03:54:41.405Z","[]"
1820,1608,"Replace outdated getopt","The main goal of this MR is to replace the `windows/getopt` code in the repo with modern officially supported versions as outlined in https://gitlab.com/graphviz/graphviz/-/issues/1820. In addition to that it also makes minor improvements related to this and changes the behavior of most tools to show usage and fail when an unsupported option is given as described in given https://gitlab.com/graphviz/graphviz/-/issues/1843. The reason for not making this a separate MR was that I considered it an important step in the verification of the main goal.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1608","421c1fa2c01fe9255b47dd414a22099f9f082377","2020-10-07 00:02:49.357-04","2020-10-09T05:08:26.473Z","[]"
2058,1739,"fix: depend on _MSC_VER instead of _WIN32 for use of __declspec import/export","Non-MSVC Windows environments (e.g. MinGW under Cygwin) do not understand
__declspec and so were failing to infer the correct declarations. This change is
mostly an educated guess, as I don't have a Windows machine to test MinGW on.
Fixes #1940.

----

@Synoecium, are you able to test this?","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1739","e5f6a6170d820c258bf50d0b8804b7678d0699f7","2021-02-11 00:01:43.926-05","","[]"
2279,2855,"fix smyrna regressions","Changes in Graphviz 2.49.2 and onwards accidentally removed Smyrna functionality and caused it to malfunction. This MR reverts the commits necessary to fix this while attempting to not introduce too many new build warnings.

Gitlab: fixes #2279","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2855","70f757e98f3fd6c88a3324b6c40070eed7fe6314","2022-09-25 00:04:38.282-04","2022-09-26T16:06:50.649Z","[]"
2266,2383,"add Mingle to the CMake build system","I thought I would post where I'm at with this, even though it fails CI.

Current blockers:
* Both Cygwin and Msys2 seem unusable right now. Chocolatey is failing to fetch these packages.
* Both macOS and 64-Windows CI environments do not seem to have libANN available
* Mingle on 32-bit Windows is erratic. When built using MS Build, it can run and return success. When built using CMake, it just segfaults.

Combining the above details into the relevant exemptions in ci/tests.py and rtest/test_tools.py was turning into a mess. Will revisit this later.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2383","c824d586363cc80dd872052ae37ad61930cb6bb9","2022-01-08 00:09:20.081-05","2022-03-19T21:54:38.175Z","[]"
2282,2868,"fix erroneous commas in JSON output of graphs with only clusters","When a graph or subgraph contained exclusively subnodes that were clusters (that
is, it contained a non-zero number of subnodes, but all of them were clusters),
the output of `-Tjson` would contain an extra comma. This malformed JSON could
not be ingested by most downstream parsers.

This appears to have been a mistake in f82c51fc9644047e9ce80d860fea562e98d3311c
that introduced cluster skipping in the loop that emits nodes in JSON. It did
not account for the earlier part of the containing function that was intended to
early-exit if the loop would have a 0 iteration count.

As noted in the discussion of #2282, a couple of the maintainers believe this
manual JSON writing code is inherently fragile and likely contains more latent
bugs. But we do not have maintainer consensus on migrating to an established
JSON-writing library. This fix attempts to surgically address the current known
bug. But I cannot guarantee it does not introduce others.

Gitlab: fixes #2282","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2868","d35a9ff59b0cee749572cde1d622a5a4f7fd036a","2022-09-29 00:04:10.131-04","2022-09-29T16:36:24.826Z","[]"
2087,3130,"dotgen: avoid reallocing rank collection when shuffling; split text span chunk allocations","This series contain two changes, whose potential I noticed while working on #2087.

----

It is not clear that the shuffling loop in this function was safe; it is moving
through the list backwards, but when copying each entry it is not obvious that
`ND_order(v) >= i`. Without this property, the copying loop would overwrite
entries it had yet to get to.

Trying to experiment with variations using the test suite indicates this code
has no test coverage.

This MR refactors the expansion into something that does not rely on the
aforementioned property to be true. While making this change we also move to the
newer allocation wrappers.

----

Memory for text spans was allocated all at once and then separated into
'\0'-delimited chunks during construction. E.g.

```
  ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
  │ h │ e │ l │ l │ o │ \0│ w │ o │ r │ l │ d │ \0│
  └───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘
    0   1   2   3   4   5   6   7   8   9   10  11
```

This makes the initial construction of `str` more complicated than it needs to
be (this will be simplified in an upcoming commit) and makes memory safety tools
less effective (in the above depiction, ASan and Valgrind cannot detect an
out-of-bounds read through the first chunk’s pointer into byte 6 because this
still lies within the same block of allocated memory).

This change refactors these chunks to have a clearer and more constrained size
and lifetime.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3130","107d0dc3e5fb82b11324f5b43185922437149dc7","2023-03-23 00:00:55.126-04","2023-03-26T23:11:50.282Z","[]"
2047,2006,"test cases for ortho routing bugs and typo fix in eqEndSeg","This fixes a typo which was causing this function to check equality incorrectly.
Unfortunately this seems to have no effect on any open ortho-related bugs.
Closes #2047.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2006","0e356d53f5b685213c744549c7f44e1998b7fa0a","2021-06-19 00:01:48.404-04","2021-06-26T05:15:34.012Z","[]"
2149,2257,"do not create packaging hierarchy directory for architecture","The packaging directories were created based on various dimensions of a matrix,
with architecture at the lowest level. On Linux and macOS, Graphviz is only
packaged for a single architecture (x86-64). On Windows, Graphviz is only
packaged for two architectures (x86 and x86-64). However, the architecture is
also present in the suffix of every packaged file. E.g.

  Graphviz-2.49.3-win32.exe
  Graphviz-2.49.3-win64.exe
  graphviz-nox-2.49.3-1.fc33.x86_64.rpm

So there is no ambiguity if we drop the architecture directory. This seems to be
a case of YAGNI¹ where the system was setup to accommodate multiple
architectures but this has not been needed. We remove it now to (1) reduce
complexity and (2) have less verbose release filenames.²

Closes #2149.

¹ https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it
² Example of a current verbose release filename,
  stable_windows_10_cmake_Release_Win32_graphviz-install-2.49.3-win32.exe","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2257","59377c02ae71834b329bff763302ed6fab391875","2021-10-31 00:01:40.552-04","2021-11-06T18:49:08.857Z","[]"
1424,1456,"clean up unused parts of vmalloc","These changes fix #975 and #1424, as well as being a step on the way to fixing #1603 and #1757. A number of unused modes are removed, simplifying this significantly in preparation for delegating to the system allocator (`malloc`). Moving towards simply calling `malloc` to back vmalloc is roughly the approach @markhnsn suggested on [the forum discussion](https://forum.graphviz.org/t/some-vmalloc-questions/124). I've attempted to do these changes in a fine grained way. Though the diff is large, there's nothing particularly complicated going on. Hopefully each commit is comprehensible in isolation.

I'll merge this on 2020-07-11 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1456","34830836f4753e590685f5ce1f95ff9624bda4ad","2020-07-06 00:08:40.766-04","2020-07-11T17:36:15.850Z","[]"
1554,1439,"fix memory leak in find_all_cycles()","While investigating #1554, I tripped over a memory leak in `find_all_cycles()`. I'll merge this on 2020-06-30 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1439","c4ef19f483d577a8395a1a1f9ca5a321af3472b5","2020-06-25 00:05:32.025-04","2020-07-01T00:38:52.605Z","[]"
634,2058,"Add a very basic C++ API","This is the C++ API part of !2033 which was too large. The implementation has been modified according to the discussion in https://gitlab.com/graphviz/graphviz/-/merge_requests/2033#note_619077068.

The new C++ API supports creating a graph from DOT source, performing a layout of that graph and rendering it to a specified format.

An upcoming MR will add the layout construction overloads using rvalue refs discussed in that thread and an additional upcoming MR will add the SVG analyzer part of !2033.

Closes #2001.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2058","d57d5a12482a328cec277787c776c2e683ac92eb","2021-07-18 00:09:20.629-04","2021-08-07T06:49:46.910Z","[]"
1658,2672,"final fix of four 🪲🪲🪲🪲 ortho bugs 🎉","Root cause of bugs were floating point comparison and precision issues.

Fixes #14, #1408, #1658 and #1990

Please read patch descriptions for details.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2672","d3248f7b8e965af98f4a3e1e47da716e41db2ff9","2022-05-16 00:02:41.946-04","2022-06-11T19:23:14.229Z","[]"
372,2601,"Minor cleanup in poly_init","Some minor improvements made while working on #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2601","6763300cb0c22f8afc6248ef03040d12d151f416","2022-04-16 00:07:51.611-04","2022-04-17T10:29:58.762Z","[]"
1762,2043,"remove GVPR Vim syntax","This file was upstreamed into Vim itself in Vim commit
2346a6378483c9871016f9fc821ec5cbea638f13. The version in Vim can now be
considered authoritative and we can cease maintaining a copy here in Graphviz.
Related to #1762.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2043","6f2ff8158a580c0abca5c693a2dfcfa6096df345","2021-07-09 00:05:27.555-04","2021-07-10T16:06:18.398Z","[]"
1836,2560,"CMake: enable GDK plugin","Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2560","220f7c873edf2ae627fde2d69b28063f92693a5b","2022-04-03 00:05:30.15-04","2022-04-09T02:21:36.372Z","[]"
2197,2701,"Fix overlap caused by penwidth for polygon-based nodes and normal and inv edge arrows","Following !2780, !2797, !2808, !2824, !2828, !2845 and !2849, this is the eighth in a series of MRs extracted from !2702. It fixes https://gitlab.com/graphviz/graphviz/-/issues/372 for all [polygon-based node shapes](https://graphviz.org/doc/info/shapes.html#polygon) (Note that this also includes ellipse-based shapes which Graphviz special-cases as two-sided polygons) except `cylinder` and for the `normal` and `inv` [primitive edge arrow shapes](https://graphviz.org/doc/info/arrows.html#primitive-shapes).

Upcoming MRs include (not necessarily in this order or partitioned like this):

- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.
- Replacement of the use of the rounding macro `POINTS` with the non-rounding macro `INCH2PS` which started already in this MR since it caused overlap problems.
- Fixes for other primitive edge arrow shapes.

Below are images showing the stepwise fixes applied for this DOT source:
```
digraph g1 {
  graph [rankdir=TB]
  node [penwidth=2 shape=box color=""#00000060""]
  edge [dir=both arrowhead=onormal arrowtail=oinv penwidth=2 color=""#00000060""]  a -> b
}
```
I've used a semi-transparent pen color to make it easy to see were the overlaps are.

Original image:

![step0.svg](/uploads/f5664c86e94855d09adf8cf9fcec8c13/step0.svg)

After taking edge penwidth into account when positioning arrow:

![step1.svg](/uploads/73792345da1491ff980e97bd95163c60/step1.svg)

After taking node penwidth into account when clipping edge at node boundary:

![step2.svg](/uploads/b69b21887f3906664a55e4895efc71f1/step2.svg)

After clipping the edge just inside the node outline boundary instead of just outside (to avoid a gap):

![step3.svg](/uploads/feed75ad3714b8a7042ca86fb09d6ccc/step3.svg)

After taking edge penwidth into account when clipping the edge stem at the edge arrowhead or arrowtail:

![step4.svg](/uploads/5ab12b803df7659b688c1956af52af94/step4.svg)

Below is a list of node shape families and arrow types to show which are fixed and not by this MR.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [ ] tee
- [ ] box
- [ ] diamond
- [ ] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2701","beede1476b3b23cd22ca1cb0f3b089aa397e42ab","2022-05-27 00:06:15.781-04","2022-10-11T20:46:22.761Z","[]"
1994,1581,"Configure plugins at build time","This removes the need for the user (or our CI) to run `dot -c` after installation unless the user has their own plugins to configure. This is the way it has been for the `autotools` builds for a long time. This MR adds it for the rest of the build systems and installers/packages:

* The **CMake NSIS** .exe installer on Windows
* The **CMake Debian** package on Linux (added in https://gitlab.com/graphviz/graphviz/-/merge_requests/1578)
* The **CMake ZIP** archives on all operating systems (although these are not deployed anywhere today)
* The **MSBuild ZIP** archives

~~Only the last 5 commits needs to be reviewed in this MR. It currently contains the commits from https://gitlab.com/graphviz/graphviz/-/merge_requests/1578 since it removes the `dot -c` that was added to the CI config file in that MR. It will be rebased on the new master when that MR is merged, hence the WIP.~~","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1581","2c295a1373676cef2110aa0c5e23d993115c4597","2020-09-16 00:05:40.425-04","2020-09-30T07:49:08.166Z","[]"
1786,3044,"CMake: Similar to 3fcf0968, use gdlib.pc if available","The `gdlib-config` program is no longer installed with the newer versions
of the library as it is deprecated. The CMake build on CI for Fedora
prints the following, which is no longer the case with this patch:

```
CMake Warning at cmake/FindGD.cmake:63 (message):
  gdlib-config not found; skipping feature checks
Call Stack (most recent call first):
  contrib/diffimg/CMakeLists.txt:1 (find_package)
```

xref: https://github.com/libgd/libgd/issues/376#issuecomment-276138975","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3044","7db8e665cced464c15dfb4bd449d75e0dbce6ac9","2023-01-07 00:04:21.689-05","2023-01-23T17:07:15.323Z","[]"
1863,2472,"Use ""none"" instead of ""transparent"" when painting in SVG","The SVG 1.1 spec, which SVGs generated by gvrender_core_svg.c are
labeled as, does not have the color ""transparent"" available which is
causing issues with SVG 1.1 parsers.

When specifying paint in the fill or stroke attributes, use ""none""
instead of ""transparent"".  When specifying a gradient color that has
zero opacity, use that color at zero opacity instead of ""transparent"".
When specifying a gradient with the graphviz transparent color, use
a zero-opacity black as this is how SVG interprets ""transparent"" in
gradients in SVG 2.0.

This MR was created from issue #1863.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2472","dcb9d4e6128831f8c9c88e79e5631430482f86bd","2022-02-23 00:02:10.325-05","2022-08-13T16:14:13.539Z","[]"
251,1578,"Add Linux CMake test job to CI (including needed generation of a .deb package and correction of some linking problems)","The overall goal of this MR is to enable testing of the Linux CMake builds, but in order to do so a few other things were needed:

* Generation of a Debian package in the CMake builds. Makes it possible to reuse much of the already existing CI infrastructure.
* Adaptation of the tests job template and existing Linux autotools test jobs to accommodate the new Linux Cmake test job.
* Correction of linking problems, mainly in libgvc that showed up as undefined symbols when compiling the test examples in [`dot.demo`](https://gitlab.com/graphviz/graphviz/-/tree/master/dot.demo).
* Adaptation of the skip conditions in the tests to skip things not yet included in the CMake build. Basically just making the CMake skips non-Windows specific.

Note that the newly produced Debian package is incomplete in the sense that it only contains what we currently build with CMake so it cannot replace all libraries that we deploy from the autotools build. Also, it packages everything into a single package, as opposed to the autotools builds where the functionality is segmented into different packages.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1578","514e84cc836163e54196e58276a330eaa0e994ef","2020-09-15 00:06:42.426-04","2020-09-23T06:55:59.708Z","[]"
634,2023,"test cases for #2089","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2023","af11717053fe4230ba5e120231eefe6ddc0c8865","2021-06-29 00:06:17.242-04","2021-07-05T04:24:08.444Z","[]"
1621,1375,"fix documentation links","Fixes #1621. I couldn't find equivalents for some broken links in HTML pages under doc/, but I fixed the ones I could.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1375","965aa14cff6a6ac6ec26501a93c7ad27a7887689","2020-05-30 00:01:06.733-04","2020-06-03T00:47:35.752Z","[]"
265,2958,"core plugin: stop emitting an empty 'alt' tag in cmap output","This was working around a behavior on an old version of Microsoft Internet
Explorer that is no longer supported. Tooltips should show consistently on
modern browsers and the `alt` tag is once again available to be set dynamically
by Javascript or inherited.

Gitlab: closes #265<br/>
Reporte-by: ib","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2958","a214b9dc2be6b4a9d27196e2c43f7bf2b0ff0002","2022-11-17 00:04:07.584-05","2022-11-18T01:01:39.957Z","[]"
1815,1560,"Fix silent fail of Windows builds in CI","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1815.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1560","36c50d03759cc98d9071bcdf910ff21525ec2ea2","2020-09-06 00:01:57.457-04","2020-09-07T06:17:01.437Z","[]"
1970,1801,"Cleanup config_python.py","- apply main convention
- use argparse instead of sys.argv
- There was no shebang, so using python3 should be compatible","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1801","34d14bf93fca92660285323197cc893f837d6b72","2021-02-27 00:09:33.783-05","","[]"
1946,1751,"Install cmake in ubuntu-18.04 image","I suppose sometime, canonical must have removed cmake from the deps of another package we installed.

Towards #1946","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1751","e36c65c04a7305f9f48db7e20ed128b5a72f62ac","2021-02-14 00:05:37.56-05","2021-02-14T05:06:18.360Z","[]"
1802,1535,"fix macOS lexer compilation","@truenorth, does this solve your problems from !1523?

----

Commits 3b00c1fc6b949cc9744d075e0d2b2ed4b1c46763 and
5162bfe8e72624ef7988b217e289476325365810 removed find-and-replace of an isatty
string, which exposed the following compilation error on macOS:

```
  [ 69%] Building C object lib/cgraph/CMakeFiles/cgraph.dir/grammar.c.o
  [ 70%] Building C object lib/cgraph/CMakeFiles/cgraph.dir/scan.c.o
  /Users/north/src/graphviz/build/lib/cgraph/scan.c:1706:12: error: expected
        identifier or '('
  extern int isatty (int );
             ^
  scan.l:44:19: note: expanded from macro 'isatty'
  #define isatty(x) 0
                    ^
  1 error generated.
  make[2]: *** [lib/cgraph/CMakeFiles/cgraph.dir/scan.c.o] Error 1
  make[1]: *** [lib/cgraph/CMakeFiles/cgraph.dir/all] Error 2
  make: *** [all] Error 2
```

which conveniently explained why this find-and-replace had existed in the first
place. Rather than reverting this, the present change uses a more principled way
of instructing Flex not to call isatty().

This reverts 40a5a33ac76e4d3d22662fd51e7c0e1d2be3100b. Related to #1796, !1522,
!1523.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1535","429718cb387092b5bf81850ac97d18ca34149055","2020-08-22 00:01:20.796-04","2020-08-23T18:11:45.589Z","[]"
2001,2058,"Add a very basic C++ API","This is the C++ API part of !2033 which was too large. The implementation has been modified according to the discussion in https://gitlab.com/graphviz/graphviz/-/merge_requests/2033#note_619077068.

The new C++ API supports creating a graph from DOT source, performing a layout of that graph and rendering it to a specified format.

An upcoming MR will add the layout construction overloads using rvalue refs discussed in that thread and an additional upcoming MR will add the SVG analyzer part of !2033.

Closes #2001.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2058","d57d5a12482a328cec277787c776c2e683ac92eb","2021-07-18 00:09:20.629-04","2021-08-07T06:49:46.910Z","[]"
1734,2608,"Simplify PDF generation","* Make the suffix rule visible unconditionally, make only the PDF target (`pdf_DATA`) visible if `groff` is available and the user hasn't explicitly disabled PDF generation.

@smattr I have compared the different approaches, I don't think increasing the tarball by 10% just to bundle PDFs most people can generate themselves is worth it.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2608","def16bd0dd2cc161ac474c2ac1e2003a30224f0b","2022-04-17 00:09:12.705-04","2022-04-20T01:43:48.991Z","[]"
2233,3027,"CMake: look for and use Qt6 in preference to Qt5","The CMake build system was setup to exclusively find Qt5 for gvedit, while Qt6 has been out for sometime. This series teaches it Qt6 support.

It remains an open task to adapt the Autotools build system (from which Qt4 support was previously dropped) to also support Qt6.

Gitlab: #2233","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3027","743aed2fea0206827294c9efa6ab117a2ba8dceb","2022-12-31 00:03:38.657-05","2022-12-31T18:10:38.044Z","[]"
251,2250,"clean up in debian/","Some work towards #251.

Given packaging for Debian actually happens externally to Graphviz and the files under debian/ seem extremely out of date, a better solution may be to just delete most of this. We seem to be using debian/rules in CI, but most of the other files look completely incorrect.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2250","42d7c87c291781ccaff47126a5ad3a2469e310cc","2021-10-24 00:04:39.71-04","2021-10-31T02:24:25.959Z","[]"
1990,2701,"Fix overlap caused by penwidth for polygon-based nodes and normal and inv edge arrows","Following !2780, !2797, !2808, !2824, !2828, !2845 and !2849, this is the eighth in a series of MRs extracted from !2702. It fixes https://gitlab.com/graphviz/graphviz/-/issues/372 for all [polygon-based node shapes](https://graphviz.org/doc/info/shapes.html#polygon) (Note that this also includes ellipse-based shapes which Graphviz special-cases as two-sided polygons) except `cylinder` and for the `normal` and `inv` [primitive edge arrow shapes](https://graphviz.org/doc/info/arrows.html#primitive-shapes).

Upcoming MRs include (not necessarily in this order or partitioned like this):

- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.
- Replacement of the use of the rounding macro `POINTS` with the non-rounding macro `INCH2PS` which started already in this MR since it caused overlap problems.
- Fixes for other primitive edge arrow shapes.

Below are images showing the stepwise fixes applied for this DOT source:
```
digraph g1 {
  graph [rankdir=TB]
  node [penwidth=2 shape=box color=""#00000060""]
  edge [dir=both arrowhead=onormal arrowtail=oinv penwidth=2 color=""#00000060""]  a -> b
}
```
I've used a semi-transparent pen color to make it easy to see were the overlaps are.

Original image:

![step0.svg](/uploads/f5664c86e94855d09adf8cf9fcec8c13/step0.svg)

After taking edge penwidth into account when positioning arrow:

![step1.svg](/uploads/73792345da1491ff980e97bd95163c60/step1.svg)

After taking node penwidth into account when clipping edge at node boundary:

![step2.svg](/uploads/b69b21887f3906664a55e4895efc71f1/step2.svg)

After clipping the edge just inside the node outline boundary instead of just outside (to avoid a gap):

![step3.svg](/uploads/feed75ad3714b8a7042ca86fb09d6ccc/step3.svg)

After taking edge penwidth into account when clipping the edge stem at the edge arrowhead or arrowtail:

![step4.svg](/uploads/5ab12b803df7659b688c1956af52af94/step4.svg)

Below is a list of node shape families and arrow types to show which are fixed and not by this MR.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [ ] tee
- [ ] box
- [ ] diamond
- [ ] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2701","beede1476b3b23cd22ca1cb0f3b089aa397e42ab","2022-05-27 00:06:15.781-04","2022-10-11T20:46:22.761Z","[]"
1934,1928,"try to work around `lneato -?` flakiness on Windows","Related to #1934.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1928","8d66050e0a9f39a8108a42ac526d96eef2bb1377","2021-04-25 00:03:46.237-04","2021-05-01T23:28:09.772Z","[]"
1646,7,"Update download page with latest stable release","Also remove link to ancient development release and replaced it with a
link to all development releases.

Fixes https://gitlab.com/graphviz/graphviz/-/issues/1646","closed","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/7","c3b8359391103274d04e46111f1eab826e5abd92","2020-04-12 00:05:13.624-04","","[]"
2258,2793,"some DEVELOPERS.md tuning and a #2258 test case","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2793","cc8e2d3aa5d84d8a6f87d8bcea296a5c3abe2f3d","2022-08-15 00:07:14.882-04","2022-08-18T15:44:00.741Z","[]"
1795,1584,"remove testing pieces from CMake build","The existing test fragments in the CMake files had two undesirable effects:

  1. Projects using Graphviz as a subdirectory would pick up this test suite and
     it would get run as part of their own test suite. See #1795.

  2. The fragments incorrectly gave the impression this was the canonical set of
     Graphviz tests and/or that this is what was run in CI. The current reality
     is that CI ignores this path to a subset of the tests, and most of the
     maintainers do not run this either.

Closes #1795.

----

This also includes some other miscellaneous cleanup I noticed along the way. This MR subsumes !1521 which seems to have stalled, and also has some cross cutting impact on !1478, !1479, and !1487.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1584","83899df130c34dbad7c7172f015f112858a7065f","2020-09-19 00:02:51.846-04","2020-09-26T01:28:05.917Z","[]"
1926,1708,"fix typo in pathscross()","This MR addresses #1926. We should probably merge it prior to !1707 to avoid a warnings regression.

I don't have a good idea what functionality is being affected here or what impact this fix has. Any suggestions on how to test this or a better change log message are welcome.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1708","68f170b50f00a41dcc720cb852fad664120e2ec6","2021-01-24 00:03:06.866-05","2021-01-30T20:16:33.126Z","[]"
163,1595,"configure.ac: Add e2k platform","Elbrus (also known as Elbrus 2000) is a Russian 64-bit LE VLIW.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1595","b15a77b19b455381091bb76383b03fd5f4376594","2020-09-29 00:08:53.337-04","2020-10-01T14:39:50.195Z","[]"
1748,1438,"Windows builds in the Gitlab CI/CD pipeline","* Adds the same builds as we currently have on Appveyor to the GitLab CI/CD pipeline
* When merged, will deploy binaries to https://www2.graphviz.org/Packages/development/windows/10/
* Includes an upgrade from Visual Studio 2015, Windows SDK 8.1 to Visual Studio 2019, Windows SDK 10.0
* Test run that deploys to https://www2.graphviz.org/Packages/experimental-development/windows/10/ can be seen [here](https://gitlab.com/graphviz/graphviz/-/pipelines/159672916). The Appveyor builds fail because Visual Studio 2019 is not supported there.
* When merged, the Appveyor builds will fail in master so want can't use them in parallel.
* Before merging I will prepare an update to the documentation

## Future enhancements deliberately not included
* Single source of truth for version numbering for autogen, CMake & MBuild (but !1440 provides this for CMake)
* Fix for https://gitlab.com/graphviz/graphviz/-/issues/1748
* Separation of Windows build and test jobs
* Windows Docker images with preinstalled prerequisites
  * Will speed up builds because no installations will be needed in the build jobs
  * Will remove the need for the git submodules containing dependencies","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1438","295817e55ebebb91be2262cca60868a69884247b","2020-06-24 00:01:04.873-04","2020-06-29T04:24:50.412Z","[]"
1956,2197,"fix GVPR incorrect interpretation of color strings","The logical operators here were pretty clearly meant to be `&&` not `||`. But
this kind of micro-optimization is unnecessary on modern machines anyway, so we
can just rewrite this into something that is more obvious for both readers and
the compiler.

It would have been nice to add a provoking test case for this as well, but it is
not clear to me how exactly to reach this path. This bug has been open for quite
a while, so it seems simpler to apply the obvious fix and move on.

Fixes #1956.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2197","ec384a3408022c4d5f35f19d0b540dbfb7b061dd","2021-09-30 00:01:49.68-04","2021-10-02T02:36:32.355Z","[]"
1794,1465,"WIP: Fixed uint_64_t type typo noted in 1613","(cherry picked from commit be51633a6409f9e49e31f8c7d024748480a01f67)
`uint64_t` is misspelled in a few cmake script templates. This is a minor issue mentioned in graphviz/graphviz#1613. It is marked as WIP because new compiler warnings are thrown which may indicate some declarations or casts are inadvertently changed. Needs review to ensure that fixing the typo isn't introducing additional issues","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1465","622c02c7e9eb66eee5e7b041df8dd44cb2feebe7","2020-07-13 00:00:35.324-04","","[]"
1843,1608,"Replace outdated getopt","The main goal of this MR is to replace the `windows/getopt` code in the repo with modern officially supported versions as outlined in https://gitlab.com/graphviz/graphviz/-/issues/1820. In addition to that it also makes minor improvements related to this and changes the behavior of most tools to show usage and fail when an unsupported option is given as described in given https://gitlab.com/graphviz/graphviz/-/issues/1843. The reason for not making this a separate MR was that I considered it an important step in the verification of the main goal.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1608","421c1fa2c01fe9255b47dd414a22099f9f082377","2020-10-07 00:02:49.357-04","2020-10-09T05:08:26.473Z","[]"
501,2474,"add a test case for #191","This test case passed as-is, so #191 was apparently fixed some time ago.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2474","15064dbe14980cd72ded328939f95401505da68e","2022-02-25 00:04:22.18-05","2022-02-26T07:05:15.271Z","[]"
1870,1691,"Check for empty strings in tp and hp.","This was a regression in !1527.

Fixes #1907","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1691","a941e5378586f1fc60f5b55c345cd27828b33634","2020-12-16 00:09:36.595-05","","[]"
14,2615,"escape infinite loop in some places","Symptom:
```
rtest/test_regression.py::test_1658
ERROR: Job failed: execution took longer than 1h0m0s seconds
```

I've encountered these infinite loops 
in functions [extractVChans](https://makelinux.gitlab.io/graphviz-doxygen/ortho_8c.html#a874e8b6d2b3f3a9ce03f830cee538523), [extractHChans](https://makelinux.gitlab.io/graphviz-doxygen/ortho_8c.html#a4a34beb995432437f4db5055c95ba840) and [markSmall](https://makelinux.gitlab.io/graphviz-doxygen/maze_8c.html#ae0e825b105a49f7622c4e1b9fb5d27f3)
after fixing floating point equality test problems !2594
during solving issue #14 of failed check function [chkSgraph](https://makelinux.gitlab.io/graphviz-doxygen/maze_8c.html#ad7bf36f6f4a659b62484b71648e45231).


I've added loop anticipation test with error message and loop termination. This tests check just for condition when the next pointer is the same the current. It doesn't check for multi-chain rings in linked lists.

**TODO:** Find origin of this loops.

These patches should be committed before the main fix !2594 to
avoid failed intermediate tests and be 'git bisect' friendly.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2615","0513e364ad57aef50dad3606d4159ea28516831e","2022-04-18 00:08:18.687-04","","[]"
1242,1582,"disambiguate #includes (3/5)","Following !1566, this is part 3 of the series towards #1242 and #1785.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1582","b686e0b523760508ec6821c83b84e67bf789fc12","2020-09-16 00:07:12.511-04","2020-09-22T15:13:15.953Z","[]"
1434,571,"Attributes for fdp features","![image](/uploads/d7e185b3ede203312b06fc23d6af3bad/image.png)","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/571","251e326e9e72b0caab4b0abd6306de2ba7134e21","2022-09-28 00:06:58.877-04","2022-10-01T00:25:21.481Z","[]"
2120,1309,"[macOS] Make GraphViz.app a self contained package","Changes over the graphviz GUI build to create a self contained application package that can be copied and installed on any Mac.","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/1309","d394abaaeb3700a09fa64e4a0cb44fa6b813038e","2019-03-18 00:04:34.098-04","","[]"
1830,1590,"switch to ustar POSIX format for tarballs produced by make dist","Without setting this option, Automake was defaulting to the “V7” format that
only supports filenames up to 99 characters. This was causing the following
(unnoticed) error during portable source generation:

```
  tardir=graphviz-2.44.2~dev.20200921.1021 && ${TAR-tar} chof - ""$tardir"" | eval GZIP= gzip --best -c >graphviz-2.44.2~dev.20200921.1021.tar.gz
  tar: graphviz-2.44.2~dev.20200921.1021/macosx/graphviz.xcodeproj/project.xcworkspace/contents.xcworkspacedata: file name is too long (max 99); not dumped
  tar: graphviz-2.44.2~dev.20200921.1021/macosx/graphviz.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist: file name is too long (max 99); not dumped
  tar: Exiting with failure status due to previous errors
```

In this commit, we switch to the newer “ustar” format that supports filenames
up to 256 characters. This format is still widely supported. From the Automake
documentation [0]:

>  tar-ustar selects the ustar format defined by POSIX 1003.1-1988. This format
>  is old enough to be portable: As of 2018, it is supported by the native tar
>  command on GNU, FreeBSD, NetBSD, OpenBSD, AIX, HP-UX, and Solaris, at least.
>  It fully supports empty directories. It can store file names with up to 256
>  characters, provided that the file name can be split at directory separator in
>  two parts, first of them being at most 155 bytes long. So, in most cases the
>  maximum file name length will be shorter than 256 characters.

Closes #1830.

  [0]: https://www.gnu.org/software/automake/manual/html_node/List-of-Automake-options.html","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1590","16d0c7eee99bf3b2ab603242620b0318d0224ddb","2020-09-24 00:06:51.248-04","2020-09-30T15:03:18.759Z","[]"
1826,1577,"Fix failure to create .pdf files with autotools","If neither ps2pdf nor pstopdf is present on the system, the build
fails even if the .pdf files exist. The reason is that the .ps
files are created on the fly, and they are more recent than the
distributed .pdf. Makefile then runs ""false <something>"", which
obviously fails.

Setting PS2PDF to ""true"" is not a solution because we do not
want to ignore when the .pdf file are really absent.

This patch makes running $(PS2PDF) conditional, but still
imposes the .pdf files to be generated when running ""make dist"".

Fixes #1763","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1577","b7be7c0913d27d483e1dc490b5ade301dc95730e","2020-09-15 00:01:46.742-04","2020-09-22T00:03:32.868Z","[]"
1339,1846,"Fix for TBbalance attribute code","As described in #1339 TBbalance is an undocumented graph attribute that is
supposed to cause nodes to ""rise"" or ""fall"" to the minimum or maximum rank
possible.  The attached code snippet seems to repair the bug in this code.

Comment from Matthew Fernandez: I committed this, but I don’t understand enough
about the context to judge its correctness. The above is Steve’s description of
the situation.

Fixes #1339 and #1980.

CC @steveroush","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1846","e511e26c6ffaed28d476532928073f6f111d89f9","2021-03-18 00:04:02.309-04","2021-03-29T01:13:28.038Z","[]"
1861,1626,"attrs.html: clean ID and NAMEs","- Convert NAMEs to IDs, as recommended for non-form elements.
https://stackoverflow.com/a/7470325/171898
- Quote HREFs and IDs
- Remove some A tags that only had a NAME. These were confusing the styling: looked like links but weren't clickable. I merged their NAMES into the ID of the enclosing element.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1626","9e325cfe40f7fdac2979e6d00d784e46fff3e0cb","2020-10-21 00:00:49.986-04","2020-10-21T11:02:04.846Z","[]"
1967,1823,"Fix single-line color generation","Looks like awk has actually added a `-s` flag in the last ten years, breaking this code! Amazing.

Fixes https://gitlab.com/graphviz/graphviz/-/issues/1967","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1823","87bde4dae072f74cd92c7783a54fda1287183e05","2021-03-02 00:09:37.319-05","2021-03-02T09:44:38.929Z","[]"
121,2724,"fix 'merge_chain' assertion failure","When calling `merge_chain` from `interclexp`, this code apparently did not
anticipate that both the condition `ND_rank(agtail(e)) == ND_rank(aghead(e))`
and `ED_to_virt(prev) != NULL` could be true at once. In this case, the merge
can happen but the `.to_virt` member of `e` needs to be overwritten; it is not
`NULL` on entry to `merge_chain`.

This issue appears to have existed since the first revision of Graphviz.

Gitlab: fixes #121","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2724","0a3d24345af0b28f0c84b04d90e20df7e0003073","2022-06-21 00:05:13.77-04","2022-06-26T22:32:01.105Z","[]"
1845,1605,"Don't close output file after writing first graph","Fixes #1845, essentially by reverting 806b8a2f","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1605","8bedfb6eb45f75f22c0887adaa3d2e648247bff7","2020-10-05 00:03:31.262-04","2020-10-09T14:59:14.275Z","[]"
1990,2672,"final fix of four 🪲🪲🪲🪲 ortho bugs 🎉","Root cause of bugs were floating point comparison and precision issues.

Fixes #14, #1408, #1658 and #1990

Please read patch descriptions for details.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2672","d3248f7b8e965af98f4a3e1e47da716e41db2ff9","2022-05-16 00:02:41.946-04","2022-06-11T19:23:14.229Z","[]"
1836,2562,"CMake: enable Lasi plugin","#1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2562","dbb953a58dd200ae9679b280224d02dbbb9177bb","2022-04-05 00:04:23.904-04","2022-04-11T00:58:09.520Z","[]"
1242,1594,"disambiguate #includes (5/5)","Following !1588, this is the final part of the series closing #1242 and #1785.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1594","c85507b001b4ff8eb87db7377e7364cf69c7628d","2020-09-29 00:07:22.697-04","2020-10-05T15:01:11.940Z","[]"
1786,2435,"add a test case for #1786","I have some further changes on top of this that actually partially resolve #1786. But it turns out this exposes a number of other issues:
* Both the Debian and Homebrew ecosystems ship a libgd without `gdlib-config` or `pkg-config` support. So we have to guess and/or hard code feature detection. Not sure how to do this robustly when, e.g. Homebrew configures a seemingly arbitrary set of GD features: https://github.com/Homebrew/homebrew-core/blob/e0fb8f439b5e3dfd4739fbc740e01d1f28e2c3c7/Formula/gd.rb#L42-L47
* Our use of `$OS_ID` seems subtly broken (patch coming up...).
* The ASan-instrumented `ctest` suite starts failing due to memory leaks inside fontconfig. Not sure if we should disable leak detection to get around this or something else.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2435","889b893d63c3a18f27667307ac8530333d60593b","2022-02-09 00:02:25.1-05","2022-02-12T21:10:08.988Z","[]"
146,2717,"fix: in SVG output, set opacity 0 for text with 0 alpha value","Fixes #146","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2717","6aae494cbbf77b24d577e74c507912de97737886","2022-06-17 00:03:09.943-04","2022-06-22T03:03:08.764Z","[]"
1543,1374,"fix memory leak from loading config text into plugin list","This fixes #1543, which is reproducible on commit ea59e9e6d8dbaf3fc52a4c12102c048f9b6a9985:

```
=================================================================
==21346==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 4064 byte(s) in 1 object(s) allocated from:
    #0 0x7fad242f5330 in __interceptor_malloc (/lib/x86_64-linux-gnu/libasan.so.5+0xe9330)
    #1 0x7fad2404fc02 in gmalloc /home/matthew/graphviz-1543/lib/common/memory.c:47
    #2 0x7fad2400cdaf in gvconfig /home/matthew/graphviz-1543/lib/gvc/gvconfig.c:542
    #3 0x7fad24012e6d in gvContext /home/matthew/graphviz-1543/lib/gvc/gvc.c:32
    #4 0x5609d3084171 in main (/home/matthew/graphviz-1543/a.out+0x1171)
    #5 0x7fad23de309a in __libc_start_main ../csu/libc-start.c:308

SUMMARY: AddressSanitizer: 4064 byte(s) leaked in 1 allocation(s).
```

Following these changes, the backing memory for the plugin's `typestr` is allocated independently so we no longer need to worry about a malloced pointer that is retained internally.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1374","0222351d7658307b3cf7bdcd047cf12188d1ddda","2020-05-30 00:09:52.552-04","2020-06-06T00:58:36.960Z","[]"
2204,2576,"GTK plugin, tclpkg, prune: more #2204 progress","Gitlab: #2204","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2576","2d762adfdff2dbee1b107f7a13f81a2e6c6bcce7","2022-04-09 00:00:19.031-04","2022-04-10T20:40:51.111Z","[]"
2280,2856,"Stop using now-hidden gs_error_names symbol","GhostScript hid their gs_error_names symbol as part of a global by-default hiding of non-API symbols.

It will probably take a while for GhostScript to get a public API for these symbols back into a release, so let's stop using the symbol for now, until then.

Fixes #2280","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2856","fd723a0a1ae91e658b9e9c65aff065f4dd1bc4dd","2022-09-26 00:05:07.968-04","2022-09-27T08:39:44.475Z","[]"
1793,2604,"bcomps: replace inline stack implementation with generic API","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2604","41bd5b27a2525fec0f1850f7631baa9d17d33686","2022-04-16 00:09:22.968-04","2022-04-17T16:03:22.562Z","[]"
1464,1574,"fix some Coverity warnings","This patch series attends to the low hanging fruit of #1464.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1574","3178647a95d4095a03d679e0c2a8bdb8c6ed62f9","2020-09-13 00:02:31.587-04","2020-09-19T17:00:56.031Z","[]"
2147,2279,"consolidate release artifacts, reducing count to below 50","This commit series combines and reduces deployment artifacts, reducing the number of Graphviz release files from 340 to 46. Reduction to below 50 became necessary when it was discovered that all Gitlab release pages truncate the viewable files to 100 and the release manifest truncates the contained files to 50.

This contains some changes that may not be ideal, but I think we don't have much of a choice. Gitlab's generic packaging infrastructure simply does not seem designed for software releases composed of 100+ files.

IMHO this reduction is a good idea anyway. Graphviz releases are unmanageably large. The release artifacts included e.g. 54 RPMs just for Fedora 33. I suspect almost nobody is using any of the release artifacts except the Windows files and the source tarball. Both major package managers on macOS (Homebrew and Macports) actively track and package new Graphviz releases. The Linux packages, across the board, are almost unusable as-is because they do not declare dependencies so you have to force-install all of them or play a guessing game of which depend on which. For Linux users, it is much more straightforward to build Graphviz from source.

After this reduction, we should probably further tweak deploy.py to fail if it encounters more than 50 files for upload, as a safe guard against exceeding this limit in future.

Closes #2147.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2279","0b31ec29078ecee5b868b42453478f1dd8239d54","2021-11-12 00:01:36.258-05","2021-11-14T17:52:00.390Z","[]"
1784,1483,"Drive all tests from pytest","Resolves https://gitlab.com/graphviz/graphviz/-/issues/1772

* Uses `python3 -m pytest --junitxml=report.xml tests rtest` to drive all tests on all platforms.
* Use of `ctest` has been removed, but all existing `CMake` test code is left untouched (but is not complete and no longer regression tested).
* Tests that currently do not run on some platforms/build variants are skipped in the test case itself with a specified `reason` including a bug reference. Also `FIXME` comments explains this.
* The `CMake` `Debug` builds now also produces an `.exe` installer like the `Release` builds and testing has been enabled for them.

This means that new pytest tests added under `tests` or `rtest` will automatically run in CI on all platforms. While this is highly desirable, it may pose problems for developers without access to certain platforms. In this case one solution can be to add skipping of the test for a specific platform and file an issue about it.

While this MR is complete with respect to the `master` that it is based on, it should be rebased on the current master before merge and adaption of newly introduced tests may be necessary to be able to run them on all platforms. Hence the WIP.

Known new tests that have been introduced or will be introduced in master and may need adaption:

* ~~https://gitlab.com/graphviz/graphviz/-/merge_requests/1472~~ (reverted from master after merge and replaced by https://gitlab.com/graphviz/graphviz/-/merge_requests/1484)
* ~~https://gitlab.com/graphviz/graphviz/-/merge_requests/1460~~ (incorporated and adapted)
* ~~https://gitlab.com/graphviz/graphviz/-/merge_requests/1484~~ (incorporated and adapted)","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1483","e706cea6e53bc8f0eef81d577a8dd7c242b6fc32","2020-07-28 00:06:23.699-04","2020-07-31T22:34:23.071Z","[]"
456,1847,"profile target generator","I was mulling over how to deal with issues like #456 and #1652. One of the obstacles is that we can only ever get a partial profile of the workload because it cannot run to completion. So I wondered... could we figure out the interesting characteristics of the graph(s) and generate a smaller, but representative version?

This MR contains a script that repeatedly runs Graphviz and uses a bisect-like process to zero in on a graph that meets your profiling criteria. I just used it right now to get an appropriately sized graph that uses ≥100MB. The idea here is to, instead of finding an “expensive” test case, use a generator of expensive test cases that can understand and tune to your local environment.

Disclaimer: this script has barely been tested and likely contains bugs. But I'm proposing we use it to profile and see if it's worthwhile enough to keep around.

This is a pretty weird idea born out of my compiler-brain thinking, so let me know what you think.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1847","9f2c27bf395b24d7eab21d48f5172fd81414f3af","2021-03-18 00:03:06.522-04","2021-03-29T03:08:36.065Z","[]"
1873,1884,"replace a use of sfstropen with malloc+vsnprintf","This is another step towards removing uses of sfstropen in the code base.
Related to #1873.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1884","c53bab7c20c0b38cb4104ab9ed02802aa70285ce","2021-04-03 00:00:31.233-04","2021-04-10T03:00:53.903Z","[]"
517,2016,"work towards solution for round tripping GV→GXL→GV","This series starts addressing #517. It solves the GV→GXL part, but not the remaining GXL→GV part.

@truenorth et al, can I get some guidance on this? I have the below sort-of obviously-wrong outstanding changes in my working directory. They lead to the interesting but useless outcome on the #517 example of a label of `""<<TABLE><TR><TD>(</TD><TD>A</TD><TD>)</TD></TR></TABLE>>""`. I.e. the `gxl2gv` code correctly recognizes an HTML string, but the result is still `""` wrapped.

The (my) core problem here is that `gxl2gv` is constructing the Dot graph programmatically rather than as text. This is a good thing. But it calls `agxset` to add attributes. AFAICT this function assumes the attribute it is adding is a non-HTML string. There appears to be no equivalent to add an HTML string. Unpacking that a little… `agxset` unconditionally calls `agstrdup`, while in this case I want to call `agstrdup_html`.

Does this make sense and is my summary correct? If so, can you suggest a way around this?

```diff
diff --git cmd/tools/gxl2gv.c cmd/tools/gxl2gv.c
index f65e63fe7..573daaa8e 100644
--- cmd/tools/gxl2gv.c
+++ cmd/tools/gxl2gv.c
@@ -11,6 +11,7 @@

 #include    ""convert.h""
 #include    <cgraph/agxbuf.h>
+#include    <cgraph/sprint.h>
 #ifdef HAVE_EXPAT
 #include    <expat.h>
 #include    <ctype.h>
@@ -38,6 +39,7 @@
 #define        TAG_GRAPH       0
 #define TAG_NODE       1
 #define TAG_EDGE       2
+#define TAG_HTML_STRING 3

 typedef struct slist slist;
 struct slist {
@@ -535,6 +537,8 @@ startElementHandler(void *userData, const char *name, const char **atts)
                ud->globalAttrType = TAG_EDGE;
            else if (strcmp(""graph"", atts[pos]) == 0)
                ud->globalAttrType = TAG_GRAPH;
+           else if (strcmp(""HTML string"", atts[pos]) == 0)
+               ud->globalAttrType = TAG_HTML_STRING;
        } else {
            ud->globalAttrType = TAG_NONE;
        }
@@ -636,6 +640,12 @@ static void endElementHandler(void *userData, const char *name)
        case TAG_GRAPH:
            setGraphAttr(G, name, value, ud);
            break;
+       case TAG_HTML_STRING: {
+           char *angle_wrapped = gv_sprint_or_exit(""<%s>"", value);
+           setAttr(name, angle_wrapped, ud);
+           free(angle_wrapped);
+           break;
+       }
        }
        free(dynbuf);
        ud->globalAttrType = TAG_NONE;
```","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2016","8ecb99749c242689b9ba63e3a5522a2d3ce42c46","2021-06-24 00:02:36.131-04","2021-07-06T00:15:27.332Z","[]"
2283,564,"Add more info to beautify","Reference https://gitlab.com/graphviz/graphviz/-/issues/2283","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/564","e7b6a4d2f2b439543b12702cfe15649d523f177b","2022-09-27 00:04:50.99-04","2022-09-27T10:07:21.017Z","[]"
1868,2255,"smyrna: replace duplicated 'xml_string' with 'xml_escape'","This completes the long journey of unifying four XML escaping routines into one.

Closes #1868.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2255","e0221c08383d5615d67195d8a5c3050978edc050","2021-10-30 00:01:32.65-04","2021-11-06T17:32:43.512Z","[]"
1276,2189,"gv2gml: fix attribute escaping","Fixes #1276.

The path to this was surprisingly long and winding, so this commit series may contain some surprises.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2189","7d607090a00e03d6809d61755dbbe39a003b875c","2021-09-25 00:06:01.734-04","2021-10-01T15:50:10.878Z","[]"
2215,2521,"test case for #2215","Though this passes in CI, so we'll still need someone to actually repro #2215 locally.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2521","68d75719cd94598dc37306a6444672fdea8ebd58","2022-03-19 00:08:17.411-04","2022-03-26T01:40:28.736Z","[]"
1777,1444,"WIP: Documentation enhancement; related to #1750","This MR reorganizes how man pages are installed, installs general guide PDFs on all platforms, only installs man pages on non-Windows systems, and installs PDF versions of the man pages only on Windows systems. More detail is provided in #1750. This has been tested with ZIP archives on both Linux Mint (Ubuntu-ish) and Windows 8.1. It should only touch man pages and PDFs and not affect code.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1444","a166a417a707b9f5e0516d6d645c47ba89879b37","2020-06-26 00:09:19.232-04","","[]"
1044,2134,"Add static build for Ubuntu 21.04 to CI","I need some advice on this.

As you can see, the new job builds fine but fails during install because it tries to install non-existent shared object libraries. It fails and stops at the Ruby language bindings but I suspect it would fail on the others as well if it continued. 


I don't know anything about the language bindings. Should I try to install the static libraries instead or just avoid installing the shared ones?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2134","bcce2d83e14f800f7f5c4388f6fb988d3b873eec","2021-09-01 00:02:59.575-04","2021-09-08T20:16:25.289Z","[]"
1898,1687,"Trivial fixes","These two small fixes were originally written against 2.38.0, but still apply and may be relevant in some environments (depending on architecture and compiler settings).","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1687","dc27deaaea77019eb174da99008755f72cb7663b","2020-12-02 00:01:21.933-05","2020-12-10T04:57:01.296Z","[]"
1998,2098,"more sfio removal, some Smyrna clean up","Related to #1998.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2098","7c1d4a3482fa3bb188debe61a661215a7ce407cd","2021-08-14 00:08:23.663-04","2021-08-19T04:31:29.977Z","[]"
1990,2577,"Draft: ortho: refactor checks","_Disclaimer: I don't know semantics of `np->cells`. If you know, pleae enlighten me. Or better add [doxygen] comments into the source._

I found that asserts in chkSgraph very likely are false negative
and redundant. Graphs, which trigger these asserts, after removing
asserts produce valid output. So I removed these asserts.

To preserve checks I've moved them from chkSgraph into
debug function emitSearchGraph.
Additionally I've made emitSearchGraph tolerant to absent cells.

Example of using `emitSearchGraph` with checks:

`dot rtest/14.dot -G'odb=s'`

Finally I've removed empty body and usage of function chkSgraph.

Fixes #14, #1408, #1447","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2577","1a4a2f39a40c90154048f13869b21073e4aeabb6","2022-04-09 00:03:17.307-04","","[]"
191,2474,"add a test case for #191","This test case passed as-is, so #191 was apparently fixed some time ago.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2474","15064dbe14980cd72ded328939f95401505da68e","2022-02-25 00:04:22.18-05","2022-02-26T07:05:15.271Z","[]"
19,1760,"fix multiple definitions of CDT variables under MinGW on Windows","Building with MinGW on Windows resulted in lots of build errors of the form:

  …/x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):
    dtdisc.c:(.bss+0x0): multiple definition of `Dtset';
    CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first
    defined here

The problem is that this environment defines `_WIN32`, so it sees the `__declspec`
alternatives for `CDT_API` in cdt.h. This is fine as GCC understands `__declspec`,
but it results in variable declarations in this header then missing the `extern`
qualifier. GCC’s semantics, in contrast to MSVC, interpret this as a definition
rather than a declaration.

The solution here is to *always* apply `extern` to these declarations, as MSVC is
happy with this as well. This is only addressing the immediate cause, and not
the longer term issue that `__declspec(dllexport)` and `__declspec(dllimport)` in a
Windows build should really be mapped to `__attribute__((visibility(""default"")))`
and `__attribute__((visibility(""hidden"")))` in a non-Windows build, not to `extern`.

Fixes #1940. Thanks to @Synoecium and @swaldhoer for guidance on this fix.

----

@synoecium, @swaldhoer, do you have a chance to review/test this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1760","88ca57327b090c4b0003f07e3bd243c95d7c95a4","2021-02-15 00:04:45.622-05","2021-04-24T16:27:24.371Z","[]"
2096,2036,"Fix ODR violation in lib/ortho","Fixes https://gitlab.com/graphviz/graphviz/-/issues/2096.

Spawned of from https://gitlab.com/graphviz/graphviz/-/merge_requests/2033 after discussions in https://gitlab.com/graphviz/graphviz/-/merge_requests/2033#note_619081872. I haven't dealt with the feedback that I've already gotten on https://gitlab.com/graphviz/graphviz/-/merge_requests/2033, hence this MR is WIP.

Another reason for the WIP is that this MR contains the commits from https://gitlab.com/graphviz/graphviz/-/merge_requests/2035 and should be rebased on the new master when that MR has been merged.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2036","f65f739bf23aa4f491a38631cc8dd5a22251345e","2021-07-06 00:02:52.033-04","2021-07-14T10:05:25.207Z","[]"
1943,1752,"Remove my hacky comment that forced CI builds of Dockerfiles","Cleanup for #1943","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1752","fadd32cd23bd44ca72097dcb277470f8cde42fab","2021-02-14 00:09:15.811-05","2021-02-14T05:39:30.721Z","[]"
2118,2211,"remove generation of ps.h and commit generated output instead","The generation of ps.h from ps.txt was trivial and ps.txt was no easier to edit
or update than the resulting generated header. Removing it and using a static
source instead accelerates all three builds, increases portability and moves
towards dropping the dependency on Awk.

Related to #2118.

----

@magjac seems I was accidentally working on this at the same time you were doing !2210. They go in somewhat conflicting directions. Let me know what you think. I'll let you have the deciding vote on which way we should go.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2211","96136309542ef71101600335147fcd19253a5fde","2021-10-09 00:08:37.701-04","2021-10-10T20:17:12.700Z","[]"
1886,1726,"remove Python 2 pytest installation in CI","We only support running the test suite with Python 3. Closes #1886.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1726","e8b3523ec6b264dc9a87bdf88d8fe8cde40216c7","2021-02-02 00:04:35.939-05","2021-02-13T19:36:38.978Z","[]"
1864,3045,"CMake: enable LTO in release mode","Link-Time Optimization (LTO) is a mechanism that enables the compiler to
optimize across translation unit boundaries. In particular, it enables
cross-file function inlining. This is present and mature in the majority of
contemporary compilers and switching it on has few downsides.

Some performance numbers:

```
  ┌───────┬──────────────────┬──────────────────┬──────┐
  │       │ before           │ after            │ diff │
  ╞═══════╪══════════════════╪══════════════════╪══════╡
  │ 1652¹ │ 17.88s           │ 17.85s           │  -0% │
  │       │ 50.4MB peak RSS  │ 50.5MB peak RSS  │  +0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 1718² │ 2m21s            │ 2m13s            │  -6% │
  │       │ 15.8MB peak RSS  │ 15.9 MB peak RSS │  +1% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 1864³ │ 13.26s           │ 13.07s           │  -1% │
  │       │ 462.0MB peak RSS │ 461.8MB peak RSS │  -0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 2064⁴ │ 11m42s           │ 11m30s           │  -2% │
  │       │ 1.26GB peak RSS  │ 1.26GB peak RSS  │  -0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 2095⁵ │ 2m18s            │ 2m19s            │  +1% │
  │       │ 92.3MB peak RSS  │ 92.1MB peak RSS  │  -0% │
  └───────┴──────────────────┴──────────────────┴──────┘
```

¹ The test case from https://gitlab.com/graphviz/graphviz/-/issues/1652 run as
  `neato -Tsvg -o /dev/null 1652.dot`.
² swedish-flat.dot Magnus attached to
  https://gitlab.com/graphviz/graphviz/-/issues/1718 run as
  `circo -Tsvg -o /dev/null swedish-flag.dot`.
³ The test case from https://gitlab.com/graphviz/graphviz/-/issues/1864 run as
  `twopi -Tsvg -o /dev/null 1864.dot`.
⁴ The test case from https://gitlab.com/graphviz/graphviz/-/issues/2064 run as
  `dot -Gnslimit=2 -Gnslimit1=2 -Gmaxiter=5000 -Tsvg -o /dev/null 2064.dot`.
⁵ The tests/2095.dot test case from prior to minimization
  (3819821ea70fae730dd224936628ed3929b03531). Run as
  `dot -Tsvg -o /dev/null 2095.dot`.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3045","11c2897cc52385aa0bb03b022088a875814488b3","2023-01-08 00:06:13.804-05","2023-01-09T15:43:48.633Z","[]"
2300,2913,"cgraph: compiler warning squashing","Some minor improvements I made while investigating #2300.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2913","a348ed6de2975b1751542534bb59224947c63b86","2022-10-16 00:07:34.93-04","2022-10-19T15:45:04.697Z","[]"
1800,1527,"use a dynamic buffer in strdup_and_subst_obj0","As discussed on !1509, this rewrites some manual calculation and allocation code to use a dynamically expanding buffer. This simplifies the code and makes it more robust against bugs like that fixed in fbefeb31989130c48b965cc9a2f0ad0cac07015c.

I'll merge on 2020-08-21 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1527","31bab037c9bfde3bd18e06b5ab878c09de265ccf","2020-08-15 00:06:35.924-04","2020-08-21T14:34:54.075Z","[]"
1836,2558,"CMake: add Glitz plugin","Gitlab: #1836 

The Glitz plugin is disabled in CI as it's described as ""incomplete"" but still this gets us one step closer to deleting the Autotools build system.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2558","b5dcdfae42ecf8982a51333528ecdc8b20a148a3","2022-04-03 00:04:32.698-04","2022-04-08T01:41:57.926Z","[]"
2106,2060,"remove vmresize","While doing some recent work in lib/expr, I realized all calls to `vmresize` are degenerate, either passing in `NULL` or discarding the content of the returned memory. So it is actually unnecessary, and in fact inefficient.

This series removes `vmresize` and redirects previous callers to `vmalloc` as well as some surrounding clean up.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2060","9d6062a268c741e2ad8b9648992d8903fe2c0e6e","2021-07-19 00:01:23.672-04","2021-07-29T19:59:19.707Z","[]"
1945,1749,"Attempt fixing CentOS8 Dockerfile","Apparently this is now powertools, lowercase:

https://serverfault.com/questions/997896/how-to-enable-powertools-repository-in-centos-8

Towards #1945","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1749","a83811d9625077756d4af460271a72d65a8983b6","2021-02-14 00:05:55.909-05","2021-02-14T04:36:10.885Z","[]"
2195,2457,"[nfc] remove 'NOTUSED' and propagate its definition everywhere","Gitlab: closes #2195","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2457","1780e0eace5a83e7f5a79c2213a0c8b701696564","2022-02-19 00:08:07.611-05","2022-02-20T23:26:15.549Z","[]"
1913,1694,"some clean up of the HTML lexer","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1694","88b824d0bea5b669be910e06af027d5f0f05c5bc","2020-12-26 00:08:08.735-05","","[]"
1929,1716,"fix: add header guard to graphviz_version.h","To prevent users #including this multiple times getting compiler warnings.
Closes #1929.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1716","2ab2b1c2cdfb8952fc3e009a01f7b228bcca1e47","2021-01-27 00:03:23.67-05","2021-02-03T01:32:51.074Z","[]"
2260,2746,"add agrec_repr for debugging:","I found some inconsistency of using cyclically linked list of records `Agrec_t`, `AGDATA`, `agbindrec` and macros `GD_`\*/`ND_`\*/`ED_`*. It is unpractical debug it with `gdb`. It requires proper logging. Provided function `recstr` solves the problem.
It helped me a lot, for example for during !2529.

see the patches for details","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/2746","e1763bd4e313453ba21ed318e1b2d07b172335b8","2022-07-07 00:09:54.438-04","","[]"
1573,1438,"Windows builds in the Gitlab CI/CD pipeline","* Adds the same builds as we currently have on Appveyor to the GitLab CI/CD pipeline
* When merged, will deploy binaries to https://www2.graphviz.org/Packages/development/windows/10/
* Includes an upgrade from Visual Studio 2015, Windows SDK 8.1 to Visual Studio 2019, Windows SDK 10.0
* Test run that deploys to https://www2.graphviz.org/Packages/experimental-development/windows/10/ can be seen [here](https://gitlab.com/graphviz/graphviz/-/pipelines/159672916). The Appveyor builds fail because Visual Studio 2019 is not supported there.
* When merged, the Appveyor builds will fail in master so want can't use them in parallel.
* Before merging I will prepare an update to the documentation

## Future enhancements deliberately not included
* Single source of truth for version numbering for autogen, CMake & MBuild (but !1440 provides this for CMake)
* Fix for https://gitlab.com/graphviz/graphviz/-/issues/1748
* Separation of Windows build and test jobs
* Windows Docker images with preinstalled prerequisites
  * Will speed up builds because no installations will be needed in the build jobs
  * Will remove the need for the git submodules containing dependencies","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1438","295817e55ebebb91be2262cca60868a69884247b","2020-06-24 00:01:04.873-04","2020-06-29T04:24:50.412Z","[]"
1242,1453,"remove legacy malloc.h stub","This partially deals with #1242. Here we remove malloc.h that is no longer required because Bison does not include malloc.h in the configuration Graphviz runs it in.

I'll merge on 2020-07-09 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1453","59bf93da69561600015ee3f2b747691d52228188","2020-07-03 00:00:10.51-04","2020-07-10T00:46:54.749Z","[]"
1793,2612,"gvgen: replace inline stack with generation implementation","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation. This also introduces some missing allocation failure checks.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2612","b6cf43afcdb74584894bc8f2d625a95457ce0657","2022-04-17 00:01:19.329-04","2022-04-19T05:24:24.681Z","[]"
1865,1658,"fix buffer under-read in fdp","When using fdp to process a graph, it would try to canonicalize all node names,
    regardless of whether they were hosted in refstr_ts or not. The problem with
    this is that the canonicalization logic assumes the character pointer passed
    into it is within a refstr_t and that therefore it can do pointer subtraction to
    get a pointer to the refstr_t itself. This was not true for internally
    constructed node names like ""%4"".

We change this to always go through the refstr logic in agstrdup() when
    canonicalizing names. This ensures that the pointer we pass into the
    canonicalization logic *is* within a refstr_t. This is based on canon() in
    lib/cgraph/output.c. Fixes #1865.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1658","6a20abe53f55531a0a3f71b1367dfac50e89c5dc","2020-11-01 00:00:35.373-04","2020-11-07T04:10:32.503Z","[]"
689,1861,"remove remaining references to the DIA format","Core support for this was removed in 2009. A partial plugin for this was written
but never matured. This was removed in 5243eaac9cbe134fc7935a8c029860632e19d523.
This change removes the final dangling references to DIA. Fixes #689.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1861","8b66d1e8849d1d9dc061e6f608bb01c008319596","2021-03-21 00:01:01.799-04","2021-03-28T21:00:50.580Z","[]"
1773,1512,"Use preinstalled grep instead of installing it in CI","Final step that fixes
https://gitlab.com/graphviz/graphviz/-/issues/1759.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1512","3e93b0a9a10398e383840f0e84470d2d3193e3ff","2020-08-10 00:00:27.91-04","2020-08-10T07:42:21.055Z","[]"
2262,2758,"add missing -I flags to point to perl files","This applies a patch NetBSD has been carrying downstream for some time.

Gitlab: fixes #2262, #1576

Reported-by: Michael Bäuerle <micha@NetBSD.org>","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2758","d55d524a131ad550bb353b5d5df4b66b1a1c3cbd","2022-07-14 00:06:35.642-04","2022-07-19T01:57:11.474Z","[]"
1288,1283,"Prevent exponential growth of length of edges in clusters","`edgelabel_ranks` gets called for the root graph and all of its cluster
subgraphs. It should only double `ED_minlen` for each edge once. Reverting the
test for labeled edges to check only the active graph, rather than its root,
prevents it from expanding the `minlen` once for every level of cluster
containing the edge.

Fixes #1246","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1283","b3e8099771ee752c791d861e2f936beba1cb5a14","2018-03-23 00:08:48.85-04","2018-05-04T22:05:08.774Z","[]"
2105,2062,"replace mkdefs-generated gdefs.h with X macros","Prior to this commit, the gdefs.h header was generated by a C program, mkdefs.c.
There were a number of issues with this approach:

  1. The CMake build system was assuming the compiler to build mkdefs.c and the
     compiler to build Graphviz itself were the same. This is not necessarily
     true when cross-compiling.

  2. Generation under MSBuild seems to have been impractical, so the generated
     header was checked in to the repository under windows/include/gvpr/gdefs.h,
     somewhat defeating the purpose of making it generated.

  3. The CMake build system seems to not have been setup to correctly compile
     mkdefs.c under all circumstances (see #2101).

This change removes any reliance on a host C compiler and instead uses a series
of X macros¹ to achieve the same effect. The values of all generated constants
and the content of generated structures is intended to be unchanged, though some
#defines have been altered to enums. In these cases, there was no advantage to
using a macro and multiple advantages to not using a macro.

This change is affecting a shipped header (gdefs.h) and also removes it from the
list of shipped headers. Installing it appears to have been a mistake as there
is no easy way for end users to use it. The header, fully expanded, still relies
on further expansion of macros that are only defined in expr.h, a header that is
not shipped.

Closes #2101.

¹ https://en.wikipedia.org/wiki/X_Macro

----

This still needs a little work as it generates new warnings on one of the Windows builds, but it's mostly final.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2062","288075e2ffd94f1670e03ccb7a8c68e373f31d0c","2021-07-21 00:05:30.113-04","2021-07-27T00:58:05.542Z","[]"
1851,1629,"Fix tool usage on macOS and add macOS test jobs to gitlab CI","Fixes the -? option for all tools on macOS (#1852) and adds macOS test jobs to CI (#1827).","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1629","7a6da52abca39ce3e689291c458f75d23d658b7b","2020-10-21 00:02:29.662-04","2020-10-24T06:05:42.597Z","[]"
2051,2311,"de-dupe fig_string, mp_string, pic_string","Closes #2051.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2311","677ecaf70da1336f37b80d679e3805a70d7b184b","2021-11-27 00:05:33.973-05","2021-12-04T07:11:38.210Z","[]"
1950,3050,"sprintf migration and compiler waring squashing","Gitlab: #1950","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3050","0b88df29e23c73e21f34f9c0e0cc62751154b1c0","2023-01-15 00:06:32.347-05","2023-01-15T18:41:40.259Z","[]"
1339,567,"Add docs for TBbalance","Empirically this seems to work only on dot layout, and that makes sense I guess, as `rank` only works on dot.

Shoutout to the merge-request description in https://gitlab.com/graphviz/graphviz/-/merge_requests/1846, very helpful for figuring out what this does.

Towards #75","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/567","b838ec80cec9bb827dfd6a3dd253317c7e34615e","2022-09-27 00:04:40.062-04","2022-09-27T11:07:25.207Z","[]"
1950,3114,"progress on sprintf removal","More incremental progress on #1950.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3114","bac3bbda07ab1f543007956c201320fa6c5d568f","2023-03-16 00:04:25.612-04","2023-03-18T16:27:28.145Z","[]"
1785,1488,"make sfio #includes unambiguous","This MR contains a baby step towards #1785 and #1242. Posted to get some CI and code review of the direction before proceeding to modify the rest of the libs the same way.

The Graphviz tree currently contains libraries with the following structure:

```sh
lib/foo/Makefile.am      # sets `AM_CPPFLAGS = -I$(top_srcdir)/lib/foo`
lib/foo/a.h
lib/foo/b.h              # contains `#include ""a.h""`
lib/foo/c.c              # contains `#include ""b.h""`
```

This MR alters lib/sfio to have something more like the following:

```sh
lib/foo/Makefile.am      # sets `AM_CPPFLAGS = -I$(top_srcdir)/lib`
lib/foo/a.h
lib/foo/b.h              # contains `#include ""a.h""`
lib/foo/c.c              # contains `#include <foo/b.h>`
```

The eventual end state I'm aiming for in the future is:

```sh
lib/foo/Makefile.am      # sets `AM_CPPFLAGS = -I$(top_srcdir)/lib`
lib/foo/a.h
lib/foo/b.h              # contains `#include <foo/a.h>`
lib/foo/c.c              # contains `#include <foo/b.h>`
```

As discussed in #1785, the overall motivation here is for includes to be unambiguous and avoid colliding with system headers.

This MR also includes incidental clean up of spurious lib/sfio dependencies of lib/ast and lib/vmalloc.

I'll merge on 2020-08-06 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1488","4cef316f2db6338a9c5b1b1782e135f7b98e393b","2020-08-01 00:05:07.601-04","2020-08-06T14:16:41.330Z","[]"
1783,1493,"fix segfault with large edge weights","When passed a large edge weight, e.g. 1073741824, an integer overflow would
occur when calculating virtual weights. This would go on to cause a segfault as
calculations were increasingly thrown off by negative values.

This change detects when an overflow will occur and exits. Calling exit() from
within a deeply nested library function like this is not good practice, but we
don't have a better alternative right now. The call chain involves gvLayout()
whose interface to the plugins inherently has no way of reporting failure.

Fixes #1783.

I'll merge on 2020-08-08 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1493","2039ffa5b2b7464a85ff826e99c16bea0596f6fa","2020-08-02 00:05:02.299-04","2020-08-09T16:52:44.616Z","[]"
2058,2175,"Some autotools linking cleanup","This commit series is the first step towards adding Cygwin and MinGW autotools build jobs in CI, including a few minor step towards #2058.

I will follow up this MR with a few more to actually add the CI jobs, but I spawned off this MR to ease the review. It contains fairly general improvements. I hope it makes sense also in isolation.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2175","1376c1a25dab9ff1e2a5264793e9f2a5d6270120","2021-09-19 00:00:40.109-04","2021-09-19T21:57:02.177Z","[]"
452,3079,"dotgen: remove limit on number of 'samehead', 'sametail' attributes","There was a per-node limit of 5 unique `samehead`/`sametail` attributes. This
was arbitrary and seems to have been introduced to allow stack-allocating data
structures. By moving to a dynamic list for the `same_t` working data, this
limit can be removed entirely.

Gitlab: closes #452<br/>
Reported-by: tamar_a_roulettes","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3079","2c2f7904fe93137009af1ab36874eed96c077ad6","2023-02-01 00:06:02.058-05","2023-02-14T11:29:58.098Z","[]"
1836,2559,"CMake: enable Ghostscript plugin","Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2559","71b24ef8e851a16611738d5d200c48215916d8a4","2022-04-03 00:05:03.634-04","2022-04-07T15:03:39.400Z","[]"
1835,2330,"mingle: fix mismatched format string to 'agerr'","Based on line 395 of this same file, it is clear this is what this code was
intended to look like. It is unclear to me why this was not caught by the GNU
`printf` annotations on `agerr`.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2330","e6451ead5af8d75ee7357c397b79e819d739d2bf","2021-12-10 00:09:30.059-05","2021-12-15T03:31:39.280Z","[]"
2156,2236,"Gts for windows","Added GTS to Mingw.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2236","bc0be9e8d92857e83b0c6171f79aa8b9f19ae803","2021-10-17 00:08:48.138-04","","[]"
2050,1936,"remove unused md5 implementation in Smyrna","Closes #2050.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1936","c40293f14f536e92a31adae187ff69f5e478497e","2021-04-29 00:04:00.693-04","2021-05-05T15:39:06.017Z","[]"
2089,2077,"Draft: fix: distinguish HTML-like and non-HTML-like strings when string interning","#2089.

This needs some work as it doesn't actually fix #2089 yet, and also breaks a bunch of other test cases. I think it's vaguely in the right direction though.","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/2077","896d07c4506771af8d47d02e5b2854cbce24980b","2021-07-26 00:06:50.647-04","","[]"
358,2733,"fix: Revert ""rewrite versionStr2Version to use strtoul""","This reverts commit 5aa56175c4715700cc8bf9fecad7b27665c04379. This commit
inadvertently changed the parsing of the `xdotversion` attribute to make
something like “1.7” parse as version 1.

Gitlab: fixes #358","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2733","a7ac5c3ee85edd0573748e474a11a1796f985c83","2022-07-02 00:05:13.923-04","2022-07-04T21:23:11.761Z","[]"
2335,3043,"Autotools: Make ann file check cross-compilation friendly","Resolves https://gitlab.com/graphviz/graphviz/-/issues/2335","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3043","6774323f305e643c51a7377414defd9d73e7ca54","2023-01-07 00:02:44.436-05","2023-01-08T00:35:31.103Z","[]"
1576,2758,"add missing -I flags to point to perl files","This applies a patch NetBSD has been carrying downstream for some time.

Gitlab: fixes #2262, #1576

Reported-by: Michael Bäuerle <micha@NetBSD.org>","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2758","d55d524a131ad550bb353b5d5df4b66b1a1c3cbd","2022-07-14 00:06:35.642-04","2022-07-19T01:57:11.474Z","[]"
1657,94,"fix broken Doxygen link","Closes graphviz#1657.","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/94","c85d8ab35128564074790ed3a8d776f3c19633d6","2020-06-06 00:03:13.495-04","2020-06-06T22:07:07.704Z","[]"
1943,1745,"Experimental: build docker image in GitLab CI","Starting with just centos7

Following the instructions at https://about.gitlab.com/blog/2019/08/28/building-build-images/.

Haven't set up the environment variables yet.

Should help with the update needed after !1726

Towards #1943","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1745","86b2d6af0a172d087e9ea8bdc1e87b201a169384","2021-02-14 00:07:43.703-05","2021-02-14T03:23:05.166Z","[]"
2222,2858,"Increase stack size for dot MSBUILD project file (avoid crash on larger graphs)","Increase stack size for dot.exe to ~4MB in windows .vcproj file to avoid stack overflow errors on deeper graphs","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2858","e664c0c8a6291e220ec62414c1879fb974c77c85","2022-09-26 00:01:09.209-04","2022-10-15T21:43:06.554Z","[]"
2078,2041,"add a warning when using layout on a non-graph, #2078","Addresses #2078, as well as some clean up opportunities I came across along the way.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2041","c0ad4e963562051fe775be181e8a114fef6e0818","2021-07-08 00:04:42.78-04","2021-07-18T19:50:46.134Z","[]"
2001,1907,"move towards standardizing Python style","This MR attempts to standardize some white space and syntactic usage in the Graphviz Python files. It involves a lot of useless churn, but I think it's better to take the hit now as the amount of Python in the code base is only going to increase.

@magjac maybe you want to review parts of this as it forward-ports generate-configuration-table.py, which I think was only touched by you previously.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1907","d9037dc27707b265fda437359351bf6ba324143f","2021-04-18 00:02:17.17-04","2021-04-24T05:30:45.792Z","[]"
1242,1501,"make lib/ast/*.c #includes unambiguous","This is the next baby step towards #1785 and #1242, following on from !1488. I also cleaned up some other stuff I noticed while driving by.

I'll merge on 2020-08-12 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1501","dcc5537ce3242ebfd6b8195c7950cfe40c1fd121","2020-08-07 00:07:25.928-04","2020-08-13T02:30:59.054Z","[]"
1371,248,"update download links to new URLs since Graphviz 2.46.0","As of Graphviz commit 2b4eed1cd2e2063e079db64f39d2b74e1040eea5, releases are
hosted on Gitlab. The 2.46.0 release was the first one to go through this
deployment workflow. These changes update the download URLs to note release
2.46.0 is on Gitlab, not on www2.graphviz.org.","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/248","a454b66ae3b324827a3c93a86f19ba22e1a53ad3","2021-01-18 00:09:25.387-05","2021-01-22T01:16:09.763Z","[]"
1332,3103,"Revert ""common: do box overlap calculation exclusively on doubles""","While investigating #1332, I discovered I'd accidentally changed the semantics of the triangulation code. This MR reverts the change.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3103","f0500f15f767f7b08f4e23c18c45a7fed8a9e141","2023-03-12 00:02:17.311-05","2023-03-17T21:15:09.744Z","[]"
2085,2067,"install Python3 to a known path in Windows CI","This avoids a latent problem wherein Python is installed to a directory
containing its version number and the follow on `Path` manipulation was hard
coded to Python 3.9. This would have broken as soon as Python 3.10 became
available through Chocolatey. Closes #2085. Note, I still do not understand why
the documented technique Chocolatey recommends of `refreshenv` does not work.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2067","b958b60642ab38dfeb69d559779ed81bfebe0384","2021-07-23 00:08:36.085-04","2021-07-30T00:52:58.432Z","[]"
1549,1610,"remove legacy MSBuild references to lib/agraph","lib/agraph was removed in b9b3cb9fbf7eabdb63c92abbea83e104ef5b4b04. Related to
#1549.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1610","f42d82337808624467f16fa2bd0949118b134980","2020-10-08 00:06:10.764-04","2020-10-08T14:27:02.401Z","[]"
1759,1512,"Use preinstalled grep instead of installing it in CI","Final step that fixes
https://gitlab.com/graphviz/graphviz/-/issues/1759.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1512","3e93b0a9a10398e383840f0e84470d2d3193e3ff","2020-08-10 00:00:27.91-04","2020-08-10T07:42:21.055Z","[]"
2314,597,"Revert ""Update angles.gv.txt: simplify graphviz representation""","This reverts commit c2573588ca17e7a660a9debd4b704a8b70f08936

Turns out I broke things with this commit, for one good reason (I meant to only inline gradientangle but inlined a lot of things), and one bad reason (https://gitlab.com/graphviz/graphviz/-/issues/2314).","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/597","7e273b011c1958dd9fd97cc7016adc39ae9da8bc","2022-11-14 00:07:35.97-05","2022-11-14T09:50:04.885Z","[]"
1836,1477,"CMake installs missing symlinks/copies of dot and gml2gv; related to 1753","Issue #1753 noted a number of missing executables (`gvpr`, `neato`, `gv2gml`, *etc.*) when building with CMake. This change fixes simple cases where multiple commands were symlinked to the same real executable on unix-y platforms but were omitted on Windows due to uneven support of symlinks.

On Windows systems, CMake will now install copies of `dot` or `gml2gv` with the appropriate names (similar to the 2.38 `.msi` behavior); on non-Windows systems, symlinks will be made instead of copies. This is done within CMake/CPack so should work with 'dumb' archives (`.zip`, `.tgz`) as well as smarter installers (`.dmg`, `.exe`, `.msi`)

This MR doesn't address the missing `gvpr` which does not appear to be built under the current CMake configuration. Regardless, this should be a partial fix for #1753.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1477","d1af2c8316aa6bfeac292729cee7606e1a05851d","2020-07-21 00:04:58.198-04","","[]"
1793,2600,"graphml2gv: replace inline stack implementations with generic API","More progress on #1793.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2600","b2c4154dcfe3b4249bf075b75c22b0fe97391fea","2022-04-16 00:04:20.302-04","2022-04-17T22:44:45.295Z","[]"
2102,1760,"fix multiple definitions of CDT variables under MinGW on Windows","Building with MinGW on Windows resulted in lots of build errors of the form:

  …/x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):
    dtdisc.c:(.bss+0x0): multiple definition of `Dtset';
    CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first
    defined here

The problem is that this environment defines `_WIN32`, so it sees the `__declspec`
alternatives for `CDT_API` in cdt.h. This is fine as GCC understands `__declspec`,
but it results in variable declarations in this header then missing the `extern`
qualifier. GCC’s semantics, in contrast to MSVC, interpret this as a definition
rather than a declaration.

The solution here is to *always* apply `extern` to these declarations, as MSVC is
happy with this as well. This is only addressing the immediate cause, and not
the longer term issue that `__declspec(dllexport)` and `__declspec(dllimport)` in a
Windows build should really be mapped to `__attribute__((visibility(""default"")))`
and `__attribute__((visibility(""hidden"")))` in a non-Windows build, not to `extern`.

Fixes #1940. Thanks to @Synoecium and @swaldhoer for guidance on this fix.

----

@synoecium, @swaldhoer, do you have a chance to review/test this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1760","88ca57327b090c4b0003f07e3bd243c95d7c95a4","2021-02-15 00:04:45.622-05","2021-04-24T16:27:24.371Z","[]"
1839,2434,"enable 'dot_builtins' in RPM package","It is not clear why this was excluded. This partially reverts
e5f514b2.

Gitlab: closes #1839","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2434","d9f8d58c43d5572702f61301e46267c174c23260","2022-02-08 00:05:16.425-05","2022-02-09T07:08:32.629Z","[]"
1876,1672,"Stable Release 2.46.0","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1672","d94465b13f1636f8e3e6a4f6dc69b9301b592534","2020-11-15 00:07:37.714-05","2021-01-18T17:47:32.226Z","[]"
662,1435,"some lib/gvc simplification","Some simplification opportunities I spotted while investigating #662 and friends. The double pointer iteration idiom that's being rephrased here is a common pattern for iterating over linked lists when you need to modify the list mid-iteration. However, none of these loops needed to do this so we can more simply express this with a single-indirect pointer.

I'll merge this on 2020-06-26 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1435","b179cbe6c0207728dd16b337f9d05ab026fe8f77","2020-06-20 00:04:01.777-04","2020-06-27T00:48:08.303Z","[]"
2123,2137,"Add Cygwin CMake build to CI","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2137","af01a10673582bd81c5a00b4c0f73b05164a45dd","2021-09-02 00:01:00.132-04","2021-09-08T19:08:05.155Z","[]"
1411,1573,"fix: track source line number accurately across newlines in quoted strings","The regex for matching arbitrary content within a quoted string (qstring) was
too broad, matching also newlines. Due to the way Flex preferences regex matches
this prevented the literal newline rule from matching at all within a quoted
string. As a result error messages would reference incorrect line numbers.
Closes #1411.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1573","9bdd24cae96d01fc6b2a940bc87d27edeb5d84a7","2020-09-13 00:01:08.788-04","2020-09-19T03:17:12.127Z","[]"
1998,2631,"replace various SFIO to stderr with C stdio","While it is technically possible to replace the `sfstderr` stream with something
other than stderr or use an SFIO-specific format specifier (e.g. `%!`), nothing
in Graphviz permits this. Thus we know all these instances are actually just
doing basic output to stderr. By replacing them with C stdio, they are more
transparent to the compiler and can be implemented more efficiently.

Gitlab: #1998","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2631","c24d86977b1c580b4daafd0eeb3eb81dbffb230b","2022-04-25 00:01:39.753-04","2022-04-28T15:54:46.059Z","[]"
2088,1,"Builds with CMake and Mingw64 and GTS library.","This fixes the message ""label: area too large for rtree"" on Windows with sfdp/neato/fdp, which appears because GTS is not added to Graphviz after 2.38.0 : See https://gitlab.com/graphviz/graphviz/-/issues/2088

Now it builds with CMake and Mingw64, and GTS.","closed","https://gitlab.com/rchateauneu/graphviz/-/merge_requests/1","01fce40486fc6c7d847eaf4d4f9e8e9a39a6269f","2021-10-10 00:07:55.021-04","","[]"
1965,1353,"brewer.awk: Close file after opening.","macOS awk seems to have a limit to how many files it will open at once.

Fixes this error on macOS awk:

```
$ make
...
awk -f brewer.awk ../../lib/common/brewer_colors
awk: colortmp/brbg7 makes too many open files
 input record number 131, file ../../lib/common/brewer_colors
 source line number 13
make: *** [colors.html] Error 2
```","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1353","8344602f8960b0b6f2444838201e2435b817c744","2020-05-14 00:00:32.228-04","2020-05-28T10:53:38.716Z","[]"
1477,1927,"build: use CMake to control inclusion of some directories","CMake can ensure that the current source and binary directories are
included.  This allows us to remove a number of include directories
from manual inclusion, which paves the road for further reductions.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1927","e168457ed7626613aa871f3d21c9b0692c58f754","2021-04-25 00:08:34.984-04","","[]"
2122,2490,"fix autotools out of source build errors","Fixes #2207 

Sample explanation:

Files in lib/expr need '..' to include generated expr/y.tab.h etc

Command:

(mkdir -p build && cd build && ../configure -q && make)","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2490","0d67f114ab553423c8f0ab1aaef0476c9a6202e2","2022-03-05 00:01:50.886-05","2022-03-12T21:01:25.058Z","[]"
2236,2659,"CI: attempt to fix Gitlab 'cobertura' removal","The `cobertura` keyword was deprecated in March¹ and then completely removed on
2022-05-05,² causing all CI pipelines to now fail. This is an attempt to migrate
to the new syntax. More details in
https://gitlab.com/gitlab-org/gitlab/-/issues/361615.

Gitlab: Fixes #2236

¹ https://gitlab.com/gitlab-org/gitlab/-/commit/eae7dfc843783e270607d71c6db0c1ab6a52a8d1
² https://gitlab.com/gitlab-org/gitlab/-/commit/812408bafae328b81652110fc53c6c6b89e3db81#62c40d79aabcb1ce977904c9c748b08045ff0a85","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2659","5a3bc0af23e1df1d9ca1b88db36d4e9b9906555f","2022-05-06 00:02:29.072-04","2022-05-11T00:01:13.299Z","[]"
1720,1382,"write output of long chain test to /dev/null","This avoids generating a large file in the source tree that we don't need. In my
runs in a Linux VM, this also significantly speeds up the test suite.
Closes #1720.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1382","632fe0bd1cfc6a4f636db4f85206aff6720bdc6b","2020-05-31 00:06:42.773-04","2020-06-02T09:09:21.449Z","[]"
1800,2408,"reformat example code","We don't usually clang-format existing files, but these are used for examples on the website, so it seems worth putting them in a style more reflecting Graphviz' aspirational standard.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2408","6e8ab5f870224443ba65e5d703897f956d9e0aa0","2022-01-16 00:05:58.72-05","2022-01-19T16:16:13.361Z","[]"
1315,1282,"Fix: copy pangoft2-1.dll with correct file name","A typo in gvplugin_pango.vcxproj caused pangoft2-1.dll to be copied as
pango2-1.dll. Fixes #1315.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1282","82610de2304838190d1416735e42e6e21cf0c349","2018-01-28 00:07:19.353-05","2018-03-02T12:11:29.758Z","[]"
2151,2259,"remove Bashism from gvmap.sh","Closes #2151.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2259","6c8bd5c85c087d379e47c991166ab6d20598ae57","2021-10-31 00:00:36.395-04","2021-10-31T18:01:35.901Z","[]"
1709,1495,"fix edge attribute order confusion","Certain edge attributes are constructed in advance of their being seen in the
input because Graphviz knows it may need default values for them. Later, if seen
in the input, the values of these attributes are updated.

This all works fine unless the order in which these initially-defaulted edge
attributes appear in the input does not match the order in which the default
versions are constructed by Graphviz internally. In this case, the order in
which the attributes are seen in the input is used to construct a dictionary of
them, but the original copies are used to index into attribute values.

In the particular test case added in this commit,

  digraph {
    { rank=same; n1; n2 }

    n2 -> n1 [ headport=s, arrowhead=normal ]
  }

arrowhead was constructed with symbol ID 0 and headport was constructed with
symbol ID 1. But then the later parsing of these attributes resulted in a
dictionary where the headport value was in ID 0 and the arrowhead value was in
ID 1. Indexing into this dictionary with the initially constructed E_arrowhead
resulted in incorrectly returning the value ""s"". This caused a spurious error
'Arrow type ""s"" unknown' as well as incorrect graph output.

Fixes #1444. Note that this may just be one of several issues resulting from
using these initially constructed E_* symbols.

I'll merge on 2020-08-10 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1495","4e727ede4f5181c4650c4aa60427bef8b43d113d","2020-08-05 00:01:01.437-04","2020-08-11T01:35:45.864Z","[]"
2115,2119,"remove SWIG #include malloc.h work arounds","These lines were working around an issue where SWIG-generated code includes the
non-standard header malloc.h This was fixed in SWIG commit
571a84c9e788a8e97517a5d730d0e01edf0085e2 which made it into SWIG v1.3.32
released in 2007. Thus this work around is no longer necessary.

Related to #2115.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2119","c934a8ae35c81ac7f7fc2f27af197b08be0413fe","2021-08-28 00:06:45.154-04","2021-08-30T15:40:44.379Z","[]"
2045,2054,"replace 1-byte strstr calls with strchr","And also some clean up opportunities I noticed along the way.

This was discussed on !2045, https://gitlab.com/graphviz/graphviz/-/merge_requests/2045#note_626133012, and we said it was low priority. But I thought I'd do it now while it's fresh in my mind.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2054","3dc4a73b35c5ed6078c50bcc64eb1797e69dbb66","2021-07-16 00:09:35.698-04","2021-07-18T22:12:08.685Z","[]"
1827,1585,"remove eFence support","The eFence memory debugging tool has these days been superseded by Valgrind and
Address Sanitizer. Closes #1827.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1585","aea52c679aefcc7cf6010bf728761dbd2930fdf4","2020-09-19 00:01:57.356-04","2020-09-26T01:05:03.140Z","[]"
2130,2188,"CI: avoid BOM in COLLECTION file in MinGW build jobs","Fixes https://gitlab.com/graphviz/graphviz/-/issues/2130.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2188","58592bc8f5e85f57c0428a931d120bcf558d3d3c","2021-09-25 00:07:14.454-04","2021-09-26T09:52:39.920Z","[]"
621,571,"Attributes for fdp features","![image](/uploads/d7e185b3ede203312b06fc23d6af3bad/image.png)","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/571","251e326e9e72b0caab4b0abd6306de2ba7134e21","2022-09-28 00:06:58.877-04","2022-10-01T00:25:21.481Z","[]"
2130,2167,"Stable Release 2.49.1","I propose cutting a new release on 2021-09-22.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2167","6ced424688ffaafbf746ead675f4c514ec8559b7","2021-09-17 00:08:02.901-04","2021-09-23T00:04:14.635Z","[]"
1308,3131,"add a test case for #1308","Along with some other misc clean up.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3131","7c09773744d7d0750c0a7b535a98fb72c06b02c8","2023-03-24 00:05:29.824-04","2023-03-26T22:18:38.242Z","[]"
2180,2407,"Fix flaky lneato usage on Windows","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1934.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2407","eafcc51094dd81bfebce370bb41cad2acbe8c7b3","2022-01-16 00:06:12.981-05","2022-01-17T17:35:36.132Z","[]"
219,2779,"remove dotty, lefty, lneato","Lefty, and its dependent tools Dotty and Lneato, have been suspected unused for
a long time. They were scheduled for removal, but we took a cautious and very
slow approach to this given how pervasive Graphviz is and the limited visibility
we have into its usage:

  1. 2021-09-25 make Lefty default to disabled in the build system¹
  2. 2022-01-16 disable Lefty in published graphviz.org packages²
  3. 2022-03-28 remove build system support³

This completes the final step of removing the code from the repository. It is
still retained in the history, should anyone need access to it or need to build
a past version of Graphviz with Lefty.

So far, we have only heard two notable reactions from the downstream world:

  1. Lefty disabling was not quite complete on the first attempt.⁴
  2. There has been an offer of assistance to maintain Lefty.⁵ No patches have
     yet emerged, but if and when they do we could feasibly reverse direction on
     this and reinstate Lefty and friends.

Gitlab: closes #219, closes #552, related to #1836, #1854

¹ 1a4ad00b59cc1e1e9302fcbd1a205495ee59cab5
² 04a78cc9ae01b2a7e5d5435146cd503c45af90b9
³ 6faa34010f947510ec129af2d998614de8a513ed
⁴ https://gitlab.com/graphviz/graphviz/-/issues/2153
⁵ https://forum.graphviz.org/t/lefty-not-a-graphviz-application/835/6","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2779","b2f287ca315dd5bf689d9ce2ca71dbfe63fb8a61","2022-08-03 00:08:37.228-04","2022-08-08T14:56:44.374Z","[]"
2148,2270,"remove 'COLLECTION' from the packaging hierarchy","Each Graphviz version has a notion of “collection,” which traditionally could be
the values “stable” or “development.” The semantically versioned releases that
are published to the website are considered stable. The inter-release packages
that the deploy.py script still uploads to the Gitlab package repository are
considered development. gen_version.py knows how to determine the collection of
a version during build.

Additionally .gitlab-ci.yml knew of another collection value, “experimental,” of
which gen_version.py was unaware. It would manually tweak the collection to this
for certain non-mainstream builds.

deploy.py knows nothing of this notion of collections.

The combined effect of the above has led to some negative outcomes:

  1. Published releases include a mixture of files labelled “stable” and files
     labelled “experimental.” It is not clear to the general public what either
     of these labels mean or how they differ.

  2. In recent times, “development” versions are no more or less stable than
     “stable” versions. The terminology here unfortunately has become
     inaccurate.

  3. The directory hierarchy for published releases has included an extra level
     for collection. If deployment worked as intended, this would be redundant
     as every release artifact would be “stable.” However, as discussed above,
     the deployment script actually publishes “experimental” artifacts as well.

To reduce confusion and simplify build and packaging going forwards, this change
removes the notion of collection. The generated COLLECTION file is no longer
produced and users should have no need to be aware of this concept.
gen_version.py still internally knows the idea of collections to distinguish
published release version numbers from inter-release version numbers. But this
is no longer exposed to the rest of the build system and packaging.

The notion of “experimental” as a collection value is completely removed.

Closes #2148.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2270","422a0723b4c35502d9f2a06806c86b3ba1f0ce3b","2021-11-07 00:05:18.974-04","2021-11-10T02:16:15.070Z","[]"
1484,1305,"Cycle based centroid for curved edges","Here is my pull request for cycle based centroids for curved edges.  I implemented my own pointer based vector so that I could do vectors of vectors of nodes, or vector of nodes with the same structure.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1305","97811bd35bed364f76d076eca0e16d40db8da8fb","2019-01-28 00:04:36.689-05","2019-02-05T02:22:07.736Z","[]"
1873,2071,"more sfprintf removal","More movement towards #1873, #1998.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2071","b336334b43656b06a34943ed1ae0ef08fb8a8934","2021-07-24 00:08:07.578-04","2021-08-04T03:31:54.388Z","[]"
2258,2815,"fix 'id' attribute in SVG output omitting input graph id","When using an ID attribute on the input graph,¹ this attribute would only be
propagated to some output elements. In particular, generated `linearGradient`
and `radialGradient` elements in SVGs would be missing the ID.

Gitlab: fixes #2258

¹ https://graphviz.org/docs/attrs/id/","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2815","465cef702370966f17d27d455093cf69a651af9c","2022-08-27 00:00:11.821-04","2022-08-29T14:38:16.858Z","[]"
1711,1372,"Start 2.45 development series also for CMake builds","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1711.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1372","fa40209b378c8435fd1c8d6c74ff0ff95c9f45b2","2020-05-22 00:02:55.563-04","2020-05-22T11:13:57.637Z","[]"
1761,1457,"Test C examples in CI also on Windows","This is an addition to https://gitlab.com/graphviz/graphviz/-/merge_requests/1455.


TODO before merge:

- [x] Check if all the changes in https://gitlab.com/magjac/graphviz/-/commit/c65bcfd6e19eab4cfae0514da678c735f19e39e2 are necessary. Without at least some of them we get `neatopack.obj : error LNK2019: unresolved external symbol __imp_pack_graph referenced in function main`. **EDIT**: No they weren't. Only one was. See https://gitlab.com/magjac/graphviz/-/commit/e4a4dbd1d9c841b8003f9ef23b1872ddae132120. **EDIT 2:** Although not necessary for this MR I also added `pack_graph` to [the other copy of `gvc.def`](https://gitlab.com/graphviz/graphviz/-/merge_requests/1457/diffs?diff_id=100411957&start_sha=8a680096a89cb09d35ea97fd00242c938238a92b) to keep them synchronized. See https://gitlab.com/graphviz/graphviz/-/issues/1761.

- [x] Rebase on new master when https://gitlab.com/graphviz/graphviz/-/merge_requests/1455 has been merged.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1457","5f1a7d3be6af2aad1abcb742fb9ca57d418153aa","2020-07-08 00:04:09.317-04","2020-07-12T10:29:30.833Z","[]"
2358,3108,"wrap Catch2 unit tests to enable both JUnit and stderr output","Unfortunately, as explained in the comment in the Python script in this commit,
there appears to be no way to instruct a Catch2 binary to output _both_ JUnit
format to a file and diagnostic failures to stderr.¹ First running the test
binary in JUnit mode and then, if it fails, re-running it in console mode seems
a simple way around this. Unfortunately this does not seem straightforward to
achieve in CMake (`add_test` does not support multiple `COMMAND`s and scripting
something involving the `||` shell operator in a cross-platform way seems
complex).

This commit introduces a Python wrapper to perform the re-run logic. It is not
ideal, but seems the least complex way of achieving this.

Gitlab: closes #2358

¹ See
  https://stackoverflow.com/questions/56244534/catch2-output-to-console-and-file
  for some more information.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3108","7157b429b8d3ae8fa06d1481f3fcfd38677bbb50","2023-03-14 00:02:25.526-04","2023-03-19T04:10:51.639Z","[]"
1714,18,"Add ""Edit this Page"" links to pages template","This should hopefully lower the bar to getting contributors to improve
the docs.

This is a first shot at addressing #7 - happy to iterate on the UI of
this.

Tested locally with `bundle exec jekyll serve`.

![image](/uploads/8efea8356f11b38c784e9a1e9c269a6c/image.png)","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/18","f6a37c1e36c1190da8268bf4930c4684ab3c315e","2020-05-22 00:00:03.633-04","2020-05-23T08:26:24.767Z","[]"
1741,1430,"deallocate memory before exiting mkdefs.c","The code in mkdef.c gets compiled and executed during Graphviz compilation. When
building with Address Sanitizer enabled, instrumentation is also applied to this
utility during compilation. Usually this is not a problem, but when configuring
ASan to exit with an error on leak detection it would cause the build step that
runs mkdefs to erroneously fail. We now explicitly clean up before exiting
mkdefs, making ASan happy in all configurations. Closes #1741.

This implements the conservative option on #1741, of inserting explicit calls to `free` instead of trying to refactor this into a scripting language. I'll merge this on 2020-06-20 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1430","7d9cfa8c3dddcaeb9a70d4e53d84d4374d60656b","2020-06-14 00:09:23.817-04","2020-06-15T00:49:36.467Z","[]"
1793,2432,"some non-functional changes for simplification/cleanup","Some minor things I came across while working on #1793.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2432","cd989d3f4f7e3f0c5425071c5116024fc2c0e7a0","2022-02-06 00:04:53.847-05","2022-02-07T08:52:44.336Z","[]"
2233,3030,"Autotools: look for Qt6 in preference to Qt5","This is the equivalent of 743aed2f, but for the
Autotools build system.

Qt6 no longer ships with pkg-config (.pc) file(s). So we need to do manual
discovery of the necessary information ourselves.

QMake is called `qtmake6` in Qt6 and the `qtmake` that ships with it is a
symlink to the former. So this change preferences Qt6 if both Qt5 and Qt6 are
installed.

Some notable warts:

  1. Discovery uses `AC_CHECK_FILE` rather than
     `AC_CHECK_HEADER`/`AC_CHECK_HEADERS`. The latter seems to exclusively call
     the C compiler rather than the C++ compiler, and thus cannot be used for
     C++ header discovery. A consequence of this choice is that discovery
     checks existence only, not whether the headers are usable.

  2. Library discovery also uses `AC_CHECK_FILE` rather than `AC_CHECK_LIB`.
     Given the above restriction, if we cannot call the C++ compiler, there is
     little point in attempting a link check. But this does mean that discovery
     here also only checks existence, not whether the libraries are usable.

  3. There seems to be no pkg-config-like mechanism for discovering that e.g.
     Qt6Widgets and Qt6PrintSupport depend on Qt6Gui and thus `-lQt6Gui.so` must
     also be included in the link line. Qt6 has migrated to a CMake-based build
     system and their answer to most of these such problems appears to be “move
     to CMake.” This change just hard codes the link lines under the assumption
     these will be stable across the Qt6 series.

  4. Qt6 requires C++17, so we need to switch from C++11 to C++17 mode when
     `--with-qt=yes`. The CMake discovery apparently does this automatically.

  5. The `QT_SELECT` environment variable does nothing in Qt6. The line using it
     in cmd/gvedit/Makefile.am has been left unchanged in this commit. When
     using Qt5 it still avoids accidentally picking up Qt4 and when using Qt6 it
     is a no-op.

Gitlab: closes #2233","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3030","d4969fa197ede68d521fadc8591760f0335d40b5","2022-12-31 00:00:11.695-05","2023-01-03T05:10:07.085Z","[]"
1626,1373,"use Python 3 compatible syntax in autotools check","We expect `python` to be a symlink to Python 3, not Python 2 but it does not
hurt to use syntax compatible with both. Other Python checks in configure.ac
were already using compatible syntax.

Fixes #1626.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1373","b308bc031dbeb3b0af1f71d293b98b8048b2ac94","2020-05-24 00:00:06.385-04","2020-05-28T10:56:41.127Z","[]"
372,2929,"Fix issue 372 for tee arrows","Following !2701, !2907, !2910 and !2914, this MR fixes #372 also for 'tee' shaped edge arrows. It also adds a (passing) test for 'none' shaped arrows, i.e., edges *without* arrows.
 
Towards https://gitlab.com/graphviz/graphviz/-/issues/372.

Below is a list of node shape families and arrow types to show which are fixed and not by this and previous MRs.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [x] tee
- [x] box
- [x] diamond
- [x] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2929","5ed480a52ddbf89ad5697376d93b95635eb38230","2022-11-02 00:05:50.588-04","2022-11-04T18:59:18.233Z","[]"
2054,1929,"remove unused lib/inkpot","Closes #2054.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1929","b9347c81fc38c06f79aed22bf0e0b8e61c3b5eaf","2021-04-26 00:07:23.821-04","2021-05-02T02:44:34.753Z","[]"
2344,3058,"gv2gxl, gxl2gv: fix mode detection on Windows","Gitlab: fixes #2344

In the process of working on this, I discovered that MinGW seems to set `_WIN32` but use `/` as a path separator. So conditional path separator code elsewhere in Graphviz that relies on `_WIN32` probably does not work on MinGW.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3058","762f81172de95c2d54a66f744629d42d93b437dc","2023-01-18 00:03:14.046-05","2023-01-22T03:29:31.874Z","[]"
1963,1811,"Revert ""Build docker images with buildkit""","This reverts commit e8c5df0ad943cf2ab1c657165900928c3f6f7d3b.

Fixes #1963","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1811","6cdd95b8776d54eb1a474e1d90f7f3b7e85a7e01","2021-02-28 00:05:35.222-05","2021-02-28T11:19:07.753Z","[]"
2356,3147,"add a test case for #2356","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3147","6a7875a7f41513c782c2a442d13c9a1a7caff5da","2023-04-01 00:09:03.749-04","2023-04-04T16:13:04.476Z","[]"
1422,1572,"remove compile time configuration via iffe","This patch series resolves #1422 and #1521.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1572","1a8df410a7469d962dc79c2c99846fb681e84a06","2020-09-12 00:02:27.984-04","2020-09-19T00:55:38.668Z","[]"
1753,447,"Parametrize windows download page with JSON","Should go some way towards addressing the request in https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/444:

> @markhnsn do you think we could construct something that lets us just bump the version number one place in the Windows download page in future? As you can see from this diff, the URL prefixes are pretty stable now.

This is a first attempt at parametrizing without changing too much. We can certainly evolve this format as needed.

I removed the text saying `(not all tools and libraries are included)` because I didn't understand it -- is the implication that the .zip archive *does* have all the tools and libraries?","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/447","1a4ffe521f7f3301f7a8742fe4158b48665d009f","2021-09-18 00:01:24.574-04","2021-09-18T22:32:45.954Z","[]"
1808,1529,"Add windows build PowerShell scripts and refactor CI","This is the first of two MR's with the overall goal to make it much easier for users to build Graphviz for Windows and for writing improved documentation on how to do it. This MR provides three `PowerShell` scripts and refactors the existing Windows pipeline to use them. The [other MR](https://gitlab.com/graphviz/graphviz/-/merge_requests/1530) provides bash scripts with the same functionality.

* `setup-build-utilities.ps1` - Tries to find specific build utilities in the user's path and if it doesn't find one falls back to set up the path to the utility in the Graphviz build utilities submodule at `windows\dependencies\graphviz-build-utilities`. Produces output messages to tell what it is doing and where the utilities have been found.
* `build.ps1 [-buildsystem] cmake|msbuild [-configuration] Release|Debug [-platform] Win32|x64` - Builds Graphviz provided that the build utilities have already been set up.
* `setup-and-build.ps1` - First runs `setup-build-utilities.ps1` and then `build.ps1` with the arguments supplied.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1529","d8b5eb6fa34ba6e37fc5ed08e3364b37b955ddac","2020-08-17 00:05:01.008-04","2020-08-25T15:58:03.821Z","[]"
1979,2321,"fix: correct Windows release file recognition during deployment","6117abe680037824d134149b0de42f589fb24466 updated the deployment script to add
Windows artifacts that previously needed to be appended locally to the JSON
manifest. However it failed to account for changes made to the packaging
hierarchy that removed release collection and a redundant architecture
component.

(Hopefully) closes #1979.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2321","92804597802903f126c3d701179fc06bda58ed4c","2021-12-05 00:08:22.252-05","2021-12-11T02:38:33.229Z","[]"
2153,2262,"fix: exclude cmd/smyrna when Smyrna is disabled during build, and cmd/lefty when Lefty is disabled during build","Fixes #2153.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2262","52fb5d0558e473e4b92a7e449210b7c1dd390823","2021-11-02 00:03:48.076-04","2021-11-08T03:58:22.650Z","[]"
1613,1522,"Correct uint_64_t typo to uint64_t in CMake files","* Motivation for this being correct:
    * The uint_64_t datatype does not exist in any library AFAICT
    * It fixes https://gitlab.com/graphviz/graphviz/-/issues/1796
    * The commit message of https://gitlab.com/graphviz/graphviz/-/commit/25fc2bcef8cb565f04081660fc60697d1f863b98 says that this was the original intention
    * The pipeline succeeds
* If someone can test this on Linux and/or macOS that would be appreciated.

Other mentions of `uint_64_t`:
* https://gitlab.com/graphviz/graphviz/-/merge_requests/1465
* https://gitlab.com/graphviz/graphviz/-/issues/1613#note_355406067","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1522","69a98fa67caea3281d615a10380cb10e2752a414","2020-08-13 00:07:19.638-04","","[]"
2315,2951,"smyrna: fix macOS compilation errors","The code added in 24bd92c1 includes conditional parts that do not compile on macOS. It seems this went unnoticed because the macOS CI jobs do not build Smyrna. I only noticed this while looking at replicating this code in gvedit.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2951","ac70917bd9494a32032988e8abc7094cc9a8fa3e","2022-11-14 00:04:06.415-05","2022-11-17T03:58:05.238Z","[]"
1681,1365,"fix: uniformly treat margin as unsigned in pack.c","Although margin is an unsigned int in pack_info, it was being passed around as a
signed int within pack.c. UBSan identified seven undefined overflows that
happened as a result of this with the following input:

```dot
digraph G {rLn pack=-11335142740g}er-
```

Fixes #1681. Several of these were also pointed to by -Wsign-conversion compiler
warnings.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1365","9e7d3b1d41c917327f8507fb53b161a023f013de","2020-05-17 00:07:07.275-04","2020-06-06T00:56:02.951Z","[]"
1793,2609,"sccmap: replace inline stack with generation implementation","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation. This also introduces some missing allocation failure checks.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2609","65237fbdf7047707bca2dccc5dd32d95bb6c163c","2022-04-17 00:07:01.321-04","2022-04-18T15:33:13.065Z","[]"
2141,2238,"Add Ubuntu 21.10 build and test jobs to CI","Also fixes a few warnings that turned up as errors in the CMake builds thanks to `-Werror`.

Closes https://gitlab.com/graphviz/graphviz/-/issues/2141.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2238","4070da8419ee2902bd3c1f58601bffc604a120af","2021-10-19 00:05:48.373-04","2021-10-21T23:03:06.814Z","[]"
592,1658,"fix buffer under-read in fdp","When using fdp to process a graph, it would try to canonicalize all node names,
    regardless of whether they were hosted in refstr_ts or not. The problem with
    this is that the canonicalization logic assumes the character pointer passed
    into it is within a refstr_t and that therefore it can do pointer subtraction to
    get a pointer to the refstr_t itself. This was not true for internally
    constructed node names like ""%4"".

We change this to always go through the refstr logic in agstrdup() when
    canonicalizing names. This ensures that the pointer we pass into the
    canonicalization logic *is* within a refstr_t. This is based on canon() in
    lib/cgraph/output.c. Fixes #1865.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1658","6a20abe53f55531a0a3f71b1367dfac50e89c5dc","2020-11-01 00:00:35.373-04","2020-11-07T04:10:32.503Z","[]"
1797,1519,"Start windows builds directly","Since the version is deterministic, there is no need for the Windows build jobs to wait for the portable source stage to create the VERSION file before starting. They can do it themselves.

This can save up to 2 minutes in CI.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1519","3ac7e1c54fe5f8f4bb304796ab77901c73401aee","2020-08-12 00:05:56.403-04","2020-08-13T15:56:56.355Z","[]"
2336,3036,"migrate some 'sprintf' to agxbufs","Some progress on #1950.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3036","f620d039e8ad5401b644437502edf67534fb9246","2023-01-02 00:05:37.474-05","2023-01-14T18:45:16.288Z","[]"
1761,1482,"de-duplicate gvc.def","Closes #1761. I'll merge on 2020-08-01 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1482","c17a12609d5a98a3eb474a0779aa1dc1b025ce9e","2020-07-26 00:03:09.549-04","2020-08-01T16:58:00.196Z","[]"
2289,2891,"DevIL plugin: use IL_ CMake variables","https://cmake.org/cmake/help/latest/module/FindDevIL.html#result-variables
mentions that FindDevIL CMake module sets the following, frustratingly
inconsistent variables:

- IL_LIBRARIES
- IL_INCLUDE_DIR
- DevIL_FOUND

Note I can't actually test this on my local machine, so I'll be relying
on CI.

Fixes #2289","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2891","b5f4448a3f3a70e14ba7d6990b81506cbda82180","2022-10-08 00:00:42.228-04","2022-10-12T07:47:16.726Z","[]"
1934,2407,"Fix flaky lneato usage on Windows","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1934.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2407","eafcc51094dd81bfebce370bb41cad2acbe8c7b3","2022-01-16 00:06:12.981-05","2022-01-17T17:35:36.132Z","[]"
1652,3045,"CMake: enable LTO in release mode","Link-Time Optimization (LTO) is a mechanism that enables the compiler to
optimize across translation unit boundaries. In particular, it enables
cross-file function inlining. This is present and mature in the majority of
contemporary compilers and switching it on has few downsides.

Some performance numbers:

```
  ┌───────┬──────────────────┬──────────────────┬──────┐
  │       │ before           │ after            │ diff │
  ╞═══════╪══════════════════╪══════════════════╪══════╡
  │ 1652¹ │ 17.88s           │ 17.85s           │  -0% │
  │       │ 50.4MB peak RSS  │ 50.5MB peak RSS  │  +0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 1718² │ 2m21s            │ 2m13s            │  -6% │
  │       │ 15.8MB peak RSS  │ 15.9 MB peak RSS │  +1% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 1864³ │ 13.26s           │ 13.07s           │  -1% │
  │       │ 462.0MB peak RSS │ 461.8MB peak RSS │  -0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 2064⁴ │ 11m42s           │ 11m30s           │  -2% │
  │       │ 1.26GB peak RSS  │ 1.26GB peak RSS  │  -0% │
  ├───────┼──────────────────┼──────────────────┼──────┤
  │ 2095⁵ │ 2m18s            │ 2m19s            │  +1% │
  │       │ 92.3MB peak RSS  │ 92.1MB peak RSS  │  -0% │
  └───────┴──────────────────┴──────────────────┴──────┘
```

¹ The test case from https://gitlab.com/graphviz/graphviz/-/issues/1652 run as
  `neato -Tsvg -o /dev/null 1652.dot`.
² swedish-flat.dot Magnus attached to
  https://gitlab.com/graphviz/graphviz/-/issues/1718 run as
  `circo -Tsvg -o /dev/null swedish-flag.dot`.
³ The test case from https://gitlab.com/graphviz/graphviz/-/issues/1864 run as
  `twopi -Tsvg -o /dev/null 1864.dot`.
⁴ The test case from https://gitlab.com/graphviz/graphviz/-/issues/2064 run as
  `dot -Gnslimit=2 -Gnslimit1=2 -Gmaxiter=5000 -Tsvg -o /dev/null 2064.dot`.
⁵ The tests/2095.dot test case from prior to minimization
  (3819821ea70fae730dd224936628ed3929b03531). Run as
  `dot -Tsvg -o /dev/null 2095.dot`.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3045","11c2897cc52385aa0bb03b022088a875814488b3","2023-01-08 00:06:13.804-05","2023-01-09T15:43:48.633Z","[]"
265,2975,"Revert ""core plugin: stop emitting an empty 'alt' tag in cmap output""","This reverts commit a214b9dc2be6b4a9d27196e2c43f7bf2b0ff0002. It turns out the
W3C specification for this part of HTML requires the `alt` attribute if the
`href` attribute is set. We will need to figure out an alternative of what to
set this to for accessibility.

Gitlab: closes #2319, re-opens #265<br/>
Reported-by: Albert","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2975","a3e26c2e4cf7d2a2554337d241e5466482c92a2f","2022-11-25 00:09:19.596-05","2022-11-26T16:59:58.581Z","[]"
2355,3094,"common parse_layers: fix: replace layer accumulation logic with a generic list","This logic had an off by one error and, when parsing 128 or more layers, would
not allocate enough memory to fit them all. The strange design of book-ending
the layer list with a null pointer at each end should probably be re-examined in
future, but for now we just do the minimally invasive fix.

Gitlab: fixes #2355","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3094","7f86a36f80cc85cdce0adaabba32fe587697ccb9","2023-02-28 00:06:46.843-05","2023-03-06T00:34:52.336Z","[]"
2228,2520,"fix: always include dotty's lefty files in the tarball","Without `dist_`, Automake doesn't include files in the tarball. Whether
they get installed or not is determined by the `AM_CONDITIONAL`.

@smattr the current Automake is broken and does conditional inclusion of the dotty/lefty files (which means if you try and run `--enable-lefty` with the 3.0.0 tarball, it fails). You want to **include the files in tarball unconditionally**, but only install them conditionally.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2520","e1a0e5413241943bad07f0f052e3d42ed9d3adc3","2022-03-19 00:06:19.395-04","","[]"
2273,2808,"Extend the SVG analyzer to handle Graphviz penwidth, pencolor and fillcolor attributes","Following !2780 and !2797, this is the third in a series of MRs extracted from !2702. It adds handling and testing of the Graphviz `penwidth`, `pencolor` and `fillcolor` attributes which translate to the SVG `stroke-width`, `stroke`, `stroke-opacity`, `fill` and `fill-opacity` attributes. The SVG analyzers's capability to re-create the SVG is also extended with those attributes. This will be used in an upcoming MR that will add a test case for !372 and the capability to generate annotated SVG files for visual inspection.

Upcoming MRs will extend the functionality further, create a test case for node and edge overlap and fixes for these overlaps.

This MR also cleans up some minor imperfections left over from the previous MRs.

Towards #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2808","fc94305254081eab29c6663d74c8112be20757bf","2022-08-23 00:03:08.18-04","2022-09-05T08:05:25.063Z","[]"
2304,2925,"minimize test case for #2095","Graphviz periodically runs into problems where CI test jobs exceed the maximum
timeout and recently the project as a whole has exceeded its Gitlab CI quota.

`test_2095` is by far the longest running component of the test suite. This
change is the result of applying two test case minimizers, one clever¹ and one
not so clever², to the input to this test case. The minimizers were asked to
find smaller input that still (1) provoked a segfault on
588096bd638543ea851ea22751ed91549f61a407 and (2) could be processed successfully
on 32feee561394530713292f8873020fc5feacb9fb. The result takes a ~103KB test
input to ~5KB, with execution time in an example environment dropping from
~155s to <1s.

Gitlab: closes #2304

¹ https://github.com/googleprojectzero/halfempty
² https://github.com/Smattr/mattutils/blob/master/shrink","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2925","3819821ea70fae730dd224936628ed3929b03531","2022-10-26 00:06:44.326-04","2022-11-02T05:31:14.869Z","[]"
1763,1577,"Fix failure to create .pdf files with autotools","If neither ps2pdf nor pstopdf is present on the system, the build
fails even if the .pdf files exist. The reason is that the .ps
files are created on the fly, and they are more recent than the
distributed .pdf. Makefile then runs ""false <something>"", which
obviously fails.

Setting PS2PDF to ""true"" is not a solution because we do not
want to ignore when the .pdf file are really absent.

This patch makes running $(PS2PDF) conditional, but still
imposes the .pdf files to be generated when running ""make dist"".

Fixes #1763","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1577","b7be7c0913d27d483e1dc490b5ade301dc95730e","2020-09-15 00:01:46.742-04","2020-09-22T00:03:32.868Z","[]"
1950,3071,"remove some 'sprintf' usage","More progress on #1950.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3071","42d12d88168d8e3742b4d11324f022b1bf179d7e","2023-01-28 00:06:16.552-05","2023-01-30T16:33:37.222Z","[]"
1848,1695,"Reduce warnings during build (with analysis of remaining warnings)","This MR currently eliminates all but one warning from lib/cdt and lib/cgraph (the survivor is apparently a flex artifact).

(Note: on Ubuntu 20.04, I had to build Perl like this in order to make it link: `perlbrew --notest install perl-5.32.0 -Accflags=-fPIC`)

Some stats: when I got started on this, the build process was generating, on my system (with the various packages I installed, not including PHP since its headers generate a LOT of noise), 31458 lines of output, captured using: `make clean; time make |& tee output.log.new`. After this change, it produces 31107 - a change of 351, or ~1%.

I thought it would be useful to analyse the rest of the project's warnings. This script produces a local SQLite database (I thought that more useful than bits of bespoke Perl to analyse things) - run it like `./build-analyse output.log.new`:

```perl
#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec::Functions qw(abs2rel);
use DBI ();

@ARGV && -f $ARGV[0] or die ""No file: generate with `make clean; time make |& tee FILENAME`"";

my $dbh = DBI->connect(""dbi:SQLite:dbname=$ARGV[0].db"", '', '');
$dbh->do(<<'EOF');
CREATE TABLE t (
    dir VARCHAR(255) NOT NULL,
    file VARCHAR(255) NOT NULL,
    category VARCHAR(255) NOT NULL,
    line VARCHAR(255) NOT NULL
);
EOF
$dbh->do('delete from t');
my $sth = $dbh->prepare(""INSERT INTO t VALUES (?, ?, ?, ?)"", { go_last_insert_id_args => [undef, undef, undef, undef] });

$| = 1;
my @dirstack;
while (<>) {
  next unless /(?:(Enter)|(Leav))ing directory '(.*)'|^(.*):\d+:\d+: warning: .*\[-W(.*)\]$/;
  my $dir = $3;
  $dir = abs2rel($dir) if defined $dir;
  if ($1) {
    push @dirstack, $dir;
  } elsif ($2) {
    pop @dirstack;
  } else {
    chomp;
    my ($dir, $file, $category, $line) = ($dirstack[-1], $4, $5, $_);
    $sth->execute($dir, $file, $category, $line);
    print "".""; # progress
  }
}
```

Some quick analyses (from `sqlite3 output.log.new.db`):

```
sqlite> select count(distinct dir) from t;
52
sqlite> select dir, count(line) as c from t group by dir order by c desc limit 10;
cmd/smyrna|721
lib/common|635
lib/neatogen|611
cmd/lefty|414
cmd/lefty/ws/x11|400
lib/sfio|355
cmd/tools|292
cmd/gvmap|265
lib/expr|257
lib/sparse|239
sqlite> select dir, category, count(line) as c from t group by dir, category order by c desc limit 10;
lib/neatogen|sign-conversion|321
cmd/smyrna|unused-parameter|289
lib/sparse|sign-conversion|185
lib/common|sign-conversion|170
lib/sfio|sign-conversion|170
cmd/lefty|sign-conversion|135
lib/sfdpgen|sign-conversion|135
cmd/gvmap|sign-conversion|119
cmd/lefty/ws/x11|sign-conversion|118
lib/common|missing-field-initializers|116
sqlite> select category, count(line) as c from t group by category order by c desc limit 10;
sign-conversion|2197
unused-parameter|946
conversion|925
float-conversion|613
float-equal|380
switch-default|248
shadow|193
missing-prototypes|182
undef|152
missing-field-initializers|127
```

Observations so far: things like `missing-field-initializers`, `unused-parameter` and `switch-default` are easily and quickly remedied, and lend themselves possibly to automatic updating (with suitable C parsing). However, `sign-conversion` required some effort, but is quite important.

I suspect this tool for generating an SQLite database from build warnings may be more widely useful.

Another fruitful activity would be to analyse test coverage. I'm afraid I don't know why the last commit is causing a pipeline failure on the Windows jobs, nor can I help with why the MacOS builds are showing as ""stuck"".","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1695","a13164c2c5e68dbd054b0bd41fd9d15ce3f438a7","2020-12-26 00:03:44.697-05","","[]"
2145,2303,"install and use Ccache in Cygwin CI tasks","The Cygwin CI tasks come very close to the CI timeout ceiling, usually running
for close to an hour. It is hoped that this change will
reduce this time, thus shortening the total CI time as these are the longest
running tasks at present.

----

I've left this in draft, because the results show almost no effect. In the pipeline for [the second last commit](https://gitlab.com/graphviz/graphviz/-/pipelines/415120539) vs [the last commit](https://gitlab.com/graphviz/graphviz/-/pipelines/415140222):
* windows-cygwin-build: 43:12 → 35:52
* windows-cygwin-build-using-autogen: 46:03 → 45:58
* windows-cygwin-cmake-build: 17:27 → 22:21

The last commit was a code no-op, so should have resulted in 100% ccache hit rate. As a Ccache user, if this was my local build, I would expect this scenario to drop a ~40min build to < 5min. I have a few theories:
1. The cache path I'm setting is relative and somehow not lining up with what ccache is using, hence its cache dir is not properly restored, resulting in 0% hit rate
2. The Cygwin CI runner builds in such a way that paths or something in the env implicitly invalidate everything in the Ccache cache
3. Installation time of ccache outweighs any gains from having it enabled
4. The Cygwin CI runner is somehow bottlenecked in a way such that ccache makes no difference
5. Cygwin compilation uses compiler flags that make Ccache think it's unsafe to cache anything (unlikely)

Disclaimer: I have not yet profiled the Cygwin CI runner environment to see where the bottleneck(s) are (is such a thing even possible?) and have not yet played with things like `$CCACHE_LOGILE` to investigate whether we are actually hitting the cache.

@magjac I'd be interested to hear your theories, as your travels have made you something of a Cygwin/CI guru.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2303","57f6df116c2f9b28992457fc0b0bd27f45805681","2021-11-24 00:06:52.128-05","2021-12-07T17:33:36.364Z","[]"
1903,2927,"support SWIG 4.1.0 in the Autotools build system","Some other adjacent clean up and simplification included too.

Gitlab: closes #2277, closes #2303","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2927","6cffa891b9dfd2feb8835885ce6284eb6334e220","2022-10-30 00:09:03.995-04","2022-11-03T16:33:06.008Z","[]"
1464,1613,"fix Lefty's reliance on dup() internals","I figured we have bigger fish to fry, so this just takes the least invasive option for resolving #1823.

----

This addresses the following Coverity warnings:

```
  Error: RESOURCE_LEAK (CWE-772): [#def39]
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:362: open_fn: Returning handle opened by ""dup"".
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:362: leaked_handle: Failing to save or close handle opened by ""dup(fd[1])"" leaks it.
  #  360|           panic2 (POS, ""ptyopen"", ""cannot fork"");
  #  361|       case 0:
  #  362|->         close (fd[0]), close (0), dup (fd[1]);
  #  363|           close (1), dup (fd[1]), close (fd[1]);
  #  364|           execl (shell, shbname, ""-c"", cmd, NULL);

  Error: RESOURCE_LEAK (CWE-772): [#def40]
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:363: open_fn: Returning handle opened by ""dup"".
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:363: leaked_handle: Failing to save or close handle opened by ""dup(fd[1])"" leaks it.
  #  361|       case 0:
  #  362|           close (fd[0]), close (0), dup (fd[1]);
  #  363|->         close (1), dup (fd[1]), close (fd[1]);
  #  364|           execl (shell, shbname, ""-c"", cmd, NULL);
  #  365|           panic2 (POS, ""ptyopen"", ""child cannot exec: %s\n"", cmd);

  Error: RESOURCE_LEAK (CWE-772): [#def41]
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:429: open_fn: Returning handle opened by ""dup"".
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:429: leaked_handle: Failing to save or close handle opened by ""dup(p1[1])"" leaks it.
  #  427|                   panic2 (POS, ""pipeopen"", ""child cannot exec: %s\n"", cmd2);
  #  428|               }
  #  429|->         close (1), dup (p1[1]), close (p1[1]);
  #  430|           close (0), dup (p2[0]), close (p2[0]);
  #  431|           execl (shell, shbname, ""-c"", cmd, NULL);

  Error: RESOURCE_LEAK (CWE-772): [#def42]
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:430: open_fn: Returning handle opened by ""dup"".
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:430: leaked_handle: Failing to save or close handle opened by ""dup(p2[0])"" leaks it.
  #  428|               }
  #  429|           close (1), dup (p1[1]), close (p1[1]);
  #  430|->         close (0), dup (p2[0]), close (p2[0]);
  #  431|           execl (shell, shbname, ""-c"", cmd, NULL);
  #  432|           panic2 (POS, ""pipeopen"", ""child cannot exec: %s\n"", cmd);
```

Fixes #1823. Related to #1464.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1613","3a378bc3635f9464003b29ca8d14da95209b8b9c","2020-10-10 00:03:46.958-04","2020-10-19T15:32:47.691Z","[]"
1697,1438,"Windows builds in the Gitlab CI/CD pipeline","* Adds the same builds as we currently have on Appveyor to the GitLab CI/CD pipeline
* When merged, will deploy binaries to https://www2.graphviz.org/Packages/development/windows/10/
* Includes an upgrade from Visual Studio 2015, Windows SDK 8.1 to Visual Studio 2019, Windows SDK 10.0
* Test run that deploys to https://www2.graphviz.org/Packages/experimental-development/windows/10/ can be seen [here](https://gitlab.com/graphviz/graphviz/-/pipelines/159672916). The Appveyor builds fail because Visual Studio 2019 is not supported there.
* When merged, the Appveyor builds will fail in master so want can't use them in parallel.
* Before merging I will prepare an update to the documentation

## Future enhancements deliberately not included
* Single source of truth for version numbering for autogen, CMake & MBuild (but !1440 provides this for CMake)
* Fix for https://gitlab.com/graphviz/graphviz/-/issues/1748
* Separation of Windows build and test jobs
* Windows Docker images with preinstalled prerequisites
  * Will speed up builds because no installations will be needed in the build jobs
  * Will remove the need for the git submodules containing dependencies","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1438","295817e55ebebb91be2262cca60868a69884247b","2020-06-24 00:01:04.873-04","2020-06-29T04:24:50.412Z","[]"
2067,1973,"remove build dependency on Perl","#2067.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1973","614456e621967a55e8f356f3b4dc256412cb2d57","2021-05-23 00:06:29.286-04","2021-05-29T03:58:39.961Z","[]"
2058,2114,"Cleanup useless expat referencing","Many of the tools referenced expat in the `cmd/tools/CMakeLists.txt` file, even though they actually do not use expat. Only two of the tools in this directory do actually use expat.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2114","33ccd7cd02dfa87ba6c40602572cc27f1eaa7949","2021-08-26 00:02:17.18-04","2021-08-26T16:09:27.603Z","[]"
2178,1916,"add sprintf-like helper","The function sprintf is generally considered unsafe to use in modern C. In the
Graphviz code base, its uses are slowly being replaced with safer alternatives
(#1950). However, the alternative code is frequently overly verbose and
counter-intuitive. This commit adds (hopefully) convenient alternative functions
that can be used to replace sprintf uses. The gv_sprint function is similar to
the GNU asprintf function with a different calling convention.

The tests added alongside follow the same strategy as used for testing
lib/vmalloc.

----

@steveroush, @truenorth, this is the function I proposed on #1950. Please let me know if it makes sense.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1916","6437e1535c7da1cb97fd215131c4bd92c60021fe","2021-04-23 00:08:09.101-04","2021-04-29T15:45:08.469Z","[]"
2204,2557,"more #2204 progress","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2557","d845bd79e5886991d87f0b1b6543267acd64f754","2022-04-03 00:03:32.479-04","2022-04-08T03:04:34.237Z","[]"
1832,1595,"configure.ac: Add e2k platform","Elbrus (also known as Elbrus 2000) is a Russian 64-bit LE VLIW.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1595","b15a77b19b455381091bb76383b03fd5f4376594","2020-09-29 00:08:53.337-04","2020-10-01T14:39:50.195Z","[]"
1793,2625,"pack: replace inline stack with generic implementation","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2625","be7ca42ca637afdae09f9b9051e8191083aed190","2022-04-22 00:02:45.276-04","2022-04-23T19:11:27.632Z","[]"
1750,1444,"WIP: Documentation enhancement; related to #1750","This MR reorganizes how man pages are installed, installs general guide PDFs on all platforms, only installs man pages on non-Windows systems, and installs PDF versions of the man pages only on Windows systems. More detail is provided in #1750. This has been tested with ZIP archives on both Linux Mint (Ubuntu-ish) and Windows 8.1. It should only touch man pages and PDFs and not affect code.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1444","a166a417a707b9f5e0516d6d645c47ba89879b37","2020-06-26 00:09:19.232-04","","[]"
1698,1345,"small fixes for larger graphs","Changes:
1. short -> int in rank values to avoid overflow
2. changes to cleanup1() to improve performance","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1345","ba59204bbb589d326504ba28b24b1c8a8b2fbe52","2020-04-19 00:03:09.003-04","2020-05-07T02:03:08.527Z","[]"
2089,2016,"work towards solution for round tripping GV→GXL→GV","This series starts addressing #517. It solves the GV→GXL part, but not the remaining GXL→GV part.

@truenorth et al, can I get some guidance on this? I have the below sort-of obviously-wrong outstanding changes in my working directory. They lead to the interesting but useless outcome on the #517 example of a label of `""<<TABLE><TR><TD>(</TD><TD>A</TD><TD>)</TD></TR></TABLE>>""`. I.e. the `gxl2gv` code correctly recognizes an HTML string, but the result is still `""` wrapped.

The (my) core problem here is that `gxl2gv` is constructing the Dot graph programmatically rather than as text. This is a good thing. But it calls `agxset` to add attributes. AFAICT this function assumes the attribute it is adding is a non-HTML string. There appears to be no equivalent to add an HTML string. Unpacking that a little… `agxset` unconditionally calls `agstrdup`, while in this case I want to call `agstrdup_html`.

Does this make sense and is my summary correct? If so, can you suggest a way around this?

```diff
diff --git cmd/tools/gxl2gv.c cmd/tools/gxl2gv.c
index f65e63fe7..573daaa8e 100644
--- cmd/tools/gxl2gv.c
+++ cmd/tools/gxl2gv.c
@@ -11,6 +11,7 @@

 #include    ""convert.h""
 #include    <cgraph/agxbuf.h>
+#include    <cgraph/sprint.h>
 #ifdef HAVE_EXPAT
 #include    <expat.h>
 #include    <ctype.h>
@@ -38,6 +39,7 @@
 #define        TAG_GRAPH       0
 #define TAG_NODE       1
 #define TAG_EDGE       2
+#define TAG_HTML_STRING 3

 typedef struct slist slist;
 struct slist {
@@ -535,6 +537,8 @@ startElementHandler(void *userData, const char *name, const char **atts)
                ud->globalAttrType = TAG_EDGE;
            else if (strcmp(""graph"", atts[pos]) == 0)
                ud->globalAttrType = TAG_GRAPH;
+           else if (strcmp(""HTML string"", atts[pos]) == 0)
+               ud->globalAttrType = TAG_HTML_STRING;
        } else {
            ud->globalAttrType = TAG_NONE;
        }
@@ -636,6 +640,12 @@ static void endElementHandler(void *userData, const char *name)
        case TAG_GRAPH:
            setGraphAttr(G, name, value, ud);
            break;
+       case TAG_HTML_STRING: {
+           char *angle_wrapped = gv_sprint_or_exit(""<%s>"", value);
+           setAttr(name, angle_wrapped, ud);
+           free(angle_wrapped);
+           break;
+       }
        }
        free(dynbuf);
        ud->globalAttrType = TAG_NONE;
```","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2016","8ecb99749c242689b9ba63e3a5522a2d3ce42c46","2021-06-24 00:02:36.131-04","2021-07-06T00:15:27.332Z","[]"
1820,1561,"Fix gvedit usage + misc cleanup of gvedit make","The main purpose for digging into this was really to remove some unnecessary recompiles, but it ended up being a bit more. I would especially like @ellson to have a look at the ""Avoid unnecessary recompile of gvedit mocables"" commit to see if there's a downside that I might have missed.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1561","8fb5a0cecc0bedfefc43f1f60629f4e4a4d5a7c1","2020-09-07 00:06:05.003-04","2020-09-11T05:54:51.429Z","[]"
1801,2731,"Proutespline: remove exception-style control flow","Memory allocation failures now result in a conventional return, propagated up
through the call stack.

Github: #1801","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2731","3d3df1808ef472c7c324ed3da87a2432c270d6dd","2022-06-28 00:09:34.141-04","2022-07-03T05:49:32.764Z","[]"
1915,1704,"remove CentOS 6 from CI","CentOS 6 was EOLed in December 2020. Closes #1915.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1704","f35fb0716e211592140dc0289a3778e85d111a35","2021-01-19 00:02:07.49-05","2021-01-23T01:57:26.570Z","[]"
1718,3014,"slightly accelerate circo","This series replaces the CDT-based `deglist` in lib/circogen with a lib/cgraph/list.h-based data structure. Apart from de-duplicating some code, this has the following notable effects:

  1. The list of nodes is now stored as a contiguous array rather than a linked
     list, improving performance characteristics.

  2. The list no longer stores degrees, only node pointers. While the code using
     this list does modify node degrees, it does not seem to modify the degree
     of any node while it is present in the list. So looking up a node’s degree
     through the node itself saves some memory overhead.

  3. Nodes are inserted into the list and _then_ the list is sorted, rather than
     maintaining an always-sorted list. This is a slight performance
     improvement.

  4. The list is sorted by degree _descending_ now instead of ascending. This
     enables operating on the list as a stack, making the pop operation more
     efficient.

Using `circo -Tsvg -o /dev/null swedish-flag.dot` on the example attached to
#1718, we have the following:

```
  ┌──────┬───────────────┬───────────────┬──────┐
  │      │ before        │ after         │ diff │
  ╞══════╪═══════════════╪═══════════════╪══════╡
  │ 1718 │ 3m34s         │ 3m27s         │  -3% │
  │      │ 18MB peak RSS │ 18MB peak RSS │  -0% │
  └──────┴───────────────┴───────────────┴──────┘
```","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3014","2e9423add7f60b35d8ef7991838b2ab4820008c8","2022-12-26 00:09:18.424-05","2022-12-31T22:29:05.238Z","[]"
2164,2417,"CI: add Automake installation for macOS","Automake (and its dependent, Autoconf) are needed for Autotools-based Graphviz
compilation. They are currently available in the CI Gitlab macOS shared runner
environment and do not appear to be a dependency of anything installed by the
.gitlab-ci.yml `brew` steps, so I can only guess they are pre-installed in this
image. I have not been able to find any documentation confirming this, but I
have ruled out the possibility that they are originating from XCode or the macOS
base system.¹

This changes when moving from macOS 11 to 12. Automake and Autoconf are no
longer available by default. This commit makes the CI task for the macOS
Autotools build pass on macOS 12.

Gitlab: #2164

¹ The XCode 13 release notes mention nothing about Automake or Autoconf, and
  furthermore the macOS 11 build logs show Autoconf executing from a
  Homebrew-based installation path.

----

This fixes one of the issues that emerged in !2370.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2417","c42029d2f62efc3526cea5f86d825bb1f95dd0d9","2022-01-24 00:02:34.226-05","2022-01-27T09:31:18.845Z","[]"
1824,1533,"fix Pango plugin build on macOS","Compiling plugin/pango depends on the discovery of PangoCairo and its dependent
libraries which is handled by cmake/FindPangoCairo.cmake. This file was assuming
all libraries were available at default system paths, which is not true on e.g.
macOS when you install libraries via Homebrew or Macports. We now simply ask
pkg-config to find all necessary information for us (unless we are on Windows).

This also incidentally cleans up the following warning issued by CMake in CI:

```
  CMake Warning (dev) at C:/…/FindPackageHandleStandardArgs.cmake:272 (message):
    The package name passed to `find_package_handle_standard_args` (PANGOCAIRO)
    does not match the name of the calling package (PangoCairo).  This can lead
    to problems in calling code that expects `find_package` result variables
    (e.g., `_FOUND`) to follow a certain pattern.
  Call Stack (most recent call first):
    cmake/FindPangoCairo.cmake:20 (find_package_handle_standard_args)
    CMakeLists.txt:85 (find_package)
  This warning is for project developers.  Use -Wno-dev to suppress it.
```

----

This commit stems from [discussion on the forum](https://forum.graphviz.org/t/does-anyone-here-know-cmake/135/22). This doesn't seem to fully resolve the macOS problems, but it at least makes things less broken. I'll merge on 2020-08-27 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1533","b4f998c133566ef9cb416c085d1ce49e539bec30","2020-08-22 00:01:11.288-04","2020-08-27T14:44:09.973Z","[]"
1941,1742,"add Fedora to the noted list of downstream consumers","Related to #1941.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1742","f41eb7caf6193388fa14d5b23f7ae853ec37281b","2021-02-12 00:04:46.665-05","","[]"
1749,1509,"fix a couple of out-of-bounds reads and writes","This addresses #1676, and a second bug that was revealed by fixing the first one. I'll merge on 2020-08-15 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1509","fbefeb31989130c48b965cc9a2f0ad0cac07015c","2020-08-10 00:00:17.352-04","2020-08-15T17:38:25.625Z","[]"
1836,2083,"flip Smyrna default to disabled in the Autotools build system","This is step 1 of a 4 step plan to remove Smyrna:¹

  1. Default it to disabled.
  2. Disable it in CI jobs that build release artifacts.
  3. Remove build system support.
  4. Remove Smyrna code.

The current plan is to have ≥1 release in between each of these steps. This
should make backing out these steps straightforward if compelling reasons for
continuing to support Smyrna emerge.

The present change only affects users who build Smyrna using the Autotools build
system on Linux. Other environments are unaffected:

  - CMake build system: no support for building Smyrna (#1836).
  - macOS: Smyrna is disabled (#1854).
  - Windows: Smyrna is built but seems unusable (#1829).

Related, Smyrna is also not currently built on CentOS (#1834).

¹ https://gitlab.com/graphviz/graphviz/-/issues/1834#note_576332436","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2083","3b56e37a7850b9d7493af51979762fa9bf1e6583","2021-08-03 00:01:49.855-04","","[]"
1785,1555,"disambiguate #includes","This is part 1 of 5 of a patch series towards #1242 and #1785. None of the changes in this or the follow up parts are complicated, but there are a lot of them so I chose to split them up. They are:

1. disambiguate `lib/*/*.c` #includes (this MR)
2. disambiguate `cmd/*` #includes ([1785-2](https://gitlab.com/smattr/graphviz/-/tree/1785-2))
3. disambiguate `plugin/*` #includes ([1785-3](https://gitlab.com/smattr/graphviz/-/tree/1785-3))
4. disambiguate `tclpkg/*` #includes ([1785-4](https://gitlab.com/smattr/graphviz/-/tree/1785-4))
5. disambiguate `lib/*/*.h` #includes and remove extraneous include paths ([1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5))

@ldionne.2, can you confirm the final end state, [1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5) resolves your libc++ compilation problem?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1555","3bc08ab64d92599a66d15f746d4c0364a7642175","2020-09-03 00:08:55.88-04","2020-09-10T02:43:38.496Z","[]"
2058,2341,"Add macro `GRAPHVIZ_LINK_STATIC` to allow static linking of all libraries.","In some scenarios, we may want to link graphviz statically, but the current code makes it impossible for us to do this on the windows platform. So I added a macro to support this feature. Currently, I have not added this feature to the build system. I’m not sure if this is worth supporting for the release of graphviz, but in my scenario, I do want to use it in this way. I would be very happy if this features can be merged and further improved, and I'm willing to provide further support for this.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2341","4a2b0516b975661ee23d1e9f1fff739c20de23e5","2021-12-13 00:01:15.301-05","","[]"
510,3073,"support an alpha channel when parsing HSV colors","Mysteriously c4205c6e implemented this, but only
for GVPR programs. As a result, full HSVA colors could be used in GVPR programs
but specifying an HSVA color in DOT required manually translating the color to
RGBA.

This change aligns DOT color parsing with how GVPR color parsing works.

Gitlab: closes #510<br/>
Reported-by: Ryan Schmidt &lt;gitlab@ryandesign.com&gt;","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3073","68da76f477c2329712cf09a68aac5e5d9a4633a9","2023-01-29 00:05:29.507-05","2023-01-29T15:29:31.611Z","[]"
1727,55,"introduce travis builds","I put together a travis build script for graphviz.

You will need to add ""Travis CI"" to your list of services in [settings](https://github.com/ellson/graphviz/settings/hooks)

Let me know what you think.

Fixes #48
","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/55","42e74508716f5d5450d62f7c0eb3d223b53420bc","2015-07-17 00:09:18-04","2017-12-21T10:42:38.150Z","[]"
2122,2149,"fix: write Graphviz build version to GRAPHVIZ_VERSION file instead of VERSION","C++20 standardizes a new `version` header.¹ A side effect of this is that
    Autotools-driven Graphviz compilation fails when using both (1) a C++20-capable
    compiler and (2) a case-insensitive file system:

      Making all in vpsc
      CXX      block.lo
      In file included from block.cpp:20:
      In file included from …/include/c++/v1/memory:667:
      In file included from …/include/c++/v1/type_traits:417:
      In file included from …/include/c++/v1/cstddef:37:
      ../../version:1:1: error: expected unqualified-id
      2.49.1~dev.20210907.1517
      ^

The core problem is that the root of the repository checkout (or unpacked
    tarball) is in the compiler’s include path in order to allow including
    `config.h`. But the generated `VERSION` file is also in this same directory.
    Nothing in Graphviz attempts to include the C++20 `version` header, but some of
    the other stdlib headers transitively include `version`.

To avoid this confusion, we rename Graphviz’ generated header.

Fixes #2122.

¹ https://en.cppreference.com/w/cpp/header/version","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2149","c188de232323285caabb7f96c5822dec2db99645","2021-09-08 00:01:46.361-04","2021-09-08T14:23:56.486Z","[]"
1854,2383,"add Mingle to the CMake build system","I thought I would post where I'm at with this, even though it fails CI.

Current blockers:
* Both Cygwin and Msys2 seem unusable right now. Chocolatey is failing to fetch these packages.
* Both macOS and 64-Windows CI environments do not seem to have libANN available
* Mingle on 32-bit Windows is erratic. When built using MS Build, it can run and return success. When built using CMake, it just segfaults.

Combining the above details into the relevant exemptions in ci/tests.py and rtest/test_tools.py was turning into a mess. Will revisit this later.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2383","c824d586363cc80dd872052ae37ad61930cb6bb9","2022-01-08 00:09:20.081-05","2022-03-19T21:54:38.175Z","[]"
2308,2058,"Add a very basic C++ API","This is the C++ API part of !2033 which was too large. The implementation has been modified according to the discussion in https://gitlab.com/graphviz/graphviz/-/merge_requests/2033#note_619077068.

The new C++ API supports creating a graph from DOT source, performing a layout of that graph and rendering it to a specified format.

An upcoming MR will add the layout construction overloads using rvalue refs discussed in that thread and an additional upcoming MR will add the SVG analyzer part of !2033.

Closes #2001.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2058","d57d5a12482a328cec277787c776c2e683ac92eb","2021-07-18 00:09:20.629-04","2021-08-07T06:49:46.910Z","[]"
2233,2634,"gvedit: minor cleanup","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2634","d6858d7f21ad58c3bb2a0907373dcab41dfaed1b","2022-04-25 00:03:20.16-04","2022-04-28T03:14:28.622Z","[]"
2154,2362,"convert mingle to C++","There's more that could be done here, but this gets some of the minimal stuff out of the way.

Related to #2154.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2362","87967d2389d25aa9f7c0f25a51d6c7ab2ad4cc42","2021-12-25 00:02:23.309-05","2022-01-04T16:53:59.064Z","[]"
1785,1595,"configure.ac: Add e2k platform","Elbrus (also known as Elbrus 2000) is a Russian 64-bit LE VLIW.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1595","b15a77b19b455381091bb76383b03fd5f4376594","2020-09-29 00:08:53.337-04","2020-10-01T14:39:50.195Z","[]"
1855,2327,"Fixes https://gitlab.com/graphviz/graphviz/-/issues/1855 where the SVG view...","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1855 where the SVG view setup needs more than two digits of precision, otherwise clipping may result.  Chris Korda further suggests ditching all truncation of floating point numbers in the back end.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2327","91277e62f1d9ac1972b239cf794824f6fe4cdc63","2021-12-06 00:04:02.802-05","2021-12-11T22:20:51.774Z","[]"
2307,2949,"fix misidentified gradient fills when using IDs","465cef702370966f17d27d455093cf69a651af9c fixed an issue where `id` attributes
were not propagated to SVG output. However unfortunately it broke references to
such attributes in fill gradients. This commit makes the corresponding
adjustment to the references, so they once again align with their targets.

Gitlab: fixes #2307<br/>
Reported-by: Ronny H","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2949","170bcca448a4534db32a52498ffbf37228260602","2022-11-13 00:05:43.476-05","2022-11-13T21:47:08.535Z","[]"
1786,2483,"enable 'png:gd' format on macOS with CMake","#1786","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2483","cccf5cf4612f334599a314365f411188a8be01eb","2022-02-28 00:02:40.747-05","2022-03-05T19:12:27.446Z","[]"
1376,1327,"Remove SVG title for anonymous graphs","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1376

A similar fix for other output formats was introduced in
80d6ed709b365d39fe63dd279d137749a7ae42c2.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1327","0cbb3d8ec6c090874efca12bc16be4e9e40cb4a1","2020-03-08 00:02:33.146-05","2020-03-30T17:41:02.594Z","[]"
1781,1494,"fix typo in clustg","Fixes #1781.

I'll merge on 2020-08-09 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1494","f39bd7be118d6dd9cedfbed6ad12ba463fdaabe4","2020-08-04 00:02:53.12-04","2020-08-09T16:21:49.973Z","[]"
1836,2540,"CMake: enable Smyrna on Linux","Following https://gitlab.com/graphviz/graphviz/-/merge_requests/2533 and https://gitlab.com/graphviz/graphviz/-/merge_requests/2537, this takes the final step towards enabling Smyrna in the CMake build system.

Note that this only enables it on Ubuntu in CI. CentOS enabling is probably not too much extra work. I didn't attempt Windows. I'm ready to admit defeat on macOS for now.

On macOS, the blocker is that I cannot get freeglut to link. A list of some things I have tried:
* swapping between Homebrew and Macports for installing the freeglut dependency
* `${GLUT_LINK_LIBRARIES}` instead of `${GLUT_LIBRARIES}`
* `${GLUT_glut_LIBRARY}` and various other internal variables from within FindGLUT.cmake itself.
* `target_link_directories`
* `set_target_properties`
* `link_directories`
* `target_compile_options`
* manually forcing `-L` options
* forcefully injecting various `pkg_config`-derived ldflags

I've exhausted what I can debug without access to Apple hardware. If macOS users want Smyrna, they can use the Autotools build system.

#1836, #1854","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2540","7c523da54bc4ec56a64e2d80e8dce29f6a0ebbde","2022-03-29 00:06:55.408-04","2022-03-30T01:20:49.881Z","[]"
1994,1887,"Fix AddressSanitizer: strcpy-param-overlap in gvconfig_libdir","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1994.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1887","3bdf3dc8d9a9700d9d837409eec438591cf4dcbc","2021-04-04 00:05:52.453-04","2021-04-09T18:08:30.943Z","[]"
1614,1571,"Allow deterministic ordering of subgraph","Addresses #1614","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1571","685d3b33a18e5a39b81a4657963465024c04f2a1","2020-09-11 00:03:38.543-04","","[]"
2152,2292,"some configure.ac clean up","A couple of things I came across while investigating #2152.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2292","94bd98ad40e7deaca297d60e72af03a157dec8c5","2021-11-20 00:07:23.815-05","","[]"
2066,2004,"only enable -Wtrampolines and -Wlogical-op for compilers that support them","This fixes an issue where these flags were enabled for Clang, despite it not
supporting them. This did not fail the build, but produced a lot of noisy
warning output about unsupported flags. Closes #2066.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2004","6409d7cd59611974e882c1e6bc0cae82ff4b2bf7","2021-06-19 00:05:50.561-04","2021-06-26T16:39:45.360Z","[]"
1613,1464,"Workaround for unresolved symbols in libcommon on OSX","(cherry picked from commit 992e6c2693c16c2a056efe849c612d0e1ee6d85e)
Adds `-fno-common` option when compiling `libcommon` on OSX. Weak fix for graphviz/graphviz#1613; see discussion.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1464","765d2ce8c515fc3683caa26082aed4a14777887d","2020-07-13 00:08:20.47-04","2020-07-15T00:17:30.035Z","[]"
1242,1332,"lib/cgraph: include empty malloc.h from subdir include","Hi, 

Having malloc.h directly in cgraph/ means that this file is found by all
other libs with `-Ilib/cgraph/`. Since it is only needed by cgraph we
can move it to a subdirectory and add `-Iinclude/` to the cgraph
Makefile only. If other libraries and plugins picks up the empty
malloc.h it causes problems on some systems when compiling for example
lib/sfdpgen/PriorityQueue.c and plugin/visio/VisioGraphic.cpp.

This seem to be related to issue https://gitlab.com/graphviz/graphviz/-/issues/1242, which discusses malloc.h as well as memory.h. 
I have not noticed any problems with memory.h though.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1332","7d2d4c70f224129e19d35b23bd86a8a4c3633aef","2020-03-28 00:04:04.194-04","2020-04-06T19:22:28.564Z","[]"
1882,1691,"Check for empty strings in tp and hp.","This was a regression in !1527.

Fixes #1907","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1691","a941e5378586f1fc60f5b55c345cd27828b33634","2020-12-16 00:09:36.595-05","","[]"
1734,1437,"fix: remove generated patchwork.1.pdf during distclean","As discussed on #1734, this omission looks to have been a typo. I'll merge this on 2020-06-30 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1437","fdad46b7e785f1f74378eb43b57f266c711c4149","2020-06-23 00:04:30.593-04","2020-06-30T14:06:50.008Z","[]"
1950,1833,"some clean up of string handling","The main thrust of this MR is removing calls to `sprintf` (#1950), but it includes some other clean up opportunities I encountered along the way.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1833","f43db5e2293618361ca39ddf19dd8bc4384a5ee9","2021-03-07 00:08:36.664-05","2021-03-16T04:46:43.643Z","[]"
1477,1441,"CMake subproject support; related to #1477","This changes `CMAKE_SOURCE_DIR` to `CMAKE_CURRENT_SOURCE_DIR` to allow graphviz to be built as a CMake subproject; see #1477.

I scanned for use of `CMAKE_SOURCE_DIR` and `CMAKE_BINARY_DIR` in all `CMakeLists.txt` files and only found `CMAKE_SOURCE_DIR` used in the top-level `CMakeLists.txt`. I tested by building a simple project in the parent directory of the graphviz project root using [this simple CMakeLists.txt config](/uploads/08c111f9826e0d26f8efe2c7e5103263/CMakeLists.txt). The project built without obvious errors on Windows and the change does not seem to affect the normal build process.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1441","6f26b827569b9be9c891b60d144cc814a39ec304","2020-06-25 00:09:26.044-04","","[]"
1973,2305,"misc cleanup","Some opportunities I noticed while looking at #1973.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2305","be17a40621ad781e012d095a5c62f453db95989c","2021-11-26 00:04:01.602-05","2021-12-02T16:45:05.575Z","[]"
2002,2035,"Add a C++ test infrastructure","The foundation for #2002.

Spawned of from https://gitlab.com/graphviz/graphviz/-/merge_requests/2033 after discussions in https://gitlab.com/graphviz/graphviz/-/merge_requests/2033#note_619081872. ~~I haven't dealt with the feedback that I've already gotten on https://gitlab.com/graphviz/graphviz/-/merge_requests/2033, hence this MR is WIP~~.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2035","40c3c1d66ddf3669013e4007279cc42a0612557b","2021-07-06 00:08:18.131-04","2021-07-07T05:18:08.219Z","[]"
2204,2553,"gml2gv: remove unused unistd.h #include","Gitlab: #2204","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2553","2714df1e6131b18bde6f60952b1e5150941d175d","2022-04-02 00:08:26.592-04","2022-04-04T15:52:49.068Z","[]"
1907,1527,"use a dynamic buffer in strdup_and_subst_obj0","As discussed on !1509, this rewrites some manual calculation and allocation code to use a dynamically expanding buffer. This simplifies the code and makes it more robust against bugs like that fixed in fbefeb31989130c48b965cc9a2f0ad0cac07015c.

I'll merge on 2020-08-21 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1527","31bab037c9bfde3bd18e06b5ab878c09de265ccf","2020-08-15 00:06:35.924-04","2020-08-21T14:34:54.075Z","[]"
517,2034,"fix round tripping GV→GXL→GV","This is the other half of !2016, the solution for #517. Following these changes, translating an HTML-like label through `gv2gxl` and then back through `gxl2gv` preserves its HTML-like-ness.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2034","38763516885bd90b5e1b6806a002e81aa2e75f3d","2021-07-06 00:02:13.365-04","2021-07-11T23:51:24.937Z","[]"
1048,3039,"remove webdot","Gitlab: closes #934, closes #1048, closes #1131","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3039","55494ef8efc4e7046a0fca57019dab99b8e44ab1","2023-01-05 00:06:07.748-05","2023-01-05T02:50:39.671Z","[]"
2102,2114,"Cleanup useless expat referencing","Many of the tools referenced expat in the `cmd/tools/CMakeLists.txt` file, even though they actually do not use expat. Only two of the tools in this directory do actually use expat.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2114","33ccd7cd02dfa87ba6c40602572cc27f1eaa7949","2021-08-26 00:02:17.18-04","2021-08-26T16:09:27.603Z","[]"
131,1841,"make PIC plugin generate valid code","This patch series fixes a 6 year old issue (#131) wherein the PIC back end generated invalid code. There was a fair bit of guess work involved here because I (in agreement with Steve's description of this issue) have very little idea what the intention of the PIC back end code was. It produced broken code for every possible input, indicating it has probably never been tested or used at all. The changes in this MR are my best guess at what was intended. The output is now accepted by tools like GNU PIC.

CC @steveroush","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1841","afa2ae63ef4ccd3fe0a87e6e3883cc333f613b2e","2021-03-15 00:07:25.069-04","2021-03-21T04:42:11.552Z","[]"
2300,2923,"remove dead code in graphml2gv; add a #2300 test case","The code in the last branch in `endElementHandler` was dealing with a closing
`</attr>` tag in the input GraphML. However, the preceding `startElementHandler`
callback rejects an opening `<attr>` tag. So there is no way to reach this
closing logic. This change removes not only the local unreachable code but
several transitively unreachable functions.

As an aside, this was only discovered while trying to construct a test case to
provoke #2300. One path to `dict_relabel` is through `graphml2gv`, by handling a
closing `</attr>` tag. So I looked online for sample GraphML using `attr`. I
could not find any. So I went to the GraphML specification¹ and there discovered
`attr` is not a valid GraphML tag. So I thought, fine, I will figure out how
`graphml2gv` expects this non-standard tag to appear. And that is when I
discovered none of this logic is reachable.

This does not appear to be the result of changes. The very first revision of
`graphml2gv`, 1d28d7d2b4d2b2551bd1f432aa175f54a69364a4, seems to have this
limitation already. I can only conclude this was copy-pasted from gxl2gv without
taking into account the differences between GXL and GraphML.

I still have not deciphered exactly what the fix to #2300 should be.

Gitlab: #2300

¹ http://graphml.graphdrawing.org/xmlns/1.1/graphml.xsd","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2923","2aa046945954e17a50708894aa551c0c82a16b16","2022-10-22 00:08:28.135-04","2022-11-02T04:38:17.373Z","[]"
2291,2894,"Avoid uninitialized CMake GETOPT variable warnings","Only access GETOPT_INCLUDE_DIRS if GETOPT is found.

Fix a few warnings with --warn-uninitialized like:

```
CMake Warning (dev) at cmd/gvmap/CMakeLists.txt:20
(target_include_directories):
  uninitialized variable 'GETOPT_INCLUDE_DIRS'
```

Towards #2291","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2894","7c709e97c641dc8fd314dce4d9ed1a44364fd42b","2022-10-08 00:03:56.484-04","2022-10-12T09:56:53.458Z","[]"
1779,1487,"WIP: Replace rtest ksh with pytest, addresses 1779","`test_rtest.py` is a slightly cleaner modification of `test_rtest2.py` which runs the tests originally listed in `rtest/tests.txt` and compares the results. Unified diff listings are produced for text output, difference images are produced  for image files (only tested with `.png` so far).

A few outstanding issues:
- I've deferred adding text filtering until more tests pass and there's a better notion of what 'noise' should be filtered out
- It would be nice to have standard default values (i.e. a naming scheme) of input and output directories plus a standard method of specifying the reference directory and the path to the dot executable.
- `rtest2/TESTS.json` should be restructured to allow one script to handle both sets of tests; not sure it's wise to store literal graph input in JSON due to the amount of quote-escaping needed

This is marked as a WIP for two main reasons:

First, the format of `tests.json` needs review for general applicability. What else does it need? Ability to skip tests by platform? Fields for gitlab issues (references for regression tests)?

Second, it's still written as a standalone script that can be driven from pytest. I'm happy to more tightly integrate this with pytest but I need some guidance or sample code. As it, it works under pytest but the output is not nearly as terse or useful as the TAP output. A fair amount of hoop-jumping was needed to pass in the reference directory location and the path to the dot executable; there has to be a better way of driving this via pytest than what I'm doing.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1487","e4b780d0822f933cf40e8c335905b514f6c830d9","2020-07-29 00:04:01.945-04","","[]"
1469,1309,"[macOS] Make GraphViz.app a self contained package","Changes over the graphviz GUI build to create a self contained application package that can be copied and installed on any Mac.","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/1309","d394abaaeb3700a09fa64e4a0cb44fa6b813038e","2019-03-18 00:04:34.098-04","","[]"
2204,2554,"GTK plugin: remove unused code and #includes","This file claims to be generated code that should not be edited, but that clearly has not been observed in the past. With that in mind, we may as well remove this unused code reducing compiler warnings and library bloat.

Gitlab: #2204","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2554","3f9b371655ac82706414ef570eb95b381bcf9ed3","2022-04-02 00:04:25.634-04","2022-04-05T03:01:00.932Z","[]"
1984,1857,"fix incorrect reference counting of interned HTML strings","This typo meant that, instead of masking the reference counting bits, this check
was also including the HTML bit (bit 31). As a result, interned HTML strings
would never be freed. This was found by an introduced -Wlogical-op warning when
building an upcoming change with GCC 8.3.0.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1857","5036c973a1059dec30a67545da0eaed054f7cf1e","2021-03-20 00:07:16.2-04","2021-03-29T00:36:26.760Z","[]"
2173,2380,"Unify storage-class declarations in cgraph headers with Graphviz standard","The second step after !2376 towards making storage-class declarations follow the Graphviz ""standard"" as described in https://gitlab.com/graphviz/graphviz/-/issues/2058#note_678679545.

The first step was !2378.

Related to, but not necessary for #2058.

Towards https://gitlab.com/graphviz/graphviz/-/issues/2173.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2380","59aeebd8448a18e0a2ca3f829b8f21e2c72b3cb3","2022-01-05 00:05:46.675-05","2022-01-09T09:40:58.151Z","[]"
1951,1784,"add pylint job","This MR adds a pylint job to the CI workflow:
- adds a new stage ``lint_and_format`` which is used in this MR for pylint, but is meant to gather whatever tools might come (https://gitlab.com/graphviz/graphviz/-/merge_requests/1743).
- the pylint jobs exits SUCCESS, although it would fail if run without ``--exit-zero``, but this MR should be kept small

The next steps related to this MR are more Python cleanups:
- fix pylint errors
- fix formatting using black

See https://gitlab.com/graphviz/graphviz/-/merge_requests/1743","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1784","383ec8753b8007d26fc4f6eb51c61b6d8b71d12e","2021-02-20 00:08:26.147-05","2021-02-25T15:45:28.565Z","[]"
1950,3121,"final sprintf removal steps","This doesn’t fully remove `sprintf` usage, but at least takes care of all the remaining instances for which it is practical to do so.

Gitlab: closes #1950","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3121","326bb79f787184e3bd3c4ae17d7ad8739c6383d0","2023-03-20 00:04:51.685-04","2023-03-22T03:08:25.127Z","[]"
1793,2626,"dotgen: replace inline stack with generic implementation","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2626","7f597bfcc667687f712598d24f4e8d19f662e32f","2022-04-22 00:02:57.936-04","2022-04-23T14:58:50.111Z","[]"
1829,1592,"Add tools test","The overall goal of this MR is to add extremely basic testing of all (to me, to Ubuntu 18.04 autotools and to Windows MSBuild) known tools in the Graphviz suite. What is tested is that it is possible to start the tool and have it report its usage. In order to be able to achieve this, usage was added to some tools where missing and fixed in some tools where broken. No issues were written on these minor bugs, but CHANGELOG entries has been added for all of them.

Additional changes included in this MR that are not strictly necessary, but related and stumbled upon while working on it are:
* Add archiving of test report also from CI tests on Windows
* Fix apparently incorrect indentation disturbing understanding of changed functionality.
* Fix edgepaint -o option

Additional necessary fix:
* Fix gvmap.sh to be executed by the correct interpreter (ksh)

This MR stands on it's own feet, but the real reason for doing it now is to have better testing before dealing with https://gitlab.com/graphviz/graphviz/-/issues/1820.

Tools that do not exist or for some reason is broken for a particular combination of OS and build system are skipped and the code, commit messages and skip messages contain references to issues describing what the problem is.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1592","3ee3e2df9101be7f02506d561282280556e564b2","2020-09-26 00:01:33.365-04","2020-10-02T14:29:45.305Z","[]"
1757,1456,"clean up unused parts of vmalloc","These changes fix #975 and #1424, as well as being a step on the way to fixing #1603 and #1757. A number of unused modes are removed, simplifying this significantly in preparation for delegating to the system allocator (`malloc`). Moving towards simply calling `malloc` to back vmalloc is roughly the approach @markhnsn suggested on [the forum discussion](https://forum.graphviz.org/t/some-vmalloc-questions/124). I've attempted to do these changes in a fine grained way. Though the diff is large, there's nothing particularly complicated going on. Hopefully each commit is comprehensible in isolation.

I'll merge this on 2020-07-11 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1456","34830836f4753e590685f5ce1f95ff9624bda4ad","2020-07-06 00:08:40.766-04","2020-07-11T17:36:15.850Z","[]"
1242,1488,"make sfio #includes unambiguous","This MR contains a baby step towards #1785 and #1242. Posted to get some CI and code review of the direction before proceeding to modify the rest of the libs the same way.

The Graphviz tree currently contains libraries with the following structure:

```sh
lib/foo/Makefile.am      # sets `AM_CPPFLAGS = -I$(top_srcdir)/lib/foo`
lib/foo/a.h
lib/foo/b.h              # contains `#include ""a.h""`
lib/foo/c.c              # contains `#include ""b.h""`
```

This MR alters lib/sfio to have something more like the following:

```sh
lib/foo/Makefile.am      # sets `AM_CPPFLAGS = -I$(top_srcdir)/lib`
lib/foo/a.h
lib/foo/b.h              # contains `#include ""a.h""`
lib/foo/c.c              # contains `#include <foo/b.h>`
```

The eventual end state I'm aiming for in the future is:

```sh
lib/foo/Makefile.am      # sets `AM_CPPFLAGS = -I$(top_srcdir)/lib`
lib/foo/a.h
lib/foo/b.h              # contains `#include <foo/a.h>`
lib/foo/c.c              # contains `#include <foo/b.h>`
```

As discussed in #1785, the overall motivation here is for includes to be unambiguous and avoid colliding with system headers.

This MR also includes incidental clean up of spurious lib/sfio dependencies of lib/ast and lib/vmalloc.

I'll merge on 2020-08-06 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1488","4cef316f2db6338a9c5b1b1782e135f7b98e393b","2020-08-01 00:05:07.601-04","2020-08-06T14:16:41.330Z","[]"
2179,2237,"Improved fallback font metrics","This is my first contribution to Graphviz, so please let me know if there are contribution or style guidelines somewhere that I haven't found.

Graphviz can be quite difficult to build with a textlayout plugin on some platforms (e.g. Graphviz Online), so there is a fallback method for calculating the width of a piece of text: Each character's width is retrieved from a hard-coded lookup table for the given font. Currently, there are only lookup tables for Times, Arial and Courier, and even those tables don't contain values for bold and italic variants. So when outputting, for example, an SVG with no text-layout plugin, Graphviz doesn't know wide to make the nodes for most fonts and variants:

![before.svg](/uploads/f33d4ae0cc973cdccc1676381ff4ce5f/before.svg.png)

So, I've added lookup tables for a bunch more fonts, including bold and italic variants. And I've standardised the logic a bit for handling metrically-equivalent fonts (e.g. Helvetica and Arial can use the same lookup table).

![after.svg](/uploads/9869e40acf3d790e9fb0cc8d470d9675/after.svg.png)

There's still some aspects which aren't handled well:
- Non-ASCII characters
- Kerning (though this make surprisingly little difference)

One obvious caveat of the lookup table approach is that as we add more fonts, we increase the size of the compiled binary. Approximately 1 kiB is used per font family. For the builds I'm doing (dot statically linked with minimal plugins, 1.6 MiB), that's a compiled binary size increase of <0.1% per font family.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2237","7aa0dcc03ea20b544b2463d97fe4a78af699589c","2021-10-18 00:02:25.475-04","2021-10-30T16:01:09.644Z","[]"
1768,1471,"remove Cgraph test fragments","Closes #1768. I'll merge this on 2020-07-24 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1471","33a9b80411e5623e2585b4379f159a22f3322342","2020-07-18 00:09:49.217-04","2020-07-25T20:08:17.334Z","[]"
1951,1792,"Revert ""Revert ""Only run macOS CI on graphviz/graphviz repo""""","This reverts commit 77c3b048f198798791193a028a77bf903a5b325e.

And replaces the variable with something that doesn't sound like a
GitLab predefined environment variable, to avoid surprise.

Towards #1951

https://docs.gitlab.com/ee/ci/variables/predefined_variables.html","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1792","1b3c4cc2b48c58d01619c43e752c8394cae3d9c1","2021-02-22 00:06:02.12-05","2021-02-22T21:14:10.354Z","[]"
2317,2976,"remove use of '$<' in Makefiles","This is a GNU Make extension that is not supported in BSD Make.

This is the final piece of NetBSD changes. With this plus https://gitlab.com/graphviz/graphviz/-/merge_requests/2974, Graphviz can be successfully compiled and installed on NetBSD.

Gitlab: closes #2317","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2976","3e7ee377847b18bee39d2125d1e6c4e643e2cce0","2022-11-25 00:08:06.124-05","2022-11-27T20:27:24.710Z","[]"
1785,1501,"make lib/ast/*.c #includes unambiguous","This is the next baby step towards #1785 and #1242, following on from !1488. I also cleaned up some other stuff I noticed while driving by.

I'll merge on 2020-08-12 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1501","dcc5537ce3242ebfd6b8195c7950cfe40c1fd121","2020-08-07 00:07:25.928-04","2020-08-13T02:30:59.054Z","[]"
1800,1552,"WIP: Fix segmentation fault with neatopack.c","Fixes two bugs that caused #1800 and adds a workaround for the third. It's WIP because:

1. I really would like to get feedback whether you think that the first two bugfixes are the right way to fix those problems.
1. The third bug is worked around since I cannot possibly understand how it's supposed to work and I would like to have suggestions on how it should be fixed properly.

Se my commit messages for (a few) details. I would especially appreciate if also @emden @truenorth or @ellson could give me your thoughts on this since I haven't even understood what the testcase does, not to mention what the overall functionality of the software is. I feel like I am a laparoscopic surgeon who doesn't know if he is operating on a human or on a squirrel. Or on a sea cucumber for that matter.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1552","0ecf92ef11d8a41521b073a6f42a3089edf85254","2020-09-01 00:04:15.5-04","","[]"
372,2910,"Fix issue 372 for dot arrows","Following !2701 and !2907, this MR fixes #372 also for dot shaped edge arrows.

Towards https://gitlab.com/graphviz/graphviz/-/issues/372.

Below is a list of node shape families and arrow types to show which are fixed and not by this and previous MRs.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [ ] tee
- [x] box
- [ ] diamond
- [x] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2910","1dd46de1c6bbaa36ada74dfdca84986049849516","2022-10-14 00:04:54.486-04","2022-10-18T19:58:13.839Z","[]"
1931,1732,"Stable Release 2.46.1","I think we should cut a new release to get the fixes for regressions !1723 and #1931 out.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1732","dce678aa257c369c4341153d272142d1c50f7b1b","2021-02-06 00:01:40.961-05","2021-02-13T17:02:13.715Z","[]"
2297,2933,"Fix issue 2297 and 372 for cylinder node shapes","Following !2701, !2907, !2910, !2914 and !2929 , this MR fixes #372 also for the 'cylinder' node shape. The same fix also fixes #2297.
 
Towards https://gitlab.com/graphviz/graphviz/-/issues/372.

Below is a list of node shape families and arrow types to show which are fixed and not by this and previous MRs.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [x] tee
- [x] box
- [x] diamond
- [x] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [x] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2933","a8af2472552ff485849417013b5ee8779c5c77ad","2022-11-04 00:07:26.775-04","2023-02-25T08:42:55.402Z","[]"
2053,1940,"Add Ubuntu 21.04 jobs to CI","Resolves https://gitlab.com/graphviz/graphviz/-/issues/2053.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1940","5f6a0df735ea110e874df2f527cd73fa0a3d37a0","2021-05-02 00:08:48.585-04","2021-05-10T18:37:48.380Z","[]"
1828,1577,"Fix failure to create .pdf files with autotools","If neither ps2pdf nor pstopdf is present on the system, the build
fails even if the .pdf files exist. The reason is that the .ps
files are created on the fly, and they are more recent than the
distributed .pdf. Makefile then runs ""false <something>"", which
obviously fails.

Setting PS2PDF to ""true"" is not a solution because we do not
want to ignore when the .pdf file are really absent.

This patch makes running $(PS2PDF) conditional, but still
imposes the .pdf files to be generated when running ""make dist"".

Fixes #1763","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1577","b7be7c0913d27d483e1dc490b5ade301dc95730e","2020-09-15 00:01:46.742-04","2020-09-22T00:03:32.868Z","[]"
975,1453,"remove legacy malloc.h stub","This partially deals with #1242. Here we remove malloc.h that is no longer required because Bison does not include malloc.h in the configuration Graphviz runs it in.

I'll merge on 2020-07-09 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1453","59bf93da69561600015ee3f2b747691d52228188","2020-07-03 00:00:10.51-04","2020-07-10T00:46:54.749Z","[]"
2057,1912,"Fix for uninitialized-memory-read in call_tri() that would occur after...","Fix for uninitialized-memory-read in call_tri() that would occur after delaunay_tri() returned NULL and never set numberofedges to anything","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1912","aeb0769851ddf5cc4f1bf21fa45cb0c0ea81afca","2021-04-20 00:01:37.781-04","","[]"
1593,2106,"Fix CMake options and add minimal build","This MR fixes a number of issues I discovered while working on https://gitlab.com/graphviz/graphviz/-/issues/2102 that are mostly unrelated to MinGW. I spawned it off from an upcoming MR to make that MR a little bit smaller.

Only one of the commits is actually a step towards https://gitlab.com/graphviz/graphviz/-/issues/2102.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2106","f0ce360a3d7bdd41b9d0d94fbd35725077a76c80","2021-08-17 00:07:33.048-04","2021-08-23T20:57:55.098Z","[]"
1757,1460,"replace vmalloc with system allocator (malloc)","This is the second half of !1456, that closes #1603 and #1757. As with !1456, I've tried to compose a set of fine-grained commits where every intermediate state passes the test suite and does not introduce any new compiler warnings. This change preserves the pool-style characteristic of vmalloc (see below), but the allocator method and discipline are no longer configurable. The system allocator (`malloc`) is always used.

I'll merge on 2020-07-17 if I don't hear objections.

# ""Why didn't you remove the vmalloc abstraction altogether and replace it with `malloc` and friends?""

It seems to me that lib/expr relies on using vmalloc as a pool allocator: it allocates blocks, which it never frees, assuming that a final call to `vmclose` will clean this up. To preserve the ability to do a final sweep clean up of an entire generation of allocations, I left the interface roughly the same.

# ""How does vmalloc accounting/metadata work now?""

An allocator instance, `Vmalloc_t`, tracks the heap pointers it has handed out in an array `allocated`. This array gets dynamically expanded, doubling each time it needs to be reallocated. `bestresize` and `bestfree` use the array to confirm pointers the allocator has previously given out. `vmclear` frees everything the allocator has given out (its ""pool"") and resets this array to its initial state. `vmclose` calls `vmclear` before deallocating the `Vmalloc_t` itself.

# ""How do I now debug memory leaks, use-after-free, etc?""

With conventional tools like [Valgrind](https://valgrind.org/) and [ASan](https://clang.llvm.org/docs/AddressSanitizer.html). This is actually somewhat easier than before, as vmalloc is now more transparent to these tools. Accidental memory leaks from a vmalloc caller are still hard to catch because a pointer to the allocation will remain in the `Vmalloc_t` metadata, so ASan/Valgrind will only flag this if the caller also fails to call `vmclose`. To make this more transparent, we would have to remove the use of vmalloc altogether.

# ""Does this affect performance?""

Honestly I have not profiled, but if anything I would expect this to accelerate Graphviz. The `malloc` implementations in libcs like Glibc and Musl have had decades of work put into optimizing them. While Graphviz' vmalloc seems like a solid design based on established strategies, it has had relatively little attention recently. Having said that, the existing vmalloc usages don't look like they're on hot paths to me, so I would not be surprised if there is no measurable difference.

# ""Why did you leave the `allocf`, `resizef`, `freef` function pointers when they're now always wired to the same functions?""

I guess I thought I'd quit while I was ahead :) We can certainly simplify this further in future.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1460","ff5a77bdc7670815b8c9ba7ce8d816b5113d952b","2020-07-12 00:00:39.706-04","2020-07-27T13:40:41.119Z","[]"
1773,1510,"Use preinstalled pytest instead of installing it in CI","One more step towards https://gitlab.com/graphviz/graphviz/-/issues/1759.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1510","fa8e3747a7d672688f7c658344aef9080764828a","2020-08-10 00:05:38.134-04","2020-08-10T06:44:49.588Z","[]"
1863,2597,"Change ""xlink:href"" to ""href"" in SVG generation for anchors.","Propose smallest possible patch for quick preliminary testing/dryrun for changing `xlink:href=` to `href=` in svg anchors.

See https://forum.graphviz.org/t/graphviz-svg-for-obsidian/1114

~~This is not for release.~~","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2597","916ae5e5c295afdea0b2f4e66e5a0d031e1e693e","2022-04-15 00:06:28.801-04","","[]"
1852,1629,"Fix tool usage on macOS and add macOS test jobs to gitlab CI","Fixes the -? option for all tools on macOS (#1852) and adds macOS test jobs to CI (#1827).","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1629","7a6da52abca39ce3e689291c458f75d23d658b7b","2020-10-21 00:02:29.662-04","2020-10-24T06:05:42.597Z","[]"
2058,2033,"WIP: Add a very basic C++ API","Baby steps towards #2001.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2033","4a28ca138f27e4fb796caedbd90078e9cbc5ecdb","2021-07-04 00:08:07.471-04","","[]"
1943,1750,"Pull images from GitLab Container Registry in CI","GitLab's container registry is pretty well-integrated with building the images, easier than pushing to DockerHub.

Less usernames/passwords to manage too if we centralize on GitLab than if we use DockerHub too.

Towards #1943","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1750","a22bb903b90f33742b6e69d4b8a32e5ec2e0e9c1","2021-02-14 00:00:55.648-05","2021-02-14T04:56:15.783Z","[]"
2112,2131,"remove `make check` Python targets","The current Graphviz test suite is orchestrated via Pytest and assumes it is
dealing with an installed Graphviz (e.g. headers and libraries available in
expected locations). The legacy Autotools check targets gave the incorrect
impression that this was the current test suite and it was expected to pass. It
has not been possible to run these legacy test scripts for a long time.

This commit removes the legacy testing pieces to avoid future confusion. In
future it may be useful to plumb the current Pytest test suite to the Autotools
post-install test targets (`make installcheck`).

Closes #2112.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2131","6c74a1766c706eda78554a6c3182601364babd40","2021-09-01 00:01:06.381-04","2021-09-05T18:52:20.320Z","[]"
1444,1495,"fix edge attribute order confusion","Certain edge attributes are constructed in advance of their being seen in the
input because Graphviz knows it may need default values for them. Later, if seen
in the input, the values of these attributes are updated.

This all works fine unless the order in which these initially-defaulted edge
attributes appear in the input does not match the order in which the default
versions are constructed by Graphviz internally. In this case, the order in
which the attributes are seen in the input is used to construct a dictionary of
them, but the original copies are used to index into attribute values.

In the particular test case added in this commit,

  digraph {
    { rank=same; n1; n2 }

    n2 -> n1 [ headport=s, arrowhead=normal ]
  }

arrowhead was constructed with symbol ID 0 and headport was constructed with
symbol ID 1. But then the later parsing of these attributes resulted in a
dictionary where the headport value was in ID 0 and the arrowhead value was in
ID 1. Indexing into this dictionary with the initially constructed E_arrowhead
resulted in incorrectly returning the value ""s"". This caused a spurious error
'Arrow type ""s"" unknown' as well as incorrect graph output.

Fixes #1444. Note that this may just be one of several issues resulting from
using these initially constructed E_* symbols.

I'll merge on 2020-08-10 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1495","4e727ede4f5181c4650c4aa60427bef8b43d113d","2020-08-05 00:01:01.437-04","2020-08-11T01:35:45.864Z","[]"
1835,3037,"Autotools: discover libANN manually if ann.pc is missing","On Debian and Debian derivatives (e.g. Ubuntu) the libann and libann-dev
packages ship without an ann.pc file to support `pkg-config`. As a result of
this, `pkg-config` cannot find libANN and concludes it is not installed.

This change teaches the Autotools build system how to discover libANN manually
if the `pkg-config` technique fails. Note that we need to use `AC_CHECK_FILE`
instead of `AC_CHECK_HEADER` because libANN is in C++.

Gitlab: closes #1835","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3037","3faa5adc9ab57d480eed15951c0bc6cc18c4269f","2023-01-02 00:08:58.775-05","2023-01-03T01:52:28.533Z","[]"
1242,1555,"disambiguate #includes","This is part 1 of 5 of a patch series towards #1242 and #1785. None of the changes in this or the follow up parts are complicated, but there are a lot of them so I chose to split them up. They are:

1. disambiguate `lib/*/*.c` #includes (this MR)
2. disambiguate `cmd/*` #includes ([1785-2](https://gitlab.com/smattr/graphviz/-/tree/1785-2))
3. disambiguate `plugin/*` #includes ([1785-3](https://gitlab.com/smattr/graphviz/-/tree/1785-3))
4. disambiguate `tclpkg/*` #includes ([1785-4](https://gitlab.com/smattr/graphviz/-/tree/1785-4))
5. disambiguate `lib/*/*.h` #includes and remove extraneous include paths ([1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5))

@ldionne.2, can you confirm the final end state, [1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5) resolves your libc++ compilation problem?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1555","3bc08ab64d92599a66d15f746d4c0364a7642175","2020-09-03 00:08:55.88-04","2020-09-10T02:43:38.496Z","[]"
56,2973,"ortho: dynamically manage trapezoid structures","Ortho was calculating the number of trapezoid structures required and allocating this amount upfront. This calculation was wrong. Some inputs would exceed the number of calculated trapezoids and Graphviz would abort with an error message.

We could just empirically try bumping how the number of trapezoids are calculated. But this series instead pursues a more thorough fix where we remove upfront estimation altogether. Trapezoids are now allocated and appended on demand, their number limits only by available memory.

Gitlab: fixes #56, fixes #1880","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2973","51993bbc35a64d48c9f9be5fadd8bb8bf6201a47","2022-11-24 00:01:39.2-05","2022-11-30T05:03:33.291Z","[]"
2097,2439,"CI: redirect stderr→stdout on Windows during build","In CI, the Windows environments run ci/build_windows.py to orchestrate
compilation. This is run under PowerShell, which has the surprising behavior of
(1) hiding stderr and (2) considering any output to stderr a signal to abort the
running program. The combined effect of this is that benign CMake logging
statements like:

```
  message(WARNING ""hello world"")
```

abruptly terminate compilation with the baffling output:

```
  python : CMake Warning at cmake/FindGD.cmake:52 (message):
  At line:1 char:1
  + python ci/build_windows.py --build-system $env:build_system --platfor ...
  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      + CategoryInfo          : NotSpecified: (CMake Warning a...e:52
        (message)::String) [], RemoteException
      + FullyQualifiedErrorId : NativeCommandError
```

This behavior appears to be configurable, but it seems simpler to work around
this by avoiding any stderr output. The exit status of any build commands is
sufficient to signal failure.

Gitlab: #2097","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2439","9438821ae356ebd222d8d803510f351c01c8f80d","2022-02-11 00:06:38.375-05","2022-02-14T13:09:14.899Z","[]"
1943,1746,"Add CI building of all Docker images","Only when we edit their respective Dockerfiles.

Towards #1943","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1746","f2a98f9c8737d929554598ad637bb8f11e938680","2021-02-14 00:04:17.036-05","2021-02-14T04:06:07.295Z","[]"
1876,1489,"fix inconsistent iteration order over subgraphs","This is a second attempt at fixing #1767. There's actually two different issues fixed here:
* use of a potentially stale pointer in the Pango plugin
* subgraph iteration order dependent on heap pointers

This MR involved touching some code I only partially understand, so this could do with a careful review by others.

I'll merge on 2020-08-07 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1489","14be5169ef49faad0f30cd9d36cdd438e1739f77","2020-08-01 00:07:48.739-04","2020-08-08T02:17:43.737Z","[]"
1846,2029,"remove unused gvfwrite","The last use of gvfwrite was removed in
6e818420cf02ad01d9c976b69d49fb794a661f5e. But more problematically, this
function seems incorrect. By ignoring its size argument it will generate
surprising results if ever called with a non-1 size. Closes #1846.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2029","162d18d8d613eb6ad159f41dce01d581baad97a6","2021-07-01 00:06:06.483-04","2021-07-05T21:27:11.297Z","[]"
2202,2646,"Draft: restructure the release steps to do two branches at once","This is an attempt to avoid the current situation where there is a critical
window during which a human needs to babysit the CI pipeline for several hours
while making a release. After merging the release branch into `main`, there was
a vulnerable window where another maintainer could merge (or push) an unrelated
commit, resulting in two commits believing themselves to be the same official
release. This period was several hours long, while the release author waited for
the main pipeline to pass before merging the return-to-development-series
commit.

These changes to the process put the merge of the two MRs adjacent to each other
with no requirement to wait in-between merging them. This means the release
author can now post _both_ MRs and then return later to complete the release
when both pipelines have passed, without worrying about intermediate commits
arriving in `main`.

Gitlab: closes #2202","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2646","12a3fdac496d4b2312bfb0f1e93916b3091aaea8","2022-05-01 00:00:17.739-04","","[]"
2154,2401,"move lib/mingle/edge_bundling.c to C++","More progress on #2154.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2401","f74e615a609f57f10e37a7e292cd3f3ae568d6cb","2022-01-13 00:04:10.502-05","2022-01-15T17:12:51.440Z","[]"
2089,2023,"test cases for #2089","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2023","af11717053fe4230ba5e120231eefe6ddc0c8865","2021-06-29 00:06:17.242-04","2021-07-05T04:24:08.444Z","[]"
1793,2606,"gml2gv: replace 'liststk' stack with generic implementation","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation. This also introduces some missing allocation failure checks.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2606","d4a015d45b1ce8fb2c30fbadcf257c2ec8c76b28","2022-04-17 00:02:38.362-04","2022-04-18T03:09:10.984Z","[]"
1846,2547,"Xlib plugin, vimdot: Squash all warnings and enable in the CMake build system","#1836. And a couple of other minor commits.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2547","b9460d044aacc76f8fde557ba0587b4774bc1e41","2022-03-31 00:02:20.292-04","2022-04-02T22:46:33.227Z","[]"
1801,1893,"remove another use of setjmp/longjmp","More progress towards #1801.

This series is relatively clean and could serve as a template of how to do this. I.e. there's no other mess or clean up here; just concise granular patches towards removing a use of `setjmp` and `longjmp`.

I mention this in case anyone else wants to aid this effort. I looked at the history of #1801 and it's been a steady stream of commits for >6 months, with still more work to go. The remaining instances are the more tricky ones, but all the more reason that we need more eyes than just mine looking at this.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1893","acb4b3adb80da332c09e39c02d9f2df0399eabbe","2021-04-10 00:07:54.344-04","2021-04-18T01:09:32.332Z","[]"
1554,1509,"fix a couple of out-of-bounds reads and writes","This addresses #1676, and a second bug that was revealed by fixing the first one. I'll merge on 2020-08-15 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1509","fbefeb31989130c48b965cc9a2f0ad0cac07015c","2020-08-10 00:00:17.352-04","2020-08-15T17:38:25.625Z","[]"
2002,2042,"Add a CHANGELOG entry for the new C++ test infrastructure","I must have lost this commit in the large split-and-refactor of !2033 the other day.

Closes #2002 although the test suite itself currently is minuscule.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2042","c4132e6e8b9fbf707ccbc686aed2a2fcdc03379c","2021-07-08 00:04:44.12-04","2021-07-10T14:40:47.594Z","[]"
2058,1760,"fix multiple definitions of CDT variables under MinGW on Windows","Building with MinGW on Windows resulted in lots of build errors of the form:

  …/x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):
    dtdisc.c:(.bss+0x0): multiple definition of `Dtset';
    CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first
    defined here

The problem is that this environment defines `_WIN32`, so it sees the `__declspec`
alternatives for `CDT_API` in cdt.h. This is fine as GCC understands `__declspec`,
but it results in variable declarations in this header then missing the `extern`
qualifier. GCC’s semantics, in contrast to MSVC, interpret this as a definition
rather than a declaration.

The solution here is to *always* apply `extern` to these declarations, as MSVC is
happy with this as well. This is only addressing the immediate cause, and not
the longer term issue that `__declspec(dllexport)` and `__declspec(dllimport)` in a
Windows build should really be mapped to `__attribute__((visibility(""default"")))`
and `__attribute__((visibility(""hidden"")))` in a non-Windows build, not to `extern`.

Fixes #1940. Thanks to @Synoecium and @swaldhoer for guidance on this fix.

----

@synoecium, @swaldhoer, do you have a chance to review/test this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1760","88ca57327b090c4b0003f07e3bd243c95d7c95a4","2021-02-15 00:04:45.622-05","2021-04-24T16:27:24.371Z","[]"
1806,1553,"remove ad hoc name mangling for lib/expr/grammar.y","Following on from !1543, this is the second chunk of changes related to #1806. My original plan was to complete changes to all the remaining parsers in a single MR. However, I quickly discovered that the expression parser does some hacky (unintentional?) tricks that made these commits already complex enough for a single MR.

Specifically, what confused me along the way was:
* expr.h was interfering with a Bison symbol with the cryptic explanation ""`bison -pPREFIX misses YYSTYPE`"". I say cryptic because (1) Bison's prefix option does *not* miss `YYSTYPE` and (2) this parser was not even using this Bison option. This was added in 1c2bab8289f901c9981eca63f426291ade9b1836, a 10K line commit that leaves me none the wiser what it was referring to. One of the commits in this MR removes the interference.
* exgram.h contains remarks about tricks to remain compatible with Yacc. But exparse.y already uses Bison extensions that Yacc doesn't support anyway.
* The autotools build wraps the Bison-generated header in yet another header guard, `_EXPARSE_H`. Separately, exgram.h looks for this guard and defines it itself (!). The MSBuild build doesn't add this additional header guard, so maybe all this logic is simply unnecessary...?
* Similarly, the MSBuild build doesn't do any of the SFIO redirection. Maybe this is also unnecessary?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1553","abef81f7629f74c9fead56583ebd2b2b539a4010","2020-09-02 00:05:19.503-04","2020-09-08T14:56:27.042Z","[]"
1801,2817,"gvpr: fix: wrap members needing cleanup in a struct and outline","There is only one remaining `longjmp` call in the code base and we cannot easily remove it. So this MR takes a different approach to resolve #1801.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2817","11453c5fef652abfb751c6ee43b70b00b3efe6db","2022-08-28 00:03:11.145-04","2022-08-30T15:51:21.359Z","[]"
1759,1454,"gv_doc_template.tcl: Pass ""-gmt True"" to support reproducible dates.","While the code already uses `SOURCE_DATE_EPOCH`, it also needs to ensure
that the times are emitted in UTC/GMT, otherwise building on machines
configured with different timezones may result in different embedded
timestamps.

I forwarded this from
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=962021","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1454","0b94296ffd204f38cd4750d5016f8c41192b44ac","2020-07-04 00:03:19.891-04","2020-07-11T17:03:10.877Z","[]"
2338,3060,"sfio: make 'Sfio_t' definition entirely internal","The definition of `Sfio_t` was structured to give it a public part and a private part:

```c
  struct _sfio_s {
    … public members …

    _SFIO_PRIVATE; // ← only visible if sfio_t.h is included
  };
```

This works only as long as no user ever allocates a `Sfio_t` themselves. If they
do, they will allocate too few bytes, based on their view of the size of
`Sfio_t` missing its private members.

A side effect of link-time optimization is that the compiler can see through
this trickery and witness both with-private and without-private definitions at
once. Creating objects of this type or pointers to objects of this type is a
violation of C’s strict aliasing rule and the compiler can now see this. This
can cause the compiler to make unsafe optimizations, like concluding any code
involving `Sfio_t*` variables must be unreachable.

The safer way to do a public/private class like this is with two structs, the
private one containing the public one as a member:

```c
  struct foo_public {
    … public members …
  };

  struct foo_private {
    struct foo_public *public;

    … private members …
  };
```

Public API functions then accept `struct foo_public*` parameters and internally
convert them to `struct foo_private*` variables in order to access the
internals:

```c
  int foo_do_something(struct foo_public *foo) {
    // use something like the Linux kernel’s container_of
    struct foo_private *f = container_of(foo, public);
    …
  }
```

But instead of this, we can observe that the definition of `Sfio_t` does not
need to have any public members at all, and we can make the entire type private.
We need an exception for libexpr which reaches into sfio internals.

Gitlab: fixes #2338","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3060","99c2ef867f43ef7ee60190f55c723d74ff310512","2023-01-20 00:04:13.961-05","2023-01-22T00:16:52.725Z","[]"
2304,2584,"Draft: refactor test_2095: use gvgen instead heavy dot file","Generating graph for huge rtest/2095.dot file takes some minutes.
It is much more time than all other tests together!
The purpose of this test is just to test dot with graph
with more than 1000 nodes.
Refactored test with gvgen (with 1100 nodes) runs no more than seconds!

Benefits of using gvgen instead rtest/2095.dot:
- rtest and CI time is reduced in dozens of times
- reduced carbon footprint","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2584","86c25001406ba4c9070e04db963d20d7b6f2e06e","2022-04-11 00:03:44.604-04","","[]"
1331,1282,"Fix: copy pangoft2-1.dll with correct file name","A typo in gvplugin_pango.vcxproj caused pangoft2-1.dll to be copied as
pango2-1.dll. Fixes #1315.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1282","82610de2304838190d1416735e42e6e21cf0c349","2018-01-28 00:07:19.353-05","2018-03-02T12:11:29.758Z","[]"
1836,2537,"remove unused Smyrna icons","Like !2533, this is another subsequence of commits extracted out of my upcoming Smyrna CMake series for ease of review. This removes a number of unused files, to avoid having to replicate lots of unnecessary steps in the CMake build system.

related to #1836, #1854","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2537","5d4bdb6ce367e7347a50374185b42481f1c66d50","2022-03-27 00:02:40.92-04","2022-03-29T03:08:43.533Z","[]"
1871,2666,"gml2gv: fix: recognize integer 'penwidth' values","`gv2gml` would produce GML that `gml2gv` was unable to parse. The GML spec¹ is
imprecise about what is allowed, so lets be generous and assume integer values
are acceptable.

Gitlab: fixes #1871

¹ https://web.archive.org/web/20190303094704/http://www.fim.uni-passau.de:80/fileadmin/files/lehrstuhl/brandenburg/projekte/gml/gml-technical-report.pdf","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2666","f6458420abc060b8d990d72f789227932a56853c","2022-05-14 00:00:05.698-04","2022-05-20T02:13:15.771Z","[]"
2139,2481,"CI: skip package uploading and deployment steps on non-release revisions","Traditionally CI has uploaded release artifacts and packaged a “release” for
every single commit on the main branch. These inter-release packages were
intended for testing and internal deployment. As far as we aware these are no
longer used; all Graphviz developers build from source and do not rely on
Gitlab’s generic package repository.¹

This change rearranges deployment steps to skip uploading artifacts and
packaging if the current commit is not a proper release. This should slightly
accelerate CI and reduce Graphviz storage requirements, which are currently at
>800GB on Gitlab.

Gitlab: closes #2139

¹ https://gitlab.com/graphviz/graphviz/-/packages","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2481","0ff71daaf77a9be1e0663f264a569772be520ae9","2022-02-27 00:06:33.359-05","2022-03-05T16:09:47.274Z","[]"
211,1460,"replace vmalloc with system allocator (malloc)","This is the second half of !1456, that closes #1603 and #1757. As with !1456, I've tried to compose a set of fine-grained commits where every intermediate state passes the test suite and does not introduce any new compiler warnings. This change preserves the pool-style characteristic of vmalloc (see below), but the allocator method and discipline are no longer configurable. The system allocator (`malloc`) is always used.

I'll merge on 2020-07-17 if I don't hear objections.

# ""Why didn't you remove the vmalloc abstraction altogether and replace it with `malloc` and friends?""

It seems to me that lib/expr relies on using vmalloc as a pool allocator: it allocates blocks, which it never frees, assuming that a final call to `vmclose` will clean this up. To preserve the ability to do a final sweep clean up of an entire generation of allocations, I left the interface roughly the same.

# ""How does vmalloc accounting/metadata work now?""

An allocator instance, `Vmalloc_t`, tracks the heap pointers it has handed out in an array `allocated`. This array gets dynamically expanded, doubling each time it needs to be reallocated. `bestresize` and `bestfree` use the array to confirm pointers the allocator has previously given out. `vmclear` frees everything the allocator has given out (its ""pool"") and resets this array to its initial state. `vmclose` calls `vmclear` before deallocating the `Vmalloc_t` itself.

# ""How do I now debug memory leaks, use-after-free, etc?""

With conventional tools like [Valgrind](https://valgrind.org/) and [ASan](https://clang.llvm.org/docs/AddressSanitizer.html). This is actually somewhat easier than before, as vmalloc is now more transparent to these tools. Accidental memory leaks from a vmalloc caller are still hard to catch because a pointer to the allocation will remain in the `Vmalloc_t` metadata, so ASan/Valgrind will only flag this if the caller also fails to call `vmclose`. To make this more transparent, we would have to remove the use of vmalloc altogether.

# ""Does this affect performance?""

Honestly I have not profiled, but if anything I would expect this to accelerate Graphviz. The `malloc` implementations in libcs like Glibc and Musl have had decades of work put into optimizing them. While Graphviz' vmalloc seems like a solid design based on established strategies, it has had relatively little attention recently. Having said that, the existing vmalloc usages don't look like they're on hot paths to me, so I would not be surprised if there is no measurable difference.

# ""Why did you leave the `allocf`, `resizef`, `freef` function pointers when they're now always wired to the same functions?""

I guess I thought I'd quit while I was ahead :) We can certainly simplify this further in future.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1460","ff5a77bdc7670815b8c9ba7ce8d816b5113d952b","2020-07-12 00:00:39.706-04","2020-07-27T13:40:41.119Z","[]"
1770,12,"Update NSIS to support longer strings","This is required by https://gitlab.com/graphviz/graphviz/-/issues/1770.","merged","https://gitlab.com/graphviz/graphviz-build-utilities/-/merge_requests/12","4ed2f14d3bd24f665309e4e80c59b13946ae8e18","2020-08-26 00:05:34.657-04","2020-08-26T07:36:53.850Z","[]"
1613,3029,"CMake: Set HAVE_PANGOCAIRO to 1 if found","","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/3029","6c1049de1a746f2966cad8207fe9b886687c0c20","2022-12-31 00:09:40.677-05","","[]"
1477,2164,"fix inability to include and use gvc.h from a parent CMake project","When attempting to declare a dependency on gvc when using Graphviz as a CMake
     subproject, the include path necessary to compile gvc headers would not be
     propagated to dependent targets. The result would be a compilation error when
     the transitive includes of gvc.h could not be found.

To validate this change, create an empty directory and add the following
     CMakeLists.txt:

       project(foo)
       add_subdirectory(graphviz)
       add_executable(bar main.c)
       target_link_libraries(bar gvc)

Add the following main.c:

       #include <gvc/gvc.h>
       int main(void) { return 0; }

Clone Graphviz into the subdirectory 'graphviz'. Then the standard CMake steps:

       mkdir build
       cd build
       cmake ..
       make

Note that Graphviz dependencies and then 'bar' are correctly built.

I am not a CMake expert; this was written based on my best guess of what
     Graphviz should be doing according to the CMake docs. Assuming this is correct,
     other Graphviz targets probably need similar fixes.

Fixes #1477, #2109.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2164","dcc5ed93775b66339c14f297e35c91f1cf3dd43a","2021-09-15 00:00:01.212-04","2021-09-21T01:01:42.968Z","[]"
2211,2513,"Revert ""rewrite indexOf""","This reverts commit 84efe93d5c5a4da0e778dbf01ed8550d2d774fdf.

Gitlab: fixes #2211","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2513","51d787ece01fb4443db5eabd6932046b7b715dbc","2022-03-14 00:02:48.182-04","2022-03-19T18:40:04.116Z","[]"
1845,1611,"test case and changelog entry for #1845","~~This includes the commit from !1605. I'll remove the WIP tag and rebase after !1605 is merged.~~

Rebased and removed WIP.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1611","21205cb49bf670688665447f8bb2ab4fe2051971","2020-10-09 00:08:55.791-04","2020-10-15T03:10:39.159Z","[]"
2300,2939,"cgraph: fix mismatched 'agobjfn_t' callbacks","This takes care of the superficial #2300 problems. The more involved `dict_relabel` problem remains.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2939","f0d28f7609cb4fea6a7ee5393958642aa65b545d","2022-11-06 00:05:06.942-04","2022-11-10T17:36:01.789Z","[]"
2294,3101,"API BREAK: fix: make `sflag` and `eflag` 32-bit unsigned values","An arrow type is packed into 8 bits (see `ARR_TYPE_*` and `ARR_MOD_*`
constants). An array of 4 of these is packed into an “arrow flag,” values of
which are stored in various `flag` and `type` fields including `bezier.sflag`
and `bezier.eflag`.

There were two main problems with this:

  1. Packing 4 8-bit values into an `int` assumes that the `int` type is ≥ 32
     bits.

  2. On a platform with a 32-bit `int` (most of the currently supported
     platforms), the operations to set the last entry of the 4-entry array
     involve a shift into the sign bit, something that is undefined behavior in
     C.

This change avoids both of these problems by making it explicit that the 4-entry
array should be an unsigned 32-bit scalar.

Gitlab: related to #2294","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3101","f82b92927c8d2931a7fc1836e16fce8876155dec","2023-03-08 00:07:07.436-05","2023-03-11T14:38:48.647Z","[]"
2164,2418,"suppress XType warnings during testing on macOS","When upgrading from macOS 11 to macOS 12 in CI, running Graphviz outputs:

```
  dot[32116:62347] XType: com.apple.fonts is not accessible.
  dot[32116:62347] XType: XTFontStaticRegistry is enabled.
```

This causes some spurious failures in tests that are expecting stderr to be
silent. These warnings do not seem a serious issue, so this change suppresses
them during testing.

Gitlab: #2164

----

After this and !2417, we should be able to rebase !2370 and have it pass.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2418","1aa9c336e33ceffb2b3c884871e945b7e731eb09","2022-01-26 00:01:11.352-05","2022-01-27T10:28:35.728Z","[]"
1759,1507,"Use preinstalled Python 3 instead of installing it in CI","One more step towards https://gitlab.com/graphviz/graphviz/-/issues/1759.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1507","5ea3935e55040d5b56811ca1b464aff0b7e3821e","2020-08-09 00:02:01.681-04","2020-08-09T19:03:11.110Z","[]"
1934,1727,"fix HTML validation issues in FAQ.html","Related to #1861.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1727","3a8f3f002d2fd9957a73709065f1ea4b2be2d91a","2021-02-02 00:02:27.862-05","2021-02-13T20:13:29.063Z","[]"
1723,1383,"disambiguate MEMCPY macro","As related to the discussion on #1723, this cleans up the definition of and use of the `MEMCPY` macro. This could do with some careful oversight from someone. I think I correctly paired `MEMCPY` calls with the definition they were seeing. However, it was suspicious to me that some calls that seemed to expand to just `memcpy` had a call site like `a = MEMCPY(a, b, c)` which seems kind of redundant.

Also I don't think it's safe to merge this until CI is passing on master.

There's some minor clean up commits included in this MR too. Let me know if you want me to split them out into a separate MR.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1383","3830ece2902c4eb8c535c23e54816c07516e22ca","2020-05-31 00:06:19.146-04","2020-06-06T00:53:35.488Z","[]"
2193,2462,"add a test case for #2193","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2462","975f450c1a9f6a00516e3aacc652db78df2fe22d","2022-02-20 00:06:34.234-05","2022-02-23T09:04:01.089Z","[]"
2058,2337,"Remove lab_gamut.def file","The lab_gamut.def file is replaced with correct storage-class attributes in lab_gamut.h.

Towards https://gitlab.com/graphviz/graphviz/-/issues/2058.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2337","52d0a6f53fd874f52940aff9f636588c3e3e30f3","2021-12-12 00:07:19.011-05","2021-12-13T10:33:57.940Z","[]"
1934,1726,"remove Python 2 pytest installation in CI","We only support running the test suite with Python 3. Closes #1886.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1726","e8b3523ec6b264dc9a87bdf88d8fe8cde40216c7","2021-02-02 00:04:35.939-05","2021-02-13T19:36:38.978Z","[]"
1745,1440,"CMake Graphviz version from autogen","* Makes autotools and CMake builds have a single source of truth for the Graphviz version
* Makes CMake builds use the same version numbering scheme as the autotools builds by a change to actually use the patch version number and not the build date for stable releases
* Ways to override VERSION and DATE from the command line","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1440","9dc4c432ea1b602a4dd63d884096be0479296730","2020-06-25 00:08:16.677-04","2020-06-29T07:02:03.021Z","[]"
2319,2975,"Revert ""core plugin: stop emitting an empty 'alt' tag in cmap output""","This reverts commit a214b9dc2be6b4a9d27196e2c43f7bf2b0ff0002. It turns out the
W3C specification for this part of HTML requires the `alt` attribute if the
`href` attribute is set. We will need to figure out an alternative of what to
set this to for accessibility.

Gitlab: closes #2319, re-opens #265<br/>
Reported-by: Albert","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2975","a3e26c2e4cf7d2a2554337d241e5466482c92a2f","2022-11-25 00:09:19.596-05","2022-11-26T16:59:58.581Z","[]"
1850,1476,"Single source of truth of Grahviz version for all build systems: autotools, CMake & MSbuild","Replaces all instances where the version was manually entered with one single location: the new `gen_version.py`script.

Also changes the versioning scheme from even minor versions for stable releases and odd minor versions for development releases to letting the development version have the same version as the next intended stable release with the suffix `~dev.<committer date>` added to the patch version number as discussed in preparatory discussion: https://forum.graphviz.org/t/version-numbering-going-forward/237","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1476","c6741197981d58157d5790a49a28dd7e4a4ad651","2020-07-21 00:00:46.681-04","2020-07-31T17:21:15.420Z","[]"
1879,3167,"dotgen makeCompoundEdge: fix: allow 'ltail' with no arrowhead on tail","It is not clear to me why this assertion was expected to pass. An arrow can have
no arrowhead on either or both of the head or tail for any number of reasons
(adjusted margins, small arrowhead size, `ARR_TYPE_NONE` selected, …) all of
which are orthogonal to whether `ltail` is used.

This MR adjusts logic here to anticipate no arrowhead on the tail, in which
case the box intersection calculation (which would be degenerate) is skipped).

Gitlab: fixes #1879<br/>
Reported-by: geostag, David Flater","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/3167","13401ece4d00206fc695d68217441d42bc1aad38","2023-04-09 00:07:34.045-04","","[]"
2290,2893,"Use _LINK_LIBRARIES to build gdk plugin","This makes them work on my macOS machine that's installed GTK with
homebrew.

Otherwise I get errors like:

```
ld: library not found for -lgdk-quartz-2.0
```

Towards #2290","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2893","55104baf31ef53e5e78c861e359aaa2b0c2aeec7","2022-10-08 00:03:36.541-04","2022-10-11T06:58:27.277Z","[]"
1823,1613,"fix Lefty's reliance on dup() internals","I figured we have bigger fish to fry, so this just takes the least invasive option for resolving #1823.

----

This addresses the following Coverity warnings:

```
  Error: RESOURCE_LEAK (CWE-772): [#def39]
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:362: open_fn: Returning handle opened by ""dup"".
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:362: leaked_handle: Failing to save or close handle opened by ""dup(fd[1])"" leaks it.
  #  360|           panic2 (POS, ""ptyopen"", ""cannot fork"");
  #  361|       case 0:
  #  362|->         close (fd[0]), close (0), dup (fd[1]);
  #  363|           close (1), dup (fd[1]), close (fd[1]);
  #  364|           execl (shell, shbname, ""-c"", cmd, NULL);

  Error: RESOURCE_LEAK (CWE-772): [#def40]
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:363: open_fn: Returning handle opened by ""dup"".
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:363: leaked_handle: Failing to save or close handle opened by ""dup(fd[1])"" leaks it.
  #  361|       case 0:
  #  362|           close (fd[0]), close (0), dup (fd[1]);
  #  363|->         close (1), dup (fd[1]), close (fd[1]);
  #  364|           execl (shell, shbname, ""-c"", cmd, NULL);
  #  365|           panic2 (POS, ""ptyopen"", ""child cannot exec: %s\n"", cmd);

  Error: RESOURCE_LEAK (CWE-772): [#def41]
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:429: open_fn: Returning handle opened by ""dup"".
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:429: leaked_handle: Failing to save or close handle opened by ""dup(p1[1])"" leaks it.
  #  427|                   panic2 (POS, ""pipeopen"", ""child cannot exec: %s\n"", cmd2);
  #  428|               }
  #  429|->         close (1), dup (p1[1]), close (p1[1]);
  #  430|           close (0), dup (p2[0]), close (p2[0]);
  #  431|           execl (shell, shbname, ""-c"", cmd, NULL);

  Error: RESOURCE_LEAK (CWE-772): [#def42]
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:430: open_fn: Returning handle opened by ""dup"".
  graphviz-2.40.1/cmd/lefty/os/unix/io.c:430: leaked_handle: Failing to save or close handle opened by ""dup(p2[0])"" leaks it.
  #  428|               }
  #  429|           close (1), dup (p1[1]), close (p1[1]);
  #  430|->         close (0), dup (p2[0]), close (p2[0]);
  #  431|           execl (shell, shbname, ""-c"", cmd, NULL);
  #  432|           panic2 (POS, ""pipeopen"", ""child cannot exec: %s\n"", cmd);
```

Fixes #1823. Related to #1464.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1613","3a378bc3635f9464003b29ca8d14da95209b8b9c","2020-10-10 00:03:46.958-04","2020-10-19T15:32:47.691Z","[]"
1979,272,"Drive /download/source/ from JSON files","This may help us automate releases.

Towards https://gitlab.com/graphviz/graphviz/-/issues/1979

Uses Jekyll Data files: https://jekyllrb.com/docs/datafiles/ 

I've verified with diffing the old and new version of the site that it's
only trivial whitespace diffs.","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/272","1b218752f5b6a1e661e158337fc1b976424fc6a0","2021-03-16 00:06:18.768-04","2021-03-17T07:07:10.360Z","[]"
2246,2715,"gvcolor: fix: link -lm","Commit 0efe2864048439507ddceda1d82d2159ad171f0d introduced a dependency on libm
functions but missed adding this dependency to the Autotools build system.

fixes #2246","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2715","2ec5ce86f648d52c1ab2ec9c2c401f5721bb0798","2022-06-08 00:03:27.005-04","2022-06-11T18:28:01.146Z","[]"
1950,1916,"add sprintf-like helper","The function sprintf is generally considered unsafe to use in modern C. In the
Graphviz code base, its uses are slowly being replaced with safer alternatives
(#1950). However, the alternative code is frequently overly verbose and
counter-intuitive. This commit adds (hopefully) convenient alternative functions
that can be used to replace sprintf uses. The gv_sprint function is similar to
the GNU asprintf function with a different calling convention.

The tests added alongside follow the same strategy as used for testing
lib/vmalloc.

----

@steveroush, @truenorth, this is the function I proposed on #1950. Please let me know if it makes sense.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1916","6437e1535c7da1cb97fd215131c4bd92c60021fe","2021-04-23 00:08:09.101-04","2021-04-29T15:45:08.469Z","[]"
2087,3129,"dotgen class2: fix: use an ignored-edge-aware alternative to 'agfindedge'","When processing routing, a previously concentrated edge that was now marked
`IGNORED` could be found. This would result in erroring out when the edge was
later discovered to be not `NORMAL`.

Gitlab: fixes #2087<br/>
Reported-by: Moritz Lenz<br/>
Suggested-by: M Funk","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3129","ff04ad37df84205d152b038e695e7f0d0795f5a4","2023-03-23 00:07:26.106-04","2023-03-27T00:08:04.357Z","[]"
1862,1670,"fix: drop Qt4 qmake support","It looks to me as if cdc5efaf40d94b1020b650d654f94ebf0a856c62 attempted to
consolidate Qt5 support but actually erroneously re-enabled Qt4 qmake support.
This re-enabled qmake doesn't work because it produces a Makefile designed to
work with Qt4, while the CFLAGS and LDFLAGS set by PKG_CHECK_MODULES are all
based on Qt5 library names.

The outcome of this is that building on a Linux machine with libqt5 and
libqt4-dev installed but *not* libqt5-dev (a legal configuration) causes
Graphviz compilation to fail when processing GVEdit #includes it cannot find.

The fix here is to simply remove support for Qt4's qmake because [Qt4 is
deprecated](https://www.qt.io/blog/2014/11/27/qt-4-8-x-support-to-be-extended-for-another-year). Closes #1862.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1670","32ed8e95e02977f973056738f1a08138cdee4277","2020-11-14 00:02:37.757-05","2021-01-23T04:34:36.897Z","[]"
1746,1442,"WIP: Extended error messages to detect missing formats and layouts. Related to #1746","Changed error messages if the list of available formats and layouts returned by `gvplugin_list()` is empty. Added a prompt to configure plugins with `dot -c` if the response string was short (<2 chars) otherwise retained previous behavior - it should only show a list of formats and layouts if the list is not too short (not ""empty"").

There's minor churn from replacing tabs with spaces and adjusting indentation and bracing. I marked this as `WIP` because I'm not sure if prompting the user to run `dot -c` is a general solution or specific only to `dot`.

Pointers to project coding standards, _etc._ cheerfully accepted. I'm not the world's most confident C coder so I tend toward being more explicit and asking for review and comment.

This change was prompted by #1746 and could use some extended testing.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1442","2e4e0e897023e8b0794c066993589f34097461cd","2020-06-25 00:06:47.282-04","","[]"
2345,3070,"Fix cluster edges in fdp","98d00ae10931a636cc5ec480092b4a20f5156877 introduced an extra invisible
periphery representing the outline of a node and
b574f6d31e240e7f92a2c3fa5eb221a25a715253 introduced use of it in the
`poly_inside` function. For regular nodes, this periphery is set to
its final value already in `poly_init`, but for clusters it must be
updated to the actual cluster outline periphery during fdp layout in
the `setClustNodes` function which the latter commit above failed to
do.

Fixes #2345.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3070","1262132812ffb4917cadb56843fef9f0d9b6d41b","2023-01-28 00:06:43.93-05","2023-02-24T08:14:58.861Z","[]"
2073,1992,"add an out-of-source build to CI","The existing CI tasks run an uncommon work flow: building distributable packages
on each operating system. A more common work flow end users will be following
with the portable source tarball is simply building and installing it. This
change adds a job that does this, to provide a safeguard against breaking this
work flow in future.

The added job runs on Ubuntu 21.04. The intent is to bump this job to the latest
each time there is a new Ubuntu release. There is no companion test job for the
build job because we assume the existing test jobs are providing sufficient
coverage.

Closes #2073.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1992","e6e2b27105e675485e2b347d511d4f76f159d2b0","2021-06-06 00:07:04.956-04","2021-06-12T20:07:43.418Z","[]"
1763,1579,"Replace rtest.sh with rtest.py for remaining automake targets","This fixes an embarassing mistake in https://gitlab.com/graphviz/graphviz/-/merge_requests/1496 discovered by @pierre-labastie in https://gitlab.com/graphviz/graphviz/-/issues/1763#note_412483614.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1579","88368651843b39cc65011595f9daa76204db2a18","2020-09-15 00:09:38.429-04","2020-09-19T12:55:23.666Z","[]"
1978,1860,"fix: don't run pylint CI job on tags","383ec8753b8007d26fc4f6eb51c61b6d8b71d12e added a pylint task in CI. This task is
unrestricted, so Gitlab thinks it is meant to run on tags as well as on master.
Every other task is restricted to only run on master (including the dependencies
of the pylint job) so CI now fails on tags. This change limits the lint job to
not run on tags. Fixes #1978.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1860","fcdf8e6a498b7646dc40a41277ad0238c3cdfcd0","2021-03-21 00:00:40.099-04","2021-03-28T23:58:44.679Z","[]"
1968,1824,"Remove colors.html.j2, it's migrated to docs repo","Moved to graphviz.gitlab.io in
graphviz/graphviz.gitlab.io!269

Fixes graphviz/graphviz#1968","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1824","45878d0f463e877e6cf2d5924a38a9ba5f0c77b0","2021-03-02 00:01:45.406-05","2021-03-02T09:51:51.901Z","[]"
1873,1813,"some libgvpr cleanup","Removes some use of sfstropen (#1873), more `strcmp` micro-optimization removal, and squashing compiler warnings.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1813","341f501eac85a3a5551198a71ffc9891b772ef59","2021-03-01 00:07:58.133-05","2021-03-07T20:56:09.246Z","[]"
1985,2047,"agrefstrdump: dump dictionary associated with the current graph, not default","It looks like a mistake that this function was ignoring its input argument and
always dumping the default string dictionary. This change makes the function
dump the string dictionary associated with the passed graph. This function is
only compiled in when DEBUG is defined and it is not exposed to users, so no
changelog entry for this. Fixes #1985.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2047","867dac0abc57519fe34eba239a961e6fe37359a6","2021-07-10 00:07:00.268-04","2021-07-18T00:24:55.567Z","[]"
2162,2414,"get_cycle_centroid: undo caching or cycle list","This function attempted to save time by caching the results of a graph cycle
search and then reusing them in a future call. The logic used for this caching
is invalid. It compares graph pointers to see if it is operating on the same
graph as last time, but this can return a false positive if the previous graph
has been deallocated and a new (unrelated) graph has been allocated at the same
address.

This logic would eventually have to be unwound or adjusted in order to support
multithreading in this code too.

It is possible this is the root cause of the issue described in #2162, though I
was never able to reproduce that issue.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2414","e982a7f8dc7367911b823c81ca527629575f5ec4","2022-01-18 00:05:03.215-05","2022-01-18T16:40:28.113Z","[]"
206,1422,"Remove ndotguide.tex","All the Makefiles refer to dotguide.tex, and this is unused.

Looks like this was created in 2010 as an experiment but never used.

Closes #206","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1422","fb7ba471b94c2061e4bba61761b61cb1a48d800a","2020-06-08 00:09:20.784-04","2020-06-08T01:39:26.878Z","[]"
797,1876,"fix: do not recognize ""&;"" as an XML escape sequence","xml_isentity was incorrectly recognizing ""&amp;;"" as an escape sequence. Despite
vague wording in the standard, it seems fairly clear that &amp;&lt;name&gt;; is only
intended to be a valid escape sequence when &lt;name&gt; is non-empty. Fixes #797.

Note that unfortunately due to #1868, we need to fix this bug four times in
copy-pasted versions of the same function.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1876","aa3174f945ba628840d9e9c844aa8fcf50ba959c","2021-03-31 00:00:35.497-04","2021-04-06T15:36:57.435Z","[]"
1873,2784,"gvpr: remove long lived scratch SFIO buffer","More work towards #1873","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2784","58dffe2fe532ac7bd8dc97d788525bcaad5f8bd9","2022-08-07 00:01:15.984-04","2022-08-13T18:24:48.298Z","[]"
1603,1456,"clean up unused parts of vmalloc","These changes fix #975 and #1424, as well as being a step on the way to fixing #1603 and #1757. A number of unused modes are removed, simplifying this significantly in preparation for delegating to the system allocator (`malloc`). Moving towards simply calling `malloc` to back vmalloc is roughly the approach @markhnsn suggested on [the forum discussion](https://forum.graphviz.org/t/some-vmalloc-questions/124). I've attempted to do these changes in a fine grained way. Though the diff is large, there's nothing particularly complicated going on. Hopefully each commit is comprehensible in isolation.

I'll merge this on 2020-07-11 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1456","34830836f4753e590685f5ce1f95ff9624bda4ad","2020-07-06 00:08:40.766-04","2020-07-11T17:36:15.850Z","[]"
1772,1472,"add CI tests that GVPR lib is parseable","This does not test addedges, binduce, or histogram that require a command line
argument. I'll merge on 2020-07-24 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1472","ea791d46aa1d0f15c483d424fdddabf8f3b61cb0","2020-07-18 00:06:32.615-04","2020-07-28T13:42:47.960Z","[]"
2177,2388,"Revert Perl CFLAG mangling in tclpkg","Fixes #2177.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2388","3c667dc4ca6fe3bca349686d73a6c23ef5aee95f","2022-01-09 00:01:01.532-05","2022-01-11T06:01:43.483Z","[]"
1812,2387,"Fix MinGW CMake builds and add tests","Adds testing of MinGW CMake builds to CI and fixes some issues that prevented them to pass.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2387","51c7607034fc525cd7ce8e495a090c7c1d47644b","2022-01-09 00:07:41.662-05","2022-01-10T13:02:25.722Z","[]"
2186,2428,"Draft: squash or avoid some warnings","Samples of warnings:
```
warning: cast between incompatible function types ... [-Wcast-function-type]
warning: comparison of integer expressions of different signedness [-Wcast-function-type]
warning: conversion ... may change value [-Wfloat-conversion]
warning: conversion ... may change the sign of the result [-Wsign-conversion]
```","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2428","84d0f3f5372b4bb8e53bdcc697f72d4ecab0ebc7","2022-02-03 00:01:01.706-05","","[]"
1936,2102,"fix path to which CMake install man pages","The CMake build system was setup to unconditionally install man pages to man3.
This is only correct for libraries, whose man pages have the extension .3.
Binaries have man pages with the extension .1 and were intended to be installed
in man1. Now both go to the correct man subdirectory. Fixes #1936.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2102","d7d54b75a29dabda682d9bed5b023649e1aa7c6b","2021-08-15 00:01:12.912-04","2021-08-23T04:05:55.024Z","[]"
1682,1345,"small fixes for larger graphs","Changes:
1. short -> int in rank values to avoid overflow
2. changes to cleanup1() to improve performance","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1345","ba59204bbb589d326504ba28b24b1c8a8b2fbe52","2020-04-19 00:03:09.003-04","2020-05-07T02:03:08.527Z","[]"
1770,1529,"Add windows build PowerShell scripts and refactor CI","This is the first of two MR's with the overall goal to make it much easier for users to build Graphviz for Windows and for writing improved documentation on how to do it. This MR provides three `PowerShell` scripts and refactors the existing Windows pipeline to use them. The [other MR](https://gitlab.com/graphviz/graphviz/-/merge_requests/1530) provides bash scripts with the same functionality.

* `setup-build-utilities.ps1` - Tries to find specific build utilities in the user's path and if it doesn't find one falls back to set up the path to the utility in the Graphviz build utilities submodule at `windows\dependencies\graphviz-build-utilities`. Produces output messages to tell what it is doing and where the utilities have been found.
* `build.ps1 [-buildsystem] cmake|msbuild [-configuration] Release|Debug [-platform] Win32|x64` - Builds Graphviz provided that the build utilities have already been set up.
* `setup-and-build.ps1` - First runs `setup-build-utilities.ps1` and then `build.ps1` with the arguments supplied.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1529","d8b5eb6fa34ba6e37fc5ed08e3364b37b955ddac","2020-08-17 00:05:01.008-04","2020-08-25T15:58:03.821Z","[]"
1759,1510,"Use preinstalled pytest instead of installing it in CI","One more step towards https://gitlab.com/graphviz/graphviz/-/issues/1759.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1510","fa8e3747a7d672688f7c658344aef9080764828a","2020-08-10 00:05:38.134-04","2020-08-10T06:44:49.588Z","[]"
1836,2561,"CMake: enable GTK plugin","Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2561","b708b3b2e6bb56223e8caf2248c1f44ad541fa91","2022-04-05 00:02:31.522-04","2022-04-10T06:59:37.783Z","[]"
1851,1647,"refactor tests cases into CI-only and others relevant to developers and CI","As discussed in #1851. Thanks for @magjac's guidance on this. I hope I've addressed all your prior comments, Magnus.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1647","bac72da029a411d3c80bff85ea03fd823d5ba8d7","2020-10-25 00:04:35.419-04","2020-10-28T00:06:03.142Z","[]"
1798,1712,"remove legacy CVS references","Now that Graphviz lives in Git, these references are no longer relevant. Closes
#1798.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1712","d950aec89b8d2ef4ed4a55d545aa6b3abef21764","2021-01-24 00:09:20.7-05","2021-01-30T23:01:58.161Z","[]"
2153,2779,"remove dotty, lefty, lneato","Lefty, and its dependent tools Dotty and Lneato, have been suspected unused for
a long time. They were scheduled for removal, but we took a cautious and very
slow approach to this given how pervasive Graphviz is and the limited visibility
we have into its usage:

  1. 2021-09-25 make Lefty default to disabled in the build system¹
  2. 2022-01-16 disable Lefty in published graphviz.org packages²
  3. 2022-03-28 remove build system support³

This completes the final step of removing the code from the repository. It is
still retained in the history, should anyone need access to it or need to build
a past version of Graphviz with Lefty.

So far, we have only heard two notable reactions from the downstream world:

  1. Lefty disabling was not quite complete on the first attempt.⁴
  2. There has been an offer of assistance to maintain Lefty.⁵ No patches have
     yet emerged, but if and when they do we could feasibly reverse direction on
     this and reinstate Lefty and friends.

Gitlab: closes #219, closes #552, related to #1836, #1854

¹ 1a4ad00b59cc1e1e9302fcbd1a205495ee59cab5
² 04a78cc9ae01b2a7e5d5435146cd503c45af90b9
³ 6faa34010f947510ec129af2d998614de8a513ed
⁴ https://gitlab.com/graphviz/graphviz/-/issues/2153
⁵ https://forum.graphviz.org/t/lefty-not-a-graphviz-application/835/6","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2779","b2f287ca315dd5bf689d9ce2ca71dbfe63fb8a61","2022-08-03 00:08:37.228-04","2022-08-08T14:56:44.374Z","[]"
2197,3164,"port rtest to Pytest","This change allows the rtest test cases to finally be seen as Pytest test cases.
This has a number of benefits:

1. Test cases are declared in Python. The definitions are syntax-checked and
mistakes and typos more readily surface.

2. Pytest, by seeing native test cases, can report more information about test
case failures.

3. rtest test cases are no longer constrained to running serially. Pytest can
be instructed to run them in parallel.

Gitlab: closes #2197","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3164","d219347d010e129da695a8512f0820d4ee54b281","2023-04-08 00:08:18.342-04","2023-04-09T03:38:09.291Z","[]"
1957,1839,"document missing libxdot API functions","#1957","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1839","1071e46dbeaee761675670292bf764ec2f7d6a26","2021-03-13 00:01:49.814-05","2021-03-20T00:42:39.060Z","[]"
1955,1827,"deploy: generate SHA256 checksums in addition to MD5, and also apply to macOS and Windows packages","During deployment – whether a release or a regular intermediate commit – we generate an MD5 checksum for the portable source tarball. A user requested a SHA256 checksum for one of the Windows packages, which is a good prompt for us to (1) update the checksum format we're providing and (2) extend which files we checksum.

This MR:
1. Adds a SHA256 checksum for the portable source tarball in addition to the previous MD5 checksum; and
2. Adds MD5 and SHA256 checksums for all the macOS and Windows deployment artifacts.

At this time, I don't think there is value in also checksumming all the Linux packages. Our deployment is already well over 300 files and this would triple the figure.

This is another MR that is difficult to test prior to merge, so please review closely. After merge it will run every commit, so at least we don't have to wait to the next release to exercise these code paths.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1827","239f6301789b603202d500f7ae58e800354c1524","2021-03-03 00:00:33.244-05","2021-03-09T16:44:15.367Z","[]"
2204,2575,"unflatten, etc: more #2204 progress","Gitlab: #2204","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2575","a32de450e59d9ac11bc66672abb33c1fd4dd05ea","2022-04-09 00:00:38.101-04","2022-04-10T22:08:14.705Z","[]"
2320,2965,"neatogen: some cleanup and migration to cgraph allocation wrappers","The lib/cgraph/alloc.h wrappers are similar to the older lib/common/memory.h
wrappers except (1) they are header-only and (2) they live in a directory
(cgraph) that is at the root of the dependency tree. The long term plan is to
replace all use of lib/common/memory.h with lib/cgraph/alloc.h.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2965","93217f76e0c6a9744138d772d8a30611f75f298f","2022-11-20 00:03:12.548-05","2022-11-25T19:23:36.236Z","[]"
1806,1529,"Add windows build PowerShell scripts and refactor CI","This is the first of two MR's with the overall goal to make it much easier for users to build Graphviz for Windows and for writing improved documentation on how to do it. This MR provides three `PowerShell` scripts and refactors the existing Windows pipeline to use them. The [other MR](https://gitlab.com/graphviz/graphviz/-/merge_requests/1530) provides bash scripts with the same functionality.

* `setup-build-utilities.ps1` - Tries to find specific build utilities in the user's path and if it doesn't find one falls back to set up the path to the utility in the Graphviz build utilities submodule at `windows\dependencies\graphviz-build-utilities`. Produces output messages to tell what it is doing and where the utilities have been found.
* `build.ps1 [-buildsystem] cmake|msbuild [-configuration] Release|Debug [-platform] Win32|x64` - Builds Graphviz provided that the build utilities have already been set up.
* `setup-and-build.ps1` - First runs `setup-build-utilities.ps1` and then `build.ps1` with the arguments supplied.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1529","d8b5eb6fa34ba6e37fc5ed08e3364b37b955ddac","2020-08-17 00:05:01.008-04","2020-08-25T15:58:03.821Z","[]"
1773,1507,"Use preinstalled Python 3 instead of installing it in CI","One more step towards https://gitlab.com/graphviz/graphviz/-/issues/1759.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1507","5ea3935e55040d5b56811ca1b464aff0b7e3821e","2020-08-09 00:02:01.681-04","2020-08-09T19:03:11.110Z","[]"
1873,1868,"replace Smyrna use of sfstropen with agxbuf","Related to #1873.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1868","5c5f2c9204a89281343948e705141565810d74bf","2021-03-27 00:07:05.872-04","2021-04-02T03:38:19.674Z","[]"
1832,614,"update GCC minimum recommendation to 4.8.1","Graphviz has required ≥4.8.1 since switching to C++11 in Graphviz commit
a74e0e104e114bcf890eb8419a0bf02a22e01d84.

Gitlab: https://gitlab.com/graphviz/graphviz/-/issues/1832","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/614","26ea0dde91b479bc0bbb9111b2054a53e379e9f3","2023-03-29 00:06:58.144-04","2023-03-30T07:09:50.249Z","[]"
1753,1472,"add CI tests that GVPR lib is parseable","This does not test addedges, binduce, or histogram that require a command line
argument. I'll merge on 2020-07-24 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1472","ea791d46aa1d0f15c483d424fdddabf8f3b61cb0","2020-07-18 00:06:32.615-04","2020-07-28T13:42:47.960Z","[]"
1943,1747,"Touch all the Dockerfiles to rebuild them","And push them to the GitLab Container Registry

There's probably a nicer way to do this, but I'm not sure what it is. Maybe a manual job, or a variable that you can enable to trigger it?

Towards #1943","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1747","b1f5b414a8b60b557e0fd5e58caa4e9f67009b55","2021-02-14 00:00:15.825-05","2021-02-14T04:20:45.318Z","[]"
2283,3118,"fix sfdp 'beautify=true'","The `beautify` attribute is intended to equi-space nodes in a radial layout when using SFDP. It seems this attribute has never worked correctly.

This series fixes numerous bugs, finally making `beautify=true` work as intended.

Gitlab: fixes #2283","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3118","14a4f0677a8b3ce46eaec50998cbb3d1f221387e","2023-03-19 00:04:42.695-04","2023-03-22T00:16:16.455Z","[]"
1785,1648,"fix some #includes in the Quartz plugin","This reverts part of d80f685dbacc2cfa3e496415739b4d6cfad32233 that incorrectly
updated paths to the header gvplugin_quartz.h. This mistake was not detected at
the time as we did not have macOS CI. Thanks to Stephen for picking this up.
Related to #1785.

----

@truenorth, can you confirm this fixes the compilation issue you emailed me about?

This plugin is clearly not being compiled in CI, as the previous code would not have worked. @magjac do you know how we go about enabling this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1648","43714936b2740f897751d24d5bce339cc8e5cd0b","2020-10-25 00:05:28.734-04","2020-11-01T03:20:09.138Z","[""release blocker""]"
2057,1925,"GVC: export 'gvToolTred'","This is a temporary bandaid solution for a missing export from the GVC
library.  The general solution of fixing the annotation on the
declarations is better suited for Windows.  That would allow the
compiler to make appropriate optimizations.  Modern MinGW should also be
able to handle the exports through the attribute, avoiding the need to
maintain the extra def file.

The attributes could also be further generalized to aid on Unix
platforms.

This partially resolves #2057","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1925","155aa5630d99e1e18674000e371997bb4eca33ea","2021-04-25 00:02:07.374-04","2021-05-02T16:04:57.900Z","[]"
1800,1532,"Execute test examples","* Add `execution` of the test examples in [dot.demo](https://gitlab.com/graphviz/graphviz/-/blob/master/dot.demo), except for [dot.demo/neatopack.c](https://gitlab.com/graphviz/graphviz/-/blob/master/dot.demo/neatopack.c) which fails because of https://gitlab.com/graphviz/graphviz/-/issues/1800.
    * *Compilation* of the examples already exists thanks to @smattr through https://gitlab.com/graphviz/graphviz/-/merge_requests/1455.
    * No output checking is done, only checking of exit status from the execution.
* Add exit status interpretation to the pytest case for easier fault determination.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1532","291b7a40f742551797e5681acbb8f5662c084822","2020-08-20 00:02:43.503-04","2020-08-25T16:36:57.125Z","[]"
1735,1426,"Fix ""Python language bindings library for Ubuntu does not contain any Python code or binaries""","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1735

~~The error message was: ""/bin/sh: 1: Syntax error: ""&"" unexpected"".~~

~~The |& syntax is only valid for bash, not for sh.~~

**EDIT:** The above description was what I thought was the only problem when I wrote this bug, but I later realized it was worse and updated the title accordingly.

This was introduced in b861a44f39521be6c5c81f0d7aa39bdedae6be82.

Also fixed install of libgv-python for multiple python versions which
was masked by this problem.
","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1426","eb01a2e117bb116855701faa70c75d2c42f50907","2020-06-10 00:02:29.118-04","2020-06-21T08:24:15.844Z","[]"
2179,2484,"Pango plugin: fix: do not judge empty lines as failing during text layout","Text layout plugins are expected to return failure as `false` from their
`textlayout` function. The Pango plugin considered failure to be anything that
resulted in a horizontal layout width of 0. However, this is not a failure in
the case where the text being laid out is the empty string; its horizontal width
is expected to be 0.

The effect of this was that HTML-like strings like `<<br/>1>` were judged to
fail during text layout and a (redundant) estimation of their text width was
performed. This seems to have been a latent bug present since commit
ad82ef86 (~July 2007). This recently became more
visible due to commit 7aa0dcc0 that introduced
warnings during text width estimation if a fallback metric needed to be used.
Users were now presented with “Warning: no hard-coded metrics” when using fonts
that Pango knew of and should not have needed estimation in the first place.

This fix makes the Pango plugin consider 0 width for the layout of an empty
string to be successful. To be clear, this commit is both a functional fix and a
performance improvement.

Gitlab: fixes #2179","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2484","adfe04cad94ab7a42bd5702454618932caa3e9c3","2022-02-28 00:09:06.456-05","2022-03-05T20:58:10.137Z","[]"
1175,1605,"Don't close output file after writing first graph","Fixes #1845, essentially by reverting 806b8a2f","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1605","8bedfb6eb45f75f22c0887adaa3d2e648247bff7","2020-10-05 00:03:31.262-04","2020-10-09T14:59:14.275Z","[]"
1786,2498,"fix corruption of user shape characteristics during EPSF initialization","From the surrounding context, it is clear this code was intending to set `h`,
the height of the shape, not overwrite the `y` coordinate it had previously set
for the shape. This change not only fixes the overwrite of `us->y` but fixes a
read of uninitialized memory in `us->h` by the caller of this function.

It is not clear to me what the full user-visible effect of this change is.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2498","80f864b5c0e796964aa8c993ad286ecd8fa92878","2022-03-06 00:07:56.287-05","2022-03-12T23:45:09.091Z","[]"
2057,1933,"add test case for #2057","@abdulras do you want to rebase !1925 onto this and update your commit to remove the `xfail` line added here? Then hopefully we should get some validation from CI passing after your change.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1933","83dc7a5c0c643e667e627eb9e6aed8a619788c9b","2021-04-27 00:00:34.649-04","","[]"
2201,2487,"Draft: Proposal of local host complete build and test","Complete build & test for local hosts. To be used before pushes and merge requests.

Uses of new function `tool_path` in python test instead `shutil.which` to **optionally avoid using pre-installed tools from PATH**

Usage of environment variable `prefix` is backward compatible.

With undefined environment variable `prefix` python tests work as before.

When `prefix` is defined, function `tool_path` uses only tools under prefix + '/bin'

Script test_all.sh just configures and reuses other tools: performs cmake build and install and runs tests on the installation only.

Solution for #2201","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2487","d673af620ded6c11a37828f378541c4a5aea4d45","2022-03-02 00:05:15.276-05","","[]"
2329,3054,"Revert ""CI: disable Cygwin jobs""","This reverts commit 709acef44e13332a3c961bed3a2478c002f7b25f.

The problems seen in https://gitlab.com/graphviz/graphviz/-/issues/2329 seems to no longer exist.

This closes https://gitlab.com/graphviz/graphviz/-/issues/2329.

~~This is a draft since the MacOS jobs fail with:~~

~~`Error: Port libANN not found`~~

~~I expect this to be a temporary glitch (or at least unrelated) since `main` passed fine and nothing in this MR has been changed regarding MacOS.~~","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3054","737f9cf0121eaf33c8631d8cb2e59a7103bb7e16","2023-01-15 00:01:24.264-05","2023-01-21T15:29:43.656Z","[]"
2082,1988,"fix incorrect return value in inside_polygon","A refactor in 7731b18f403b545ea6eca99f429dd9b63e0659d6 incorrectly flipped the
polarity of one of the return sites in inside_polygon. The effect of this was
confusing assertion failures. Fixes #2082.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1988","bdee0834927cbc4a6a940c90da855c08481f8b8e","2021-06-05 00:00:24.339-04","2021-06-05T17:01:51.383Z","[]"
1900,1669,"Add Ubuntu 20.10 jobs to CI","Adds autotools & CMake build & test jobs for Ubuntu 20.10 to CI.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1669","997dc53a575aece2f8abba633a0302113d507419","2020-11-13 00:04:56.97-05","2020-12-06T09:02:39.161Z","[]"
1622,3095,"common pos_html_tbl: fix: clamp cell adjustment instead of asserting","The position by which to adjust HTML table cells is calculated based on user
input. So there is nothing preventing `delx` or `dely` from being assigned a
negative value. This change follows something more like the logic of
`pos_html_cell`, only using the adjustment values when they are positive.

Gitlab: fixes #1622<br/>
Reported-by: Witold Baryluk

----

This MR also includes a number of other minor improvement opportunities that I came across along the way.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3095","9ac149d277d2c2d08e3cb23a4b6f6b2d38d9b6e8","2023-02-28 00:00:10.126-05","2023-03-06T14:25:31.554Z","[]"
2102,2123,"Clean up linking of expat, xdot and label","Inspired by https://gitlab.com/graphviz/graphviz/-/merge_requests/2107#note_659379789. Similar to !2116.

Implicitly towards #2102.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2123","c32d365d785e7ee299c0e41490dc3010b057e6e0","2021-08-29 00:06:20.507-04","2021-08-30T06:32:43.867Z","[]"
2145,2272,"fix: use 'find_program' instead of 'find_package' to locate Git in CMake build","The Cygwin CMake CI task recently started stalling after the “Found FLEX” step.
Reordering CMake steps to debug this revealed that it was definitely the
`find_package(Git REQUIRED)` step that was stalling. I have not been able to
root cause what is going on, but some educated guesses:

  1. A CMake FindGit.cmake bug? This could certainly cause the described
     behavior, but I cannot find anything online to corroborate this and cannot
     see anything in the upstream history of this file¹ that looks like a fix
     for something like this.

  2. Installing a version of CMake via Choco and then running it via Cygwin
     causes some bad Windows/UNIX interaction? Perhaps, but I cannot find any
     corroborating evidence for this either. Also, I cannot guess why such a
     thing would _only_ cause problems in FindGit.cmake.

  3. FindGit.cmake is picking up a Visual Studio shim for Git that responds in a
     way that confuses the `find_package` check? I found vague hints about a
     shim like this online, but I still cannot explain why this would cause a
     stall.

A work around for this is to use the less nuanced `find_program`. This has no
negative impact on the CMake setup because (1) all we are attempting to detect
is the `git` binary itself and (2) the CMake files never call `git` directly
anyway; we are performing this detection to avoid gen_version.py failing
cryptically.

Note that it is not possible to use `REQUIRED` in this `find_program` directive
because this was only added in CMake 3.18 and we currently only require CMake
3.1.

This also re-enables the Cygwin CMake CI task now that it no longer stalls.

Fixes #2145.

¹ https://github.com/Kitware/CMake/commits/master/Modules/FindGit.cmake

----

@magjac maybe my educated guesses above trigger some clues in your brain too?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2272","1997723433f3330df73ceca454c5f9259eef863f","2021-11-08 00:05:40.346-05","2021-11-14T18:55:14.276Z","[]"
2329,3003,"cgraph: implement SSO on agxbuf","This series modifies the generic string buffer `agxbuf` to implement [Small String Optimization](https://stackoverflow.com/questions/10315041/meaning-of-acronym-sso-in-the-context-of-stdstring), a technique for minimizing the in-memory footprint of shorter strings. It involves many commits, but most are small self-contained steps towards the goal.

For motivation, I will just quote the performance table from the last commit:

| | before                     | after                      | diff |
| --- | --- | --- | ---: |
| chain | 1.16s<br/>10436971652 instructions<br/>444MB peak RSS | 1.05s<br/>9006483829 instructions<br/>180MB peak RSS | -9%<br/>-14%<br/>-59% |
| long  | 2.69s<br/>22856315061 instructions<br/>1056MB peak RSS                      | 2.39s<br/>19359309874 instructions<br/>416MB peak RSS                      | -11%<br/>-15%<br/>-61% |
| 456a | 4h16m36s<br/>881MB peak RSS | 4h13m46s<br/>861MB peak RSS | -1%<br/>-2% |
| 1652a | 17.98s<br/>113257927412 instructions<br/>97MB peak RSS                     | 17.81s<br/>113083410200 instructions<br/>52MB peak RSS                     |  -1%<br/>-0%<br/>-46% |
| 1652b | 2m09s<br/>20MB peak RSS                     |  2m08s<br/>16MB peak RSS                      |  -1%<br/>-20% |
| 1718  | 2m34s<br/>1620909322870 instructions<br/>20MB peak RSS                      | 2m35s<br/>1620889232022 instructions<br/>18MB peak RSS                      |  +1%<br/>-0%<br/>-10% |
| 1864a | 32m05s<br/>3435MB peak RSS | 34m22s<br/> 1479MB peak RSS | +7%<br/>-57% |
| 1864b | 14.68s<br/>89053964853 instructions<br/>2421MB peak RSS | 13.62s<br/>83880586677 instructions<br/>464MB peak RSS | -7%<br/>-6%<br/>-81% |
| 2064  | 11m37s<br/>815499533953 instructions<br/>1370MB peak RSS                     | 11m38s<br/>814007887571 instructions<br/>1261MB peak RSS                     |  +0%<br/>-0%<br/>-8% |
| 2095 | 2m10s<br/>74871386805 instructions<br/>113MB peak RSS | 2m11s<br/>74549569707 instructions<br/>92MB peak RSS | +1%<br/>-0%<br/>-19% |

I'm still waiting on some further profiling to complete, but I wanted to post the series now to avoid delaying the 7.0.5 release. I think the data already paints a pretty compelling story.

Fixes #2326, Closes #2302","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3003","49df513ba741ca07de361039c9451d128415a63d","2022-12-18 00:07:16.381-05","2022-12-21T04:07:47.989Z","[]"
1785,1520,"WIP: disambiguate include paths (1/5)","This is part 1 of 5 of a patch series towards #1242 and #1785. None of the changes in this or the follow up parts are complicated, but there are a lot of them so I chose to split them up. They are:

1. disambiguate `lib/*/*.c` #includes (this MR)
2. disambiguate `cmd/*` #includes ([1785-2](https://gitlab.com/smattr/graphviz/-/tree/1785-2))
3. disambiguate `plugin/*` #includes ([1785-3](https://gitlab.com/smattr/graphviz/-/tree/1785-3))
4. disambiguate `tclpkg/*` #includes ([1785-4](https://gitlab.com/smattr/graphviz/-/tree/1785-4))
5. disambiguate `lib/*/*.h` #includes and remove extraneous include paths ([1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5))

@ldionne.2, can you confirm the final end state, [1785-5](https://gitlab.com/smattr/graphviz/-/tree/1785-5) resolves your libc++ compilation problem?","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1520","56afa9562e8800686c6f7246d2f823e36b8a3ff3","2020-08-13 00:03:10.062-04","","[]"
1979,2694,"Stable Release 4.0.0","I propose cutting the next release on 2022-05-29.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2694","37f58fd8c96e432c882df37590874f4461fcde13","2022-05-24 00:08:28.71-04","2022-05-29T09:37:46.180Z","[]"
1646,8,"Amend update of download page with latest stable release","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1646","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/8","abe4f76976c3c7a2e3247f5e9e16efb83fede561","2020-04-12 00:09:15.456-04","2020-04-12T11:17:23.021Z","[]"
1773,1511,"Use preinstalled diffutils instead of installing it in CI","One more step towards https://gitlab.com/graphviz/graphviz/-/issues/1759.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1511","6828dcf0b40e582aa43ed9ac3d87ab16d190f49a","2020-08-10 00:01:51.721-04","2020-08-10T07:13:49.762Z","[]"
2204,2563,"remove some more unused unistd.h #includes","Gitlab: #2204","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2563","bfffd75c44675ed28a261917c9ba7865dffd21f3","2022-04-06 00:02:57.019-04","2022-04-09T21:54:51.497Z","[]"
2004,334,"Remove wishlist items; migrated to issues.","- https://gitlab.com/graphviz/graphviz/-/issues/2008
- https://gitlab.com/graphviz/graphviz/-/issues/2007
- https://gitlab.com/graphviz/graphviz/-/issues/2006
- https://gitlab.com/graphviz/graphviz/-/issues/2005
- https://gitlab.com/graphviz/graphviz/-/issues/2004

Towards #79","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/334","3ce61ffda1d7becef3f70b7a5f2111c7332c5d98","2021-04-10 00:04:59.859-04","2021-04-10T23:51:33.660Z","[]"
2005,334,"Remove wishlist items; migrated to issues.","- https://gitlab.com/graphviz/graphviz/-/issues/2008
- https://gitlab.com/graphviz/graphviz/-/issues/2007
- https://gitlab.com/graphviz/graphviz/-/issues/2006
- https://gitlab.com/graphviz/graphviz/-/issues/2005
- https://gitlab.com/graphviz/graphviz/-/issues/2004

Towards #79","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/334","3ce61ffda1d7becef3f70b7a5f2111c7332c5d98","2021-04-10 00:04:59.859-04","2021-04-10T23:51:33.660Z","[]"
2046,2058,"Add a very basic C++ API","This is the C++ API part of !2033 which was too large. The implementation has been modified according to the discussion in https://gitlab.com/graphviz/graphviz/-/merge_requests/2033#note_619077068.

The new C++ API supports creating a graph from DOT source, performing a layout of that graph and rendering it to a specified format.

An upcoming MR will add the layout construction overloads using rvalue refs discussed in that thread and an additional upcoming MR will add the SVG analyzer part of !2033.

Closes #2001.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2058","d57d5a12482a328cec277787c776c2e683ac92eb","2021-07-18 00:09:20.629-04","2021-08-07T06:49:46.910Z","[]"
1852,1608,"Replace outdated getopt","The main goal of this MR is to replace the `windows/getopt` code in the repo with modern officially supported versions as outlined in https://gitlab.com/graphviz/graphviz/-/issues/1820. In addition to that it also makes minor improvements related to this and changes the behavior of most tools to show usage and fail when an unsupported option is given as described in given https://gitlab.com/graphviz/graphviz/-/issues/1843. The reason for not making this a separate MR was that I considered it an important step in the verification of the main goal.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1608","421c1fa2c01fe9255b47dd414a22099f9f082377","2020-10-07 00:02:49.357-04","2020-10-09T05:08:26.473Z","[]"
2178,2416,"Fix stdout and stderr flushing at exit on MinGW","Fixes https://gitlab.com/graphviz/graphviz/-/issues/2178.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2416","72802159d9401a7add3afc0817542544e5ecbe55","2022-01-20 00:00:23.631-05","2022-01-31T18:11:56.296Z","[]"
2058,2291,"Add MinGW autotools build jobs to CI","~~This is a draft since I've struggled for quite some time to get the jobs to pass the GitLab CI in less than the allowed 1 h run time that the shared Windows has hard-coded (cannot be changed by the user), without succeeding. Since there's been some interest from users for MinGW lately (https://gitlab.com/graphviz/graphviz/-/merge_requests/2236, https://gitlab.com/graphviz/graphviz/-/merge_requests/2289 & https://gitlab.com/graphviz/graphviz/-/merge_requests/2290), I thought I'd as well might submit a draft MR to get some comments on how to proceed.~~

1. ~~Any ideas on how to speed up the jobs would be highly appreciated. I've tried different attempts to workaround this problem, including using Docker containers with pre-installed dependencies and using the GitLab CI cache to store MinGW packages, but I haven't gotten any of them to work. My next approach will be to split the configure and make step into separate jobs and pass the configured build system as an artifact between them.~~
1. ~~Should we instead focus on getting this merged without enabling the CI jobs?~~
1. ~~The commit series is quite long (even though each commit is very small), 45 commits ATM, including the CI jobs. Is it to much to review in one go? I suspect so. Also, the last 6 commits need to be moved earlier in the commit series. I just haven't had the time to work on this for a while.~~

~~See also:~~
~~- https://forum.graphviz.org/t/gitlab-runtimes/868~~
~~- https://gitlab.com/graphviz/graphviz/-/merge_requests/2289#note_737625744~~","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2291","727db38b57baa5fb5a0d25ab151772709ac48767","2021-11-18 00:02:13.883-05","2021-12-07T08:01:36.401Z","[]"
1792,1514,"Correct filename of Windows exe installer and zip archive","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1792","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1514","33d176364eccf0484608edd578b73656012f7a90","2020-08-11 00:09:58.946-04","2020-08-11T17:49:26.108Z","[]"
1877,1676,"WIP: test cases and fix for #1876 and #1877","","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1676","d790ae5933e01041fe908873087bd9b81d8641d8","2020-11-19 00:01:04.359-05","","[]"
1544,1468,"fix missing parameters to remove_overlap() definition","With GTS disabled (`--with-gts=no` to configure), an alternative definition of `remove_overlap` is in use, which had a parameter list that did not match its prototype. This realigns the function with its prototype. The changes here fix #1544.

I'll merge on 2020-07-19 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1468","18251ae0c326a3d2f0f5212cbde23a4130e9d31d","2020-07-14 00:05:22.666-04","2020-07-19T22:14:24.796Z","[]"
1800,2514,"markFn fix and related changes,","partial fix of #1800","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2514","d61a6638d24283905073110941dfc3737d9eb4a9","2022-03-14 00:04:21.365-04","","[]"
1696,1349,"PriorityQueue: don't include deprecated malloc.h","We could guard it with `#ifdef HAVE_MALLOC_H` but it is not necessary in any
case, stdlib.h (and possibly malloc.h), are already included by memory.h which
PriorityQueue.c includes.

Should fix https://gitlab.com/graphviz/graphviz/-/issues/1696","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1349","4b9079d9fc8634961d146609a420d674225dbe95","2020-04-27 00:01:41.286-04","2020-04-30T02:38:02.279Z","[]"
1963,1829,"Revert ""Revert ""Build docker images with buildkit""""","This reverts commit 6cdd95b8776d54eb1a474e1d90f7f3b7e85a7e01.

I'm now confident I can make Docker buildkit caching work after
observing it work on graphviz.gitlab.io. repo.

I now understand why I wasn't seeing caching before:
- I was pushing to my own fork of graphviz
- I didn't push to the master branch
- So I didn't build a `live` tag
- So I didn't have anything to cache from

Fixes #1963","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1829","6b2d1e4311bda0d575f04e1e5d04963030806479","2021-03-04 00:00:15.498-05","2021-03-05T09:21:32.664Z","[]"
2367,3140,"Autotools: remove autogen.sh from distribution tarball","Running autogen.sh extracted from the distribution tarball is not an intended
use case. This has the potential to produce Graphviz binaries with incorrect
version identities.

Gitlab: fixes #2367<br/>
Reported-by: Jaroslav Škarvada <jskarvad@redhat.com>","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3140","5548b077903704f9bc9acfeaa7afc045e2296abf","2023-03-29 00:09:07.378-04","2023-04-03T18:52:25.035Z","[]"
1836,2193,"Add Cygwin autotools build jobs to CI","This MR adds two new jobs to CI. The reason it's not only one is that I discovered in https://gitlab.com/graphviz/graphviz/-/merge_requests/2175/diffs?commit_id=6d646c82d94efdfb9933328f08301f6e1600943e that there was a problem when building from the portable source produced in CI, that did not exist when building from a portable source produced with Cygwin.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2193","53a9e5ea1040125cb0304f15b9d472c482142904","2021-09-26 00:03:30.321-04","2021-09-28T17:18:02.234Z","[]"
2173,2397,"Unfify the last storage class attribute declarations and add MinGW static autotools builds","The eighth and last step after !2376 towards making storage-class declarations follow the Graphviz ""standard"" as described in https://gitlab.com/graphviz/graphviz/-/issues/2058#note_678679545.

The previous steps were !2378, !2380, !2386, !2389, !2390, !2393 & !2394.

Related to, but not necessary for #2058.

Fixes https://gitlab.com/graphviz/graphviz/-/issues/2173.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2397","a18e3bc274d1697ce8331f6c7e2d84076b943c9e","2022-01-11 00:05:49.967-05","2022-01-12T08:47:59.461Z","[]"
2204,2543,"gvgen: remove unused unistd.h #include","More progress on #2204. As well as some warning squashing.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2543","8e814fac41791eca6698785c703400de91000185","2022-03-30 00:05:34.83-04","2022-04-02T18:52:08.556Z","[]"
2173,2378,"Unify storage-class declarations in cdt.h with Graphviz standard","A first step after !2376 towards making storage-class declarations follow the Graphviz ""standard"" as described in https://gitlab.com/graphviz/graphviz/-/issues/2058#note_678679545.

Related to, but not necessary for #2058.

Towards https://gitlab.com/graphviz/graphviz/-/issues/2173.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2378","1bd3d2dacc7934b5a56a6280ffead183099f4f74","2022-01-03 00:02:54.507-05","2022-01-05T08:19:59.229Z","[]"
1852,2419,"fix Gvedit `-?` and enable building in CI on macOS","Related to #1842, #1852, #1854.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2419","ddd4c16ab065b503bf081c639572d179ffefffe7","2022-01-30 00:01:39.083-05","2022-02-02T07:48:29.132Z","[]"
1879,2404,"add test case for #1879","Unfortunately we cannot xfail this test with `strict=True` because this test
passes or fails across various different platforms with no discernible pattern
to me. Results from the current commit:

  * pass: CentOS 7, CentOS 7 CMake, Fedora 35, macOS, macOS CMake, Ubuntu 20.04,
          MinGW 32 CMake, MinGW 64 CMake
  * fail: Fedora 34, Ubuntu 18.04, Ubuntu 18.04 CMake, Ubuntu 21.04,
          Ubuntu 21.04 CMake, Ubuntu 21.10, Ubuntu 21.10 CMake,
          Windows all debug builds","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2404","00880235ced31a0b522a22d5ef65ed23750d76f8","2022-01-15 00:06:44.975-05","2022-01-16T02:00:56.032Z","[]"
1943,1726,"remove Python 2 pytest installation in CI","We only support running the test suite with Python 3. Closes #1886.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1726","e8b3523ec6b264dc9a87bdf88d8fe8cde40216c7","2021-02-02 00:04:35.939-05","2021-02-13T19:36:38.978Z","[]"
1951,1785,"Revert ""Only run macOS CI on graphviz/graphviz repo""","This reverts commit 5052447d34a37421282b8eb5a9677097518b86b7.

There was some disagreement about this approach on #1951, rolling back so we can discuss further.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1785","77c3b048f198798791193a028a77bf903a5b325e","2021-02-20 00:08:24.404-05","2021-02-20T22:28:42.169Z","[]"
2145,2244,"smyrna: more dead code removal","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2244","d9b72871506add377a57bea534e454b911cf7a0c","2021-10-23 00:02:40.782-04","2021-10-30T01:21:56.128Z","[]"
2102,1739,"fix: depend on _MSC_VER instead of _WIN32 for use of __declspec import/export","Non-MSVC Windows environments (e.g. MinGW under Cygwin) do not understand
__declspec and so were failing to infer the correct declarations. This change is
mostly an educated guess, as I don't have a Windows machine to test MinGW on.
Fixes #1940.

----

@Synoecium, are you able to test this?","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1739","e5f6a6170d820c258bf50d0b8804b7678d0699f7","2021-02-11 00:01:43.926-05","","[]"
2088,2049,"SparseMatrix_copy: avoid calling memcpy with null pointers","The memcpy function technically requires both its pointer inputs to be non-null.
There is no special case for the length being 0. When running the example from
#2088 under UBSan, it detects this memcpy call as being performed with both null
source and destination pointers. It is unlikely any real world memcpy would
misbehave in this circumstance, but it is still good practice to avoid this.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2049","9a3c75beee271848a63a0d0927d383d2e500357d","2021-07-11 00:03:44.16-04","2021-07-17T20:21:02.673Z","[]"
1549,1425,"remove unused agutil","This code was not called from anywhere and was not being compiled, nor
distributed. Related to #1549.

I did the vcproj changes in a text editor as I don't have a Windows machine to test, so please let me know if you spot mistakes.

I'll merge this on 2020-06-15 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1425","fb974a86dfae0917a8a5646864eb0e39151c758c","2020-06-10 00:08:30.04-04","2020-06-16T00:25:18.532Z","[]"
1408,2577,"Draft: ortho: refactor checks","_Disclaimer: I don't know semantics of `np->cells`. If you know, pleae enlighten me. Or better add [doxygen] comments into the source._

I found that asserts in chkSgraph very likely are false negative
and redundant. Graphs, which trigger these asserts, after removing
asserts produce valid output. So I removed these asserts.

To preserve checks I've moved them from chkSgraph into
debug function emitSearchGraph.
Additionally I've made emitSearchGraph tolerant to absent cells.

Example of using `emitSearchGraph` with checks:

`dot rtest/14.dot -G'odb=s'`

Finally I've removed empty body and usage of function chkSgraph.

Fixes #14, #1408, #1447","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2577","1a4a2f39a40c90154048f13869b21073e4aeabb6","2022-04-09 00:03:17.307-04","","[]"
1750,2102,"fix path to which CMake install man pages","The CMake build system was setup to unconditionally install man pages to man3.
This is only correct for libraries, whose man pages have the extension .3.
Binaries have man pages with the extension .1 and were intended to be installed
in man1. Now both go to the correct man subdirectory. Fixes #1936.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2102","d7d54b75a29dabda682d9bed5b023649e1aa7c6b","2021-08-15 00:01:12.912-04","2021-08-23T04:05:55.024Z","[]"
2229,2640,"cgraph: remove 'itos'","This function was unsafe to use in the way described. It relied on semantics
that are not guaranteed under C99. That is, the lifetime extension of a struct
member of an rvalue. This changes under C11 to something that would make this
not problematic. But it is unlikely Graphviz will be able to migrate to C11 in
the foreseeable future as MSVC is lacking C11 support.

Gitlab: closes #2229","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2640","edea92223cadc27613b9955e865bdfc3dd684102","2022-04-26 00:06:30.541-04","2022-04-28T04:39:43.899Z","[]"
372,2907,"Fix issue 372 for box arrows","Following !2701, this MR fixes #372 also for box shaped edge arrows.

Towards https://gitlab.com/graphviz/graphviz/-/issues/372.

Below is a list of node shape families and arrow types to show which are fixed and not by this and previous MRs.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [ ] tee
- [x] box
- [ ] diamond
- [ ] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2907","dad7d7fe3e5a11442701f20aea40143f62fe8757","2022-10-13 00:00:22.665-04","2022-10-14T15:35:22.766Z","[]"
2259,2759,"smyrna: fix incorrect use of 'strtok'","This code was using `strtok` as if it splits based on the single separator
passed to it. But `strtok` actually treats the second parameter as a list of
character separators. In this change, we rephrase this code to do what its
original author appears to have intended.

Gitlab: fixes #2259","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2759","7e9e90eb56b1aa81f562d0a3029177a7fb7c025d","2022-07-14 00:03:51.336-04","2022-07-19T04:06:47.247Z","[]"
2272,2841,"cgraph: rewrite scanner to use an agxbuf","This is a reattempt of 2d7852a049b729fb0db71c5a8ef2366215ae2035. The original
change introduced a bug where unterminated strings (both `qstring` and
`hstring`) would not reset the buffer, causing an assertion failure the next
time a graph was parsed. This failed attempt was reverted in
16a04fe061bf6c9b3fe5fdc6250255a9b55cd337.

The approach taken here is essentially the same as
2d7852a049b729fb0db71c5a8ef2366215ae2035, except that it resets the buffer on
error conditions. This appears to be the only way to exit the `qstring` and
`hstring` states that was not covered by the original attempt.

Gitlab: related to #2272","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2841","5777eac99c55d2fcd1175e164aff65277d78f1e9","2022-09-13 00:07:28.444-04","2022-09-13T15:45:06.050Z","[]"
2184,2504,"Attempt to fix initialization of subgraph attributes on existing subgraphs...","Attempt to fix initialization of subgraph attributes on existing subgraphs when a new root graph attribute is created.

This needs meaningful testing since the new function unviewsubgraphsattr() is invoked on many test graphs.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2504","60f26a471629837fbb10182ffef6ff56511fb5eb","2022-03-08 00:04:13.262-05","2022-03-17T05:28:42.946Z","[]"
1408,2672,"final fix of four 🪲🪲🪲🪲 ortho bugs 🎉","Root cause of bugs were floating point comparison and precision issues.

Fixes #14, #1408, #1658 and #1990

Please read patch descriptions for details.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2672","d3248f7b8e965af98f4a3e1e47da716e41db2ff9","2022-05-16 00:02:41.946-04","2022-06-11T19:23:14.229Z","[]"
1652,1847,"profile target generator","I was mulling over how to deal with issues like #456 and #1652. One of the obstacles is that we can only ever get a partial profile of the workload because it cannot run to completion. So I wondered... could we figure out the interesting characteristics of the graph(s) and generate a smaller, but representative version?

This MR contains a script that repeatedly runs Graphviz and uses a bisect-like process to zero in on a graph that meets your profiling criteria. I just used it right now to get an appropriately sized graph that uses ≥100MB. The idea here is to, instead of finding an “expensive” test case, use a generator of expensive test cases that can understand and tune to your local environment.

Disclaimer: this script has barely been tested and likely contains bugs. But I'm proposing we use it to profile and see if it's worthwhile enough to keep around.

This is a pretty weird idea born out of my compiler-brain thinking, so let me know what you think.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1847","9f2c27bf395b24d7eab21d48f5172fd81414f3af","2021-03-18 00:03:06.522-04","2021-03-29T03:08:36.065Z","[]"
1613,1465,"WIP: Fixed uint_64_t type typo noted in 1613","(cherry picked from commit be51633a6409f9e49e31f8c7d024748480a01f67)
`uint64_t` is misspelled in a few cmake script templates. This is a minor issue mentioned in graphviz/graphviz#1613. It is marked as WIP because new compiler warnings are thrown which may indicate some declarations or casts are inadvertently changed. Needs review to ensure that fixing the typo isn't introducing additional issues","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1465","622c02c7e9eb66eee5e7b041df8dd44cb2feebe7","2020-07-13 00:00:35.324-04","","[]"
2257,2794,"remove $GV_FILE_PATH support","The `$GV_FILE_PATH` environment variable could be set to sandbox Graphviz’
ability to read and write to the file system. This made sense once upon a time,
but the world around Graphviz has shifted. Sandboxing yourself is no longer as
valuable a proposition as an external sandboxer that can be more easily audited.
Platforms’ ecosystems have matured to support this use case (Capsicum on
FreeBSD, Seccomp on Linux, App Sandbox on macOS, Pledge on OpenBSD, …).

This change makes any attempt to use `$GV_FILE_PATH` “fail-closed,” in the
sense that execution will be aborted. This may be surprising and not what the
user intended, but this conservatively guarantees safety: you can never think
you have enabled `$GV_FILE_PATH`-based sandboxing and be instead running
unguarded.

Gitlab: closes #2257","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2794","1e45fd838a7308f0a8e9712d8dbc2e486c265455","2022-08-16 00:02:23.776-04","2022-08-20T17:28:26.028Z","[]"
1740,1438,"Windows builds in the Gitlab CI/CD pipeline","* Adds the same builds as we currently have on Appveyor to the GitLab CI/CD pipeline
* When merged, will deploy binaries to https://www2.graphviz.org/Packages/development/windows/10/
* Includes an upgrade from Visual Studio 2015, Windows SDK 8.1 to Visual Studio 2019, Windows SDK 10.0
* Test run that deploys to https://www2.graphviz.org/Packages/experimental-development/windows/10/ can be seen [here](https://gitlab.com/graphviz/graphviz/-/pipelines/159672916). The Appveyor builds fail because Visual Studio 2019 is not supported there.
* When merged, the Appveyor builds will fail in master so want can't use them in parallel.
* Before merging I will prepare an update to the documentation

## Future enhancements deliberately not included
* Single source of truth for version numbering for autogen, CMake & MBuild (but !1440 provides this for CMake)
* Fix for https://gitlab.com/graphviz/graphviz/-/issues/1748
* Separation of Windows build and test jobs
* Windows Docker images with preinstalled prerequisites
  * Will speed up builds because no installations will be needed in the build jobs
  * Will remove the need for the git submodules containing dependencies","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1438","295817e55ebebb91be2262cca60868a69884247b","2020-06-24 00:01:04.873-04","2020-06-29T04:24:50.412Z","[]"
372,2585,"common: remove dead code in geomprocs","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2585","7d20ecfab8bb21eb87819c22bbc50d48d6ddc7a4","2022-04-12 00:04:47.812-04","2022-04-13T01:22:39.491Z","[]"
1801,1871,"remove a use of setjmp/longjmp","As discussed in #1801, removing use of `setjmp` and `longjmp` simplifies code and ongoing maintenance. This is the next step in this process.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1871","03de7c66f3395fb7a596fc803f4ac72c66190ef7","2021-03-27 00:06:40.92-04","2021-04-03T04:33:44.910Z","[]"
2058,2182,"Define GVDLL also in CMake builds for Windows","The GVDLL symbol has for a long time been used by the autotools build system to control whether to apply the Microsoft storage-class attributes, __declspec(dllexport) and __declspec(dllimport), that are needed when building dynamic-link libraries (DLLs) on Windows, also when using MinGW. The autotools build system does not define GVDLL when static linking is requested.
    
Since the introduction of the CMake build system, this functionality has gradually become more and more broken for both dynamic-link libraries with MinGW and for static libraries in general under Windows.
    
Upcoming commits series will try to restore this functionality. Rather than having a plethora of different symbols controlling the storage-class attributes in different ways for different build systems, they will settle on something like this across all build systems:
   
``` 
#ifdef GVDLL
#ifdef FOO_EXPORTS
#define FOO_API __declspec(dllexport)
#else
#define FOO_API __declspec(dllimport)
#endif
#endif
    
#ifndef FOO_EXPORTS
#define FOO_API /* nothing */
#endif
```

This means that in order to continue to support dynamic-link libraries with CMake, the GVDLL symbol must be set.
    
The CMake build system does not currently support building static libraries, so the GVDLL symbol can be unconditionally set for WIN32 until such support is introduced.
    
This is also a very small step towards https://gitlab.com/graphviz/graphviz/-/issues/2058.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2182","a6a8321725476d8c6150e4d8082632d6975d9ac6","2021-09-21 00:05:50.359-04","2021-09-26T07:36:39.156Z","[]"
2106,2079,"plugin/gdiplus: Fix warning with header file name","This fixes the following warning with clang in mingw
warning: non-portable path to file '<gdiplus.h>'; specified path differs in case from file name on disk [-Wnonportable-include-path]","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2079","48b86be809c318b108c35f866096b9c5aaf09b7f","2021-07-28 00:02:50.737-04","","[]"
1785,1582,"disambiguate #includes (3/5)","Following !1566, this is part 3 of the series towards #1242 and #1785.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1582","b686e0b523760508ec6821c83b84e67bf789fc12","2020-09-16 00:07:12.511-04","2020-09-22T15:13:15.953Z","[]"
1906,1687,"Trivial fixes","These two small fixes were originally written against 2.38.0, but still apply and may be relevant in some environments (depending on architecture and compiler settings).","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1687","dc27deaaea77019eb174da99008755f72cb7663b","2020-12-02 00:01:21.933-05","2020-12-10T04:57:01.296Z","[]"
2362,3122,"neatogen: replace quicksort_place with qsort","This removes the `quicksort_place` implementation with incorrect optimizations and replaces it with the standard `qsort`. Some clean up noticed along the way is included.

Gitlab: fixes #2362","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3122","ab56b6cfd903700d3b3d22699b876bd5b02063e2","2023-03-20 00:05:15.03-04","2023-03-27T01:17:52.679Z","[]"
2049,1922,"build: use `find_package(Python3)`","This bumps the CMake minimum version to 3.12 to enable the use of
FindPython3.  This allows the replacement of the `python3` with a
CMake variable defined by the module.  This avoids the additional
handling for python being renamed to python3.

This partially resolves #2049.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1922","07444e4e38ca32080d620219504dc3855ea3de6c","2021-04-25 00:06:20.593-04","","[]"
1806,1564,"remove ad hoc name mangling in HTML parser","The next part of #1806.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1564","e7710339fabfceb6247a5565433c1b39dfc0cb2c","2020-09-09 00:08:14.643-04","2020-09-15T04:43:08.339Z","[]"
1785,1594,"disambiguate #includes (5/5)","Following !1588, this is the final part of the series closing #1242 and #1785.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1594","c85507b001b4ff8eb87db7377e7364cf69c7628d","2020-09-29 00:07:22.697-04","2020-10-05T15:01:11.940Z","[]"
1447,2577,"Draft: ortho: refactor checks","_Disclaimer: I don't know semantics of `np->cells`. If you know, pleae enlighten me. Or better add [doxygen] comments into the source._

I found that asserts in chkSgraph very likely are false negative
and redundant. Graphs, which trigger these asserts, after removing
asserts produce valid output. So I removed these asserts.

To preserve checks I've moved them from chkSgraph into
debug function emitSearchGraph.
Additionally I've made emitSearchGraph tolerant to absent cells.

Example of using `emitSearchGraph` with checks:

`dot rtest/14.dot -G'odb=s'`

Finally I've removed empty body and usage of function chkSgraph.

Fixes #14, #1408, #1447","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2577","1a4a2f39a40c90154048f13869b21073e4aeabb6","2022-04-09 00:03:17.307-04","","[]"
2277,2927,"support SWIG 4.1.0 in the Autotools build system","Some other adjacent clean up and simplification included too.

Gitlab: closes #2277, closes #2303","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2927","6cffa891b9dfd2feb8835885ce6284eb6334e220","2022-10-30 00:09:03.995-04","2022-11-03T16:33:06.008Z","[]"
1868,1876,"fix: do not recognize ""&;"" as an XML escape sequence","xml_isentity was incorrectly recognizing ""&amp;;"" as an escape sequence. Despite
vague wording in the standard, it seems fairly clear that &amp;&lt;name&gt;; is only
intended to be a valid escape sequence when &lt;name&gt; is non-empty. Fixes #797.

Note that unfortunately due to #1868, we need to fix this bug four times in
copy-pasted versions of the same function.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1876","aa3174f945ba628840d9e9c844aa8fcf50ba959c","2021-03-31 00:00:35.497-04","2021-04-06T15:36:57.435Z","[]"
1603,1460,"replace vmalloc with system allocator (malloc)","This is the second half of !1456, that closes #1603 and #1757. As with !1456, I've tried to compose a set of fine-grained commits where every intermediate state passes the test suite and does not introduce any new compiler warnings. This change preserves the pool-style characteristic of vmalloc (see below), but the allocator method and discipline are no longer configurable. The system allocator (`malloc`) is always used.

I'll merge on 2020-07-17 if I don't hear objections.

# ""Why didn't you remove the vmalloc abstraction altogether and replace it with `malloc` and friends?""

It seems to me that lib/expr relies on using vmalloc as a pool allocator: it allocates blocks, which it never frees, assuming that a final call to `vmclose` will clean this up. To preserve the ability to do a final sweep clean up of an entire generation of allocations, I left the interface roughly the same.

# ""How does vmalloc accounting/metadata work now?""

An allocator instance, `Vmalloc_t`, tracks the heap pointers it has handed out in an array `allocated`. This array gets dynamically expanded, doubling each time it needs to be reallocated. `bestresize` and `bestfree` use the array to confirm pointers the allocator has previously given out. `vmclear` frees everything the allocator has given out (its ""pool"") and resets this array to its initial state. `vmclose` calls `vmclear` before deallocating the `Vmalloc_t` itself.

# ""How do I now debug memory leaks, use-after-free, etc?""

With conventional tools like [Valgrind](https://valgrind.org/) and [ASan](https://clang.llvm.org/docs/AddressSanitizer.html). This is actually somewhat easier than before, as vmalloc is now more transparent to these tools. Accidental memory leaks from a vmalloc caller are still hard to catch because a pointer to the allocation will remain in the `Vmalloc_t` metadata, so ASan/Valgrind will only flag this if the caller also fails to call `vmclose`. To make this more transparent, we would have to remove the use of vmalloc altogether.

# ""Does this affect performance?""

Honestly I have not profiled, but if anything I would expect this to accelerate Graphviz. The `malloc` implementations in libcs like Glibc and Musl have had decades of work put into optimizing them. While Graphviz' vmalloc seems like a solid design based on established strategies, it has had relatively little attention recently. Having said that, the existing vmalloc usages don't look like they're on hot paths to me, so I would not be surprised if there is no measurable difference.

# ""Why did you leave the `allocf`, `resizef`, `freef` function pointers when they're now always wired to the same functions?""

I guess I thought I'd quit while I was ahead :) We can certainly simplify this further in future.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1460","ff5a77bdc7670815b8c9ba7ce8d816b5113d952b","2020-07-12 00:00:39.706-04","2020-07-27T13:40:41.119Z","[]"
2179,2426,"add a test case for #2179","And some other minor cleanup","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2426","ebebd75e01c8197987a9f2f3e3e07cd07418b95d","2022-02-02 00:02:37.667-05","2022-02-04T06:56:16.760Z","[]"
2340,3049,"Autotools: fix non-portable syntax in configure.ac","Gitlab: fixes #2340","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3049","de11309e52a98067b19c45630c7d9a8d964f5547","2023-01-14 00:06:16.555-05","2023-01-15T16:58:53.863Z","[]"
2207,2490,"fix autotools out of source build errors","Fixes #2207 

Sample explanation:

Files in lib/expr need '..' to include generated expr/y.tab.h etc

Command:

(mkdir -p build && cd build && ../configure -q && make)","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2490","0d67f114ab553423c8f0ab1aaef0476c9a6202e2","2022-03-05 00:01:50.886-05","2022-03-12T21:01:25.058Z","[]"
1836,2445,"CMake: add a 'dot2gxl' symlink for 'gxl2gv', mimicking Autotools","Gitlab: #1753, #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2445","bb1677b2d62890a6cfb86bdb9dd84963a002135f","2022-02-14 00:05:23.672-05","2022-02-16T00:28:11.599Z","[]"
1352,1581,"Configure plugins at build time","This removes the need for the user (or our CI) to run `dot -c` after installation unless the user has their own plugins to configure. This is the way it has been for the `autotools` builds for a long time. This MR adds it for the rest of the build systems and installers/packages:

* The **CMake NSIS** .exe installer on Windows
* The **CMake Debian** package on Linux (added in https://gitlab.com/graphviz/graphviz/-/merge_requests/1578)
* The **CMake ZIP** archives on all operating systems (although these are not deployed anywhere today)
* The **MSBuild ZIP** archives

~~Only the last 5 commits needs to be reviewed in this MR. It currently contains the commits from https://gitlab.com/graphviz/graphviz/-/merge_requests/1578 since it removes the `dot -c` that was added to the CI config file in that MR. It will be rebased on the new master when that MR is merged, hence the WIP.~~","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1581","2c295a1373676cef2110aa0c5e23d993115c4597","2020-09-16 00:05:40.425-04","2020-09-30T07:49:08.166Z","[]"
2018,335,"Remove todo items migrated to the issue tracker","From https://gitlab.com/graphviz/graphviz/-/issues/2009
to https://gitlab.com/graphviz/graphviz/-/issues/2018

Towards #79","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/335","ef26ff252a993d13472612612b52ffc767f2724a","2021-04-12 00:02:51.453-04","2021-04-12T08:58:55.301Z","[]"
1837,1672,"Stable Release 2.46.0","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1672","d94465b13f1636f8e3e6a4f6dc69b9301b592534","2020-11-15 00:07:37.714-05","2021-01-18T17:47:32.226Z","[]"
1696,1332,"lib/cgraph: include empty malloc.h from subdir include","Hi, 

Having malloc.h directly in cgraph/ means that this file is found by all
other libs with `-Ilib/cgraph/`. Since it is only needed by cgraph we
can move it to a subdirectory and add `-Iinclude/` to the cgraph
Makefile only. If other libraries and plugins picks up the empty
malloc.h it causes problems on some systems when compiling for example
lib/sfdpgen/PriorityQueue.c and plugin/visio/VisioGraphic.cpp.

This seem to be related to issue https://gitlab.com/graphviz/graphviz/-/issues/1242, which discusses malloc.h as well as memory.h. 
I have not noticed any problems with memory.h though.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1332","7d2d4c70f224129e19d35b23bd86a8a4c3633aef","2020-03-28 00:04:04.194-04","2020-04-06T19:22:28.564Z","[]"
1794,1489,"fix inconsistent iteration order over subgraphs","This is a second attempt at fixing #1767. There's actually two different issues fixed here:
* use of a potentially stale pointer in the Pango plugin
* subgraph iteration order dependent on heap pointers

This MR involved touching some code I only partially understand, so this could do with a careful review by others.

I'll merge on 2020-08-07 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1489","14be5169ef49faad0f30cd9d36cdd438e1739f77","2020-08-01 00:07:48.739-04","2020-08-08T02:17:43.737Z","[]"
1320,1310,"[macos] fix up imgnode rendering","Fix for https://gitlab.com/graphviz/graphviz/issues/1320.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1310","0571cab0d97a2271379da4e6721e4c29d702505f","2019-03-19 00:01:40.629-04","2019-03-19T01:57:12.878Z","[]"
2329,3004,"CI: disable Cygwin jobs","These are currently erroring:

```
  $ wget https://cygwin.com/setup-x86_64.exe -OutFile C:\setup-x86_64.exe
  wget : <!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">
  <html><head>
  <title>403 Forbidden</title>
  </head><body>
  <h1>Forbidden</h1>
  <p>You don't have permission to access this resource.</p>
  </body></html>
  At line:1 char:1
  + wget https://cygwin.com/setup-x86_64.exe -OutFile C:\setup-x86_64.exe
  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExc
     eption
      + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
```

Gitlab: #2329","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3004","709acef44e13332a3c961bed3a2478c002f7b25f","2022-12-21 00:06:08.665-05","2022-12-21T05:26:49.472Z","[]"
2250,2761,"dot.demo: replace LDFLAGS with LDLIBS in Makefile","With LDFLAGS I am unable to build the demo programs using the Makefile
but the Makefile works with LDFLAGS changed to LDLIBS. We are using
pkg-config to obtain the appropriate libraries. So LDLIBS is the
appropriate variable to use.

Signed-off-by: Vincent Fu <vincentfu@gmail.com>","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2761","a0294d996146270be7dcac788eb31785ec34acb4","2022-07-15 00:06:48.154-04","2022-07-16T16:44:47.525Z","[]"
1907,1686,"revert changes to add non-local names to internal map","Merge Request !1489 made a change to which names were stored in the internal
map. Following this, non-local names (user-provided ones; not starting with '%')
were stored in the internal map as well as local names. This inadvertently broke
some fdp and circo assumptions (#1876, #1877, !1676).

This change reverts the main pieces of the following commits, resolving #1876
and #1877, while re-opening #1767 and #1789.
   * 4f283dd1c02a6a4999b53ad2fcbf2264a7074a8b
   * 85b09cf13179b0e5ab8bddb4857e3d2af0a39a31
   * 9409324489a69557229d3d6f505857b9af85a913
   * 2a9449a99b2a2146fce01fa1d9713e999ad3dd4e
   * 14be5169ef49faad0f30cd9d36cdd438e1739f77
   * b6ffeca3a4457efcffbc3fcdbcee683375f74d05

We will need to find a different solution to #1767.

----

This is a more conservative MR that supersedes !1676. It simply backs out the original changes, reopening some issues.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1686","25e2d0cc91e026b54ebde6f1c7133d36ddb3bcdf","2020-11-29 00:03:19.22-05","2021-01-12T01:18:19.767Z","[]"
1806,1538,"Use updated winflexbison version 2.5.22","* Updates bison to version 3.5.0 and flex to version 2.6.4.
* The executables in these versions have changed names by an added `win_` prefix compared to those previously used.
* Adapts the build utilities setup script and MSBuild project files to the new names. CMake finds them automatically.
* Requires https://gitlab.com/graphviz/graphviz-build-utilities/-/merge_requests/11.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1538","ee1c3aa73797e4074cbcf60d2ea1d65f1222e3fc","2020-08-25 00:09:39.757-04","2020-08-26T04:56:42.384Z","[]"
1919,1731,"remove use of regex for identifying plugin libraries"," This removes some dynamic allocations and failure paths, accelerating the
    determination of the ""is this library a Graphviz plugin?"" check. Though the root
    motivation here is removing a dependency on regular expressions. The resulting
    code being more efficient is a pleasant side effect. A step along the way to
    #1919.

----

This refactors some pretty fiddly code, so I'd appreciate a close review if anyone has time.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1731","e9433e3289bd4650abdb91dda5f8932f262d9813","2021-02-05 00:02:46.594-05","2021-02-14T17:03:22.278Z","[]"
2147,2284,"fail deployment if a release exceeds 50 artifacts","Following commit 0155cabbb7b22494b3d5da1425059387d8236cf2, the number of
artifacts produced during packaging is down to 40. We expect this count to rise
as the CMake build system continues to be worked on, operating systems move in
and out of support cycles, and the Cygwin/Msys builds are tweaked. This change
introduced a safe guard to fail deployment if the number of artifacts grows to
exceed 50 again.

Related to #2147.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2284","05a5cb89a22200943e7a16045204d62f71c90572","2021-11-16 00:03:43.945-05","2021-11-21T06:53:42.562Z","[]"
1801,1883,"remove another use of setjmp/longjmp","Related to #1801.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1883","e111773d6399a86214049b44c4d8f774b538e9d4","2021-04-03 00:00:06.536-04","2021-04-10T02:05:56.806Z","[]"
1746,1469,"Extended error messages to detect missing formats and layouts. Related to #1746","Changed error messages if the list of available formats and layouts returned by `gvplugin_list()` is empty. Added a prompt to configure plugins with `dot -c` if the response string was short (<2 chars) otherwise retained previous behavior - it should only show a list of formats and layouts if the list is not too short (not ""empty"").

This is essentially !1442 but maintaining source code style to simplify review. Whitespace and commenting were revised based on comments - thanks for the feedback.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1469","24072022c35acc3b4e7c33477fbe284332d1de80","2020-07-16 00:07:56.841-04","","[]"
2102,2061,"Replace redefinition of extern","Redefinition of `extern` made it much harder to understand the code.

This MR replaces this redefinition by instead defining macros that are named after the file in which they are used or, in one case, removes a useless redefinition. It's meant to be a non-functional change. No other changes other than those needed to avoid redefining `extern` has been made.

A baby step towards #2058.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2061","ef5fa2b8ec4cc61aac7350bad93da9a4ac3de32e","2021-07-20 00:08:18.164-04","2021-07-21T17:19:56.250Z","[]"
372,2824,"Add edge and node overlap test case for issue #372","Following !2780, !2797 and !2808, this is the fourth in a series of MRs extracted from !2702 and !2701. It adds a first simple test case that tests overlap between a `forward` edge with a `normal` arrowhead and a `polygon` node shape using the `TB` layout direction and a fixed `penwidth` of 2. Upcoming MRs will add test cases testing many other variants using other settings of the Graphviz attributes controlling this so the test infrastructure is already in this MR *slightly* prepared for that.

Upcoming MRs include:

- Writing of annotated SVG files for visual inspection when the test case fails.
- Fixes for maximum overlap problems (#372).
- Test cases for minimum overlap test.
- Fixes for the minimum overlap problems.
- Test cases for testing overlap between the edge path (stem) and it arrowhead or arrowtail.
- Fixes for overlap problem between an edge path (stem) and its arrowhead or arrowtail
- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.

Towards #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2824","929b729915db241c62af20262b566eedd859b332","2022-09-05 00:02:05.63-04","2022-09-06T20:28:49.513Z","[]"
2102,2124,"Clean up cgraph linking","Inspired by https://gitlab.com/graphviz/graphviz/-/merge_requests/2107#note_659379789. Similar to !2116 and !2123.

Includes two minor, closely related, include directory clean ups that were investigated along the way.

Implicitly towards #2102.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2124","f245611567973bdb33cfdd306eb8705fea0485e6","2021-08-29 00:07:05.702-04","2021-08-29T21:03:02.993Z","[]"
2109,2164,"fix inability to include and use gvc.h from a parent CMake project","When attempting to declare a dependency on gvc when using Graphviz as a CMake
     subproject, the include path necessary to compile gvc headers would not be
     propagated to dependent targets. The result would be a compilation error when
     the transitive includes of gvc.h could not be found.

To validate this change, create an empty directory and add the following
     CMakeLists.txt:

       project(foo)
       add_subdirectory(graphviz)
       add_executable(bar main.c)
       target_link_libraries(bar gvc)

Add the following main.c:

       #include <gvc/gvc.h>
       int main(void) { return 0; }

Clone Graphviz into the subdirectory 'graphviz'. Then the standard CMake steps:

       mkdir build
       cd build
       cmake ..
       make

Note that Graphviz dependencies and then 'bar' are correctly built.

I am not a CMake expert; this was written based on my best guess of what
     Graphviz should be doing according to the CMake docs. Assuming this is correct,
     other Graphviz targets probably need similar fixes.

Fixes #1477, #2109.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2164","dcc5ed93775b66339c14f297e35c91f1cf3dd43a","2021-09-15 00:00:01.212-04","2021-09-21T01:01:42.968Z","[]"
1806,1580,"remove ad hoc name mangling in the gml parser","The last part of the series that closes #1806.

Interestingly, after these changes, the version component extraction is the only place `sed` appears to be used in the MSBuild files. With a little refactoring of the version script, we could probably drop `sed` as a dependency on Windows.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1580","bc9b6192ccee5aedc0dad19ece0383e4f2951cfa","2020-09-16 00:07:36.102-04","2020-09-22T15:01:39.286Z","[]"
1800,1489,"fix inconsistent iteration order over subgraphs","This is a second attempt at fixing #1767. There's actually two different issues fixed here:
* use of a potentially stale pointer in the Pango plugin
* subgraph iteration order dependent on heap pointers

This MR involved touching some code I only partially understand, so this could do with a careful review by others.

I'll merge on 2020-08-07 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1489","14be5169ef49faad0f30cd9d36cdd438e1739f77","2020-08-01 00:07:48.739-04","2020-08-08T02:17:43.737Z","[]"
1773,1541,"Fix path too long using Windows CMake build .exe-installer","Fixed by using updated preinstalled NSIS with string length 8192.

Fixes https://gitlab.com/graphviz/graphviz/-/issues/1770.

Requires https://gitlab.com/graphviz/graphviz-build-utilities/-/merge_requests/12.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1541","66ed0ec6b34575d6ca2f0664e7f5c0efa8e1404e","2020-08-26 00:04:08.613-04","2020-08-26T14:52:18.438Z","[]"
1835,2335,"enable Mingle on CentOS","This series removes CentOS 8 CI and enables Mingle on CentOS 7. We should be able to merge this in January 2022 when CentOS 8 will be EOLed. I chose to do it this way rather than add complexity to discriminate Mingle still not being enabled on CentOS 8. libANN is not packaged for CentOS 8, so enabling Mingle there would be more complicated.

We'll need a different solution to the Ubuntu part of #1835. libANN is packaged for all supported Ubuntu versions. However, the packaged version does not include `pkg-config` PC files, so Graphviz' libANN detection code fails to find it.

#1835.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2335","7a697bb74e7f30c006d96e181e112e10ec08cb27","2021-12-11 00:01:02.489-05","2022-01-04T01:59:27.927Z","[]"
2058,1926,"Merge `pack` into `gvc`","The pack library was being built as an internal library meant to be
merged into the gvc library.  This migrates the sources into the same
directory.  It takes the opportunity to remove the `libpack.pc.in` file
which was no longer being processed to generate `libpack.pc` and no such
pkg-config file was being installed.  The man page for gvpack is also
updated to remove the reference to the libpack entry.

The last remnants of the libpack are in the installed man page for pack
(now from the gvc directory).  The entity is now fully merged into GVC.

This is not an ABI break, the library has been part of gvc, it simply
brings the build systems more inline with each other.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1926","b32803f8d9631205e7f211fea3c4d94d7c77ded6","2021-04-25 00:07:34.589-04","","[]"
1868,2247,"VML plugin: replace `html_string` with `xml_escape`","The next step in the #1868 journey.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2247","8844fbddfcccb692c8083fa729fa5af211e408dd","2021-10-23 00:06:57.434-04","2021-10-30T03:35:26.698Z","[]"
1785,1566,"disambiguate #includes (2/5)","Following !1555, this is part 2 of the series towards #1242 and #1785.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1566","c35653d9a0eda7084dedbf95da0e2388c24e9dca","2020-09-10 00:05:24.163-04","2020-09-16T14:41:34.380Z","[]"
1720,3011,"also allow macOS to fail the long chain test","It seems this test can also fail in CI on macOS.

Gitlab: #1710, #1720","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3011","9f7c37b77f6f8be529a69a7ec05a001234642ea6","2022-12-24 00:08:20.464-05","2022-12-25T01:16:09.953Z","[]"
2357,3105,"pathplan: tidy up shortest path code","This MR removes some unused variables, reduces the scope of others, and generally tries to make the shortest path code more readable.

Gitlab: Closes #2357","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3105","9421146008a53f7ed0deea3439857ad016c15b55","2023-03-13 00:06:09.184-04","2023-03-19T05:08:07.612Z","[]"
2008,334,"Remove wishlist items; migrated to issues.","- https://gitlab.com/graphviz/graphviz/-/issues/2008
- https://gitlab.com/graphviz/graphviz/-/issues/2007
- https://gitlab.com/graphviz/graphviz/-/issues/2006
- https://gitlab.com/graphviz/graphviz/-/issues/2005
- https://gitlab.com/graphviz/graphviz/-/issues/2004

Towards #79","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/334","3ce61ffda1d7becef3f70b7a5f2111c7332c5d98","2021-04-10 00:04:59.859-04","2021-04-10T23:51:33.660Z","[]"
1793,2591,"ccomps: replace inline stack implementation with generic API","Similar to previous changes to `gc` in 4e2875fd7376338259dcb3ccc8f029d58bdf22dd,
this replaces some duplicated functionality with the generic Graphviz stack
implementation.

Gitlab: #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2591","7763f82768a61beaf3537839d2b6e478474c86c7","2022-04-13 00:04:40.406-04","2022-04-14T04:22:04.203Z","[]"
1710,1371,"Skip test_large_graphs on Windows","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1710

Makes https://gitlab.com/graphviz/graphviz/-/merge_requests/1370 obsolete.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1371","dca8d482def57abb30398ca551533cb5c699a58e","2020-05-22 00:06:25.895-04","2020-05-22T06:57:23.316Z","[]"
2364,3124,"CI: fix: have windows_build.py write to log file directly instead of via pipe","As discussed on #2364, this series makes Windows CI failures no longer silent (observe the CI failure runs for the second commit in this series) and then repairs the breakage.

With yet another PowerShell-induced fail-open scenario, we should perhaps escalate the process begun in be7e75f688b99211d517f5592f08be699cd9bf14 of moving as much logic out of PowerShell as possible.

Gitlab: fixes #2364","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3124","c2375cf30f97ed63885092d4d2ce9c127bd45e9c","2023-03-21 00:08:06.343-04","2023-03-21T23:19:00.966Z","[]"
1907,1690,"Don't add colons into edge titles if hp or tp is an empty string.","This was a regression in !1527.

Fixes #1907","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1690","12376b927a7c7e2d7b3198d7e85ba63945929fcf","2020-12-16 00:01:52.058-05","","[]"
2095,2925,"minimize test case for #2095","Graphviz periodically runs into problems where CI test jobs exceed the maximum
timeout and recently the project as a whole has exceeded its Gitlab CI quota.

`test_2095` is by far the longest running component of the test suite. This
change is the result of applying two test case minimizers, one clever¹ and one
not so clever², to the input to this test case. The minimizers were asked to
find smaller input that still (1) provoked a segfault on
588096bd638543ea851ea22751ed91549f61a407 and (2) could be processed successfully
on 32feee561394530713292f8873020fc5feacb9fb. The result takes a ~103KB test
input to ~5KB, with execution time in an example environment dropping from
~155s to <1s.

Gitlab: closes #2304

¹ https://github.com/googleprojectzero/halfempty
² https://github.com/Smattr/mattutils/blob/master/shrink","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2925","3819821ea70fae730dd224936628ed3929b03531","2022-10-26 00:06:44.326-04","2022-11-02T05:31:14.869Z","[]"
2118,2254,"rewrite strps.awk in Python and inline it","This also removes the `doit` script which is unused.

Related to #2118.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2254","4b147a6ab9cba20f4e95d5514d64f46bd3beb4af","2021-10-30 00:06:15.044-04","2021-11-06T21:16:01.560Z","[]"
2272,2831,"Revert ""cgraph: rewrite scanner to use an agxbuf""","This reverts commit 2d7852a049b729fb0db71c5a8ef2366215ae2035. This commit
introduced a bug where the string buffer was assumed to be uninitialized when
beginning parsing a string, but it may not be if a previously unterminated
string was processed.

Github: fixes #2272
Reported-by: Rob Hart <robhart@google.com>","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2831","16a04fe061bf6c9b3fe5fdc6250255a9b55cd337","2022-09-08 00:07:11.203-04","2022-09-09T14:42:05.476Z","[]"
2228,2694,"Stable Release 4.0.0","I propose cutting the next release on 2022-05-29.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2694","37f58fd8c96e432c882df37590874f4461fcde13","2022-05-24 00:08:28.71-04","2022-05-29T09:37:46.180Z","[]"
2160,2323,"remove Ming plugin","The format this plugin produces, Adobe Shockwave, was officially EOLed by Adobe
in April 2019.¹ Legacy support for SWF files was available through Adobe Flash
Player. Flash Player was subsequently EOLed in December 2020 with Adobe
considering it such a security risk they flipped a kill switch in January 2021
making it no longer possible to run Flash Player anywhere.²

Closes #2160

¹ https://helpx.adobe.com/shockwave/shockwave-end-of-life-faq.html
² https://www.adobe.com/au/products/flashplayer/end-of-life.html","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2323","ab6d5208852be0a2165d28b6d146560aaae2ad1e","2021-12-05 00:05:15.766-05","2021-12-11T06:13:44.061Z","[]"
2256,2740,"xlib plugin: relax button value assertions","Contrary to the X11 documentation,¹ it seems button values other than 1-5 can be
returned as button press events. The assertions altered in this commit were
introduced to guarantee the value does not exceed the limits of the type of the
parameter in the user’s callback (`int`). So we can safely relax this to just
the limit itself.

Gitlab: fixes #2256

¹ https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.html#Keyboard_and_Pointer_Events_b","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2740","074eb326b2e60a529bbe8b3c7b3586f13e1d5f09","2022-07-04 00:06:03.26-04","2022-07-09T06:14:00.771Z","[]"
1836,2566,"CMake: enable installation of example graphs","Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2566","28986573f2db664597354a22684472fe0e78af51","2022-04-07 00:06:21.567-04","2022-04-12T05:25:35.850Z","[]"
2144,2253,"remove Ubuntu 20.10 from CI testing","Ubuntu 20.10 was EOLed on 2021-07-22.¹ Related to #2144.

¹ https://wiki.ubuntu.com/Releases","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2253","c093197243dc59040b5f59d359281f29389ccb79","2021-10-27 00:04:07.235-04","2021-10-30T17:26:39.627Z","[]"
372,2849,"Add even more overlap test cases","Following !2780, !2797, !2808, !2824, !2828 and !2845, this is the seventh in a series of MRs extracted from !2702 and !2701. It adds even more overlap test cases.

**NOTE:** Some of the test cases are redundant. This is deliberate. An upcoming MR will add several different fixes to the overlap problems seen. Having separate test cases for different problems will help understand which fixes affect which problems as their expect-to-fail status is changed. Especially since some commits that fix one problem introduce a new problem which is then subsequently fixed in a later commit. Once #372 is fully resolved, we can remove the redundant test cases if we so choose.

Upcoming MRs include (not necessarily in this order or partitioned like this):

- Fixes for maximum overlap problems (#372).
- Fixes for minimum overlap problems.
- Fixes for overlap problem between an edge stem and its arrowhead or arrowtail
- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.

Towards #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2849","e94b539d6bc4fc0c9fc9a86435b481e856a46efb","2022-09-20 00:01:41.345-04","2022-09-22T09:18:34.292Z","[]"
1940,1739,"fix: depend on _MSC_VER instead of _WIN32 for use of __declspec import/export","Non-MSVC Windows environments (e.g. MinGW under Cygwin) do not understand
__declspec and so were failing to infer the correct declarations. This change is
mostly an educated guess, as I don't have a Windows machine to test MinGW on.
Fixes #1940.

----

@Synoecium, are you able to test this?","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1739","e5f6a6170d820c258bf50d0b8804b7678d0699f7","2021-02-11 00:01:43.926-05","","[]"
2227,2887,"Import cairo-svg.h without cairo/ prefix","Some places in our codebase we load `cairo.h` directly.

This seems to pass CI. And it makes me able to build graphviz on macOS.

Seems pretty common for OSS projects to include `cairo-svg.h` like this: https://github.com/search?l=C&q=include+cairo-svg.h&type=Code, though there is a mix of `cairo-svg.h` and `cairo/cairo-svg.h`.

Fixes #2227","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2887","09f57cc46332d96dad7f6cd6c6e873b4ec23b9b4","2022-10-08 00:00:15.711-04","","[]"
56,1621,"clean up and a UB fix","This extracts the more finalized commits from !1614. #56 requires more debugging, but I thought I may as well land this clean up series immediately.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1621","5c9958047d05129dd23b338e8a7f078f18db4d80","2020-10-21 00:00:46.865-04","2020-10-27T14:42:54.140Z","[]"
2358,3029,"CMake: Set HAVE_PANGOCAIRO to 1 if found","","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/3029","6c1049de1a746f2966cad8207fe9b886687c0c20","2022-12-31 00:09:40.677-05","","[]"
2058,2058,"Add a very basic C++ API","This is the C++ API part of !2033 which was too large. The implementation has been modified according to the discussion in https://gitlab.com/graphviz/graphviz/-/merge_requests/2033#note_619077068.

The new C++ API supports creating a graph from DOT source, performing a layout of that graph and rendering it to a specified format.

An upcoming MR will add the layout construction overloads using rvalue refs discussed in that thread and an additional upcoming MR will add the SVG analyzer part of !2033.

Closes #2001.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2058","d57d5a12482a328cec277787c776c2e683ac92eb","2021-07-18 00:09:20.629-04","2021-08-07T06:49:46.910Z","[]"
2225,2572,"Fix unintended recursion in vec_delete","Fixes #2225","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2572","dbe5dbb222eb419d3498e73166621fb97a539fb9","2022-04-08 00:07:36.27-04","2022-05-05T00:58:45.743Z","[]"
1854,2537,"remove unused Smyrna icons","Like !2533, this is another subsequence of commits extracted out of my upcoming Smyrna CMake series for ease of review. This removes a number of unused files, to avoid having to replicate lots of unnecessary steps in the CMake build system.

related to #1836, #1854","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2537","5d4bdb6ce367e7347a50374185b42481f1c66d50","2022-03-27 00:02:40.92-04","2022-03-29T03:08:43.533Z","[]"
1213,1671,"remove another setjmp/longjmp use","And a few janitorial commits included.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1671","cac3f9c8f18553b272387a9701a5d0c7762bc2f0","2020-11-14 00:01:02.964-05","2021-01-23T05:06:59.429Z","[]"
2269,2819,"sfdpgen cgraph/alloc.h migration, clean up, fixing incorrect 'MAX' calls","This began as another MR around migration from lib/common/memory.h to lib/cgraph/alloc.h. But it quickly derailed into fixing #2269.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2819","a99f268ff09a05ed854e137ea591504079140775","2022-08-28 00:06:48.269-04","2022-08-31T01:45:09.816Z","[]"
1808,1672,"Stable Release 2.46.0","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1672","d94465b13f1636f8e3e6a4f6dc69b9301b592534","2020-11-15 00:07:37.714-05","2021-01-18T17:47:32.226Z","[]"
1807,1549,"fix failure to link gvpr with debug enabled","When using `CFLAGS=-DDEBUG CXXFLAGS=-DDEBUG ./configure --enable-debug`, gvpr
would fail to link due to missing libraries. Fixes #1807.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1549","71acd1ab49d4e6419c78d17038ba26698dc8c994","2020-08-30 00:06:04.248-04","2020-09-05T17:18:15.419Z","[]"
1934,1760,"fix multiple definitions of CDT variables under MinGW on Windows","Building with MinGW on Windows resulted in lots of build errors of the form:

  …/x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):
    dtdisc.c:(.bss+0x0): multiple definition of `Dtset';
    CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first
    defined here

The problem is that this environment defines `_WIN32`, so it sees the `__declspec`
alternatives for `CDT_API` in cdt.h. This is fine as GCC understands `__declspec`,
but it results in variable declarations in this header then missing the `extern`
qualifier. GCC’s semantics, in contrast to MSVC, interpret this as a definition
rather than a declaration.

The solution here is to *always* apply `extern` to these declarations, as MSVC is
happy with this as well. This is only addressing the immediate cause, and not
the longer term issue that `__declspec(dllexport)` and `__declspec(dllimport)` in a
Windows build should really be mapped to `__attribute__((visibility(""default"")))`
and `__attribute__((visibility(""hidden"")))` in a non-Windows build, not to `extern`.

Fixes #1940. Thanks to @Synoecium and @swaldhoer for guidance on this fix.

----

@synoecium, @swaldhoer, do you have a chance to review/test this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1760","88ca57327b090c4b0003f07e3bd243c95d7c95a4","2021-02-15 00:04:45.622-05","2021-04-24T16:27:24.371Z","[]"
1763,1591,"fix build system support for pstopdf","After discussion on #1763 and !1577, I have a clearer idea of how to solve this situation once and for all. The big picture plan is:

1. Make Autotools PDF build rules agnostic to whether they're calling `pd2pdf` or `pstopdf`;
2. Autodetect either `ps2pdf` or `pstopdf` during `./configure` and use whichever is found for `@PS2PDF@`;
3. Introduce a configure switch (`--with-man-pdfs`? `--enable-man-pdfs`?) for controlling whether you *want* PDF versions of the man pages;
4. Plumb all of this, or equivalents, to the CMake build system
5. Plumb all of this, or equivalents, to the MSBuild build system

The present MR takes care of (1) and (2). @truenorth, can you confirm these changes make the Autotools build generate PDFs on macOS even without Ghostscript installed?

My plan for (3) is a switch with three states: ""auto"" (the default), ""on"", or ""off"". ""auto"" is equivalent to ""on"" if you have either `ps2pdf` or `pstopdf` (`HAVE_PS2PDF` being defined, following !1577), or to ""off"" if you do not. ""on"" makes the PDF generation rules visible. ""off"" makes them invisible and makes all the `$(pdf)` variables empty. This should give us the following matrix when not passing a switch and defaulting to ""auto"":

| have `ps2pdf`? | have `pstopdf`? | `make` from a repository clone | `make` from the portable source tarball |
| --- | --- | --- | --- |
| N | N | build succeeds; no PDFs generated | build succeeds; PDFs from the tarball untouched |
| N | Y | build succeeds; `pstopdf` used to generate PDFs | build succeeds; `pstopdf` used to *re*-generate PDFs |
| Y | N | build succeeds; `ps2pdf` used to generate PDFs | build succeeds; `ps2pdf` used to *re*-generate PDFs |
| Y | Y | build succeeds; `ps2pdf` used to generate PDFs | build succeeds; `ps2pdf` used to *re*-generate PDFs |

With this, I am aiming for the [principle of least surprise](https://en.wikipedia.org/wiki/Principle_of_least_astonishment). Namely, that the user's build will more-or-less always succeed and give them what they were expecting. Please comment if you see a flaw in the above table or description.

I have no plan yet for (4), but I'm sure I can cross that bridge when I get to it. I also have no plan for (5), and I do not know how to do this. I have no Windows environment in which to test and MSBuild is an inscrutable creature to me. I will need someone else's help with this. (Alternatively, do Windows users building from source even care about these PDFs?)","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1591","7379ed8c5c60ff7d50bb4d7c0573e1d9d002de6b","2020-09-26 00:02:51.778-04","2020-10-02T14:21:04.979Z","[]"
1752,1516,"Remove config6 when uninstalling Windows CMake Graphviz","Fixes https://gitlab.com/graphviz/graphviz/-/issues/1752","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1516","04c753336c02c03657988512adadd0b2c2d7884b","2020-08-11 00:09:23.262-04","2020-08-12T05:41:01.742Z","[]"
2171,470,"Remove, redirect duplicates of dot.demo/*","Further cleanups following https://gitlab.com/graphviz/graphviz/-/issues/2171","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/470","7d3b62fa2aeed916bc8054f8e2b8bdf3d4ba97c2","2022-01-18 00:03:55.199-05","2022-01-18T07:26:10.215Z","[]"
372,2808,"Extend the SVG analyzer to handle Graphviz penwidth, pencolor and fillcolor attributes","Following !2780 and !2797, this is the third in a series of MRs extracted from !2702. It adds handling and testing of the Graphviz `penwidth`, `pencolor` and `fillcolor` attributes which translate to the SVG `stroke-width`, `stroke`, `stroke-opacity`, `fill` and `fill-opacity` attributes. The SVG analyzers's capability to re-create the SVG is also extended with those attributes. This will be used in an upcoming MR that will add a test case for !372 and the capability to generate annotated SVG files for visual inspection.

Upcoming MRs will extend the functionality further, create a test case for node and edge overlap and fixes for these overlaps.

This MR also cleans up some minor imperfections left over from the previous MRs.

Towards #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2808","fc94305254081eab29c6663d74c8112be20757bf","2022-08-23 00:03:08.18-04","2022-09-05T08:05:25.063Z","[]"
1838,1581,"Configure plugins at build time","This removes the need for the user (or our CI) to run `dot -c` after installation unless the user has their own plugins to configure. This is the way it has been for the `autotools` builds for a long time. This MR adds it for the rest of the build systems and installers/packages:

* The **CMake NSIS** .exe installer on Windows
* The **CMake Debian** package on Linux (added in https://gitlab.com/graphviz/graphviz/-/merge_requests/1578)
* The **CMake ZIP** archives on all operating systems (although these are not deployed anywhere today)
* The **MSBuild ZIP** archives

~~Only the last 5 commits needs to be reviewed in this MR. It currently contains the commits from https://gitlab.com/graphviz/graphviz/-/merge_requests/1578 since it removes the `dot -c` that was added to the CI config file in that MR. It will be rebased on the new master when that MR is merged, hence the WIP.~~","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1581","2c295a1373676cef2110aa0c5e23d993115c4597","2020-09-16 00:05:40.425-04","2020-09-30T07:49:08.166Z","[]"
1968,269,"Assemble colors.html in this repo","This allows removing colors.html.j2 template from the main graphviz repo.

One fewer source of truth.

Towards https://gitlab.com/graphviz/graphviz/-/issues/1968","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/269","bb81b04fc7a2a96b6e5455372c02146e9a316b69","2021-03-02 00:04:47.464-05","2021-03-02T09:10:09.455Z","[]"
1852,1592,"Add tools test","The overall goal of this MR is to add extremely basic testing of all (to me, to Ubuntu 18.04 autotools and to Windows MSBuild) known tools in the Graphviz suite. What is tested is that it is possible to start the tool and have it report its usage. In order to be able to achieve this, usage was added to some tools where missing and fixed in some tools where broken. No issues were written on these minor bugs, but CHANGELOG entries has been added for all of them.

Additional changes included in this MR that are not strictly necessary, but related and stumbled upon while working on it are:
* Add archiving of test report also from CI tests on Windows
* Fix apparently incorrect indentation disturbing understanding of changed functionality.
* Fix edgepaint -o option

Additional necessary fix:
* Fix gvmap.sh to be executed by the correct interpreter (ksh)

This MR stands on it's own feet, but the real reason for doing it now is to have better testing before dealing with https://gitlab.com/graphviz/graphviz/-/issues/1820.

Tools that do not exist or for some reason is broken for a particular combination of OS and build system are skipped and the code, commit messages and skip messages contain references to issues describing what the problem is.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1592","3ee3e2df9101be7f02506d561282280556e564b2","2020-09-26 00:01:33.365-04","2020-10-02T14:29:45.305Z","[]"
2092,2627,"dot2gxl: fix crashes when given an empty node id","fixes #2092","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2627","153797a64cab66f8d27e271ce0c03c2afbdc37b3","2022-04-22 00:05:18.82-04","2022-04-23T17:50:26.544Z","[]"
1988,1949,"narrow dependencies of Docker-push tasks","The Docker push jobs were depending on all prior jobs which was overly
restrictive. Each push job only needs the image it itself needs to push. Closes
#1988.

@markhnsn do you have time to review this?","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1949","b59f9e7942ab8fdffa58fb7a9e7d5337f6843971","2021-05-08 00:05:46.905-04","2021-05-14T15:24:45.533Z","[]"
1979,275,"Link to GitLab releases, not package registry","I think the releases page is a little more user-friendly.","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/275","c5c33b2d4d944ec746e0bc3d5f9280e515c9181a","2021-03-17 00:00:38.919-04","2021-03-17T08:32:32.945Z","[]"
1806,1543,"remove ad hoc name mangling in cgraph parser","Following the merge of !1538 (thanks @magjac), this MR takes a step towards #1806. I reworked my previous changes, added some more verbose commit messages and ran CI commit-by-commit. The relevant characteristics people are likely interested in:
* Flex ≥ 2.5.2 is now a base line requirement. This does not seem like a big deal to me as this lexer was already incompatible with Lex, and Flex 2.5.2 was released in 1995.
* Bison ≥ 3.0 is now a base line requirement. I'm not aware of any significant remaining Yacc usage, and Bison 3.0 was released in 2013.
* This realigns one part of the MSBuild setup that previously differed from Autotools and CMake. This lexer and scanner now use the ""aag"" prefix regardless of which build system you compile with.

I'll merge on 2020-09-01 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1543","0dffcfefcb8cb1b64bc84c003107105590a11bd4","2020-08-27 00:01:57.869-04","2020-09-02T00:45:10.772Z","[]"
1903,2200,"remove explicit support for PHP5 SWIG bindings in the Autotools build system","Older versions of SWIG can generate bindings for a variety of PHP versions.
Periodically SWIG bumps the version of PHP targeted by the default flag,
`-php`:¹

    SWIG version       `-php` effect   PHP5 support?   PHP7 support?
    ================================================================
    <1.3.26            `-php4`         no              no
    ≥1.3.26, <1.3.37   `-php4`         yes             no
    ≥1.3.37, <3.0.11   `-php5`         yes             no
    ≥3.0.11, <4.0.0    `-php5`         yes             yes
    ≥4.0.0             `-php7`         yes             yes

This commit changes the behavior under the Autotools build system:

    SWIG version       old behavior     new behavior
    ================================================
    <1.3.26            target PHP4  ==  target PHP4
    ≥1.3.26, <1.3.37   target PHP5  →   target PHP4
    ≥1.3.37, <3.0.11   target PHP5  ==  target PHP5
    ≥3.0.11, <4.0.0    target PHP7  ==  target PHP7
    ≥4.0.0             target PHP7  ==  target PHP7

It seems reasonable to consider the first three rows of the above table
irrelevant. The last version of PHP5, 5.6, was EOLed on 2018-12-31,² so any
users in rows 1-3 of the table have been unsupported for some time. In practice,
only users in row 2 are affected by this change, who are using a version of SWIG
released prior to 2009-01-12.³

In future, it may make sense to drop build system support for the `-php` flag
altogether and *only* support `-php7`, given that using `-php` on an older
version of SWIG that defaults to PHP5 probably produces uncompilable code
anyway.

¹ http://www.swig.org/Doc4.0/Php.html
² https://www.php.net/eol.php
³ https://github.com/swig/swig/releases","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2200","1cc64ae69a40e54de13fe9d6430025059b12e54b","2021-10-05 00:02:01.311-04","2021-10-08T01:14:40.574Z","[]"
1699,1350,"fix out-of-bounds access with labels involving \","The following input would result in entering these loops with str == ""\"":

```dot
digraph structs {
node [shape=record];
struct1 [shape=record,label=""<f0> left|<f1> mid\ dle|<f2> right""];
struct2 [shape=record,label=""<f0> one| two""];
struct3 [shape=record,label=""hello\nworld |{ b |{c|<h\re> d|e}| f}| g | h""];
struct1 -> struct2;
struct1 -> struct3;
}
```

This would result in iterating past the end of the array. As reported by
@le3d1ng. Closes #1699.

----

After this there are still some remaining memory leaks but these seem secondary:

```sh
$ ./cmd/dot/dot ./heapBof
digraph structs {
        graph [bb=""0,0,246.15,148.4""];
        node [label=""\N"",
                shape=record
        ];
        struct1 [height=0.51389,
                label=""<f0> left|<f1> mid\ dle|<f2> right"",
                pos=""102.61,129.9"",
                rects=""34.864,111.9,69.52,147.9 69.52,111.9,127.91,147.9 127.91,111.9,170.35,147.9"",
                width=1.8817];
        struct2 [height=0.51389,
                label=""<f0> one| two"",
                pos=""36.606,37.7"",
                rects=""0,19.7,36.215,55.7 36.215,19.7,73.212,55.7"",
                width=1.0168];
        struct1 -> struct2      [pos=""e,49.068,55.732 89.88,111.51 80.048,98.071 66.295,79.275 55.226,64.147""];
        struct3 [height=1.0472,
                label=""hello\nworld |{ b |{c|<h\re> d|e}| f}| g | h"",
                pos=""168.61,37.7"",
                rects=""91.062,0.5,139.72,74.9 139.72,50.1,200.15,74.9 139.72,25.3,161.93,50.1 161.93,25.3,177.93,50.1 177.93,25.3,200.15,50.1 139.72,0.5,\
200.15,25.3 200.15,0.5,223.15,74.9 223.15,0.5,246.15,74.9"",
                width=2.154];
        struct1 -> struct3      [pos=""e,141.99,75.079 115.33,111.51 121.24,103.43 128.57,93.414 135.88,83.423""];
}

=================================================================
==4701==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 2100 byte(s) in 1 object(s) allocated from:
    #0 0x7fb59947d330 in __interceptor_malloc (/lib/x86_64-linux-gnu/libasan.so.5+0xe9330)
    #1 0x7fb5991d7c12 in gmalloc /home/matthew/graphviz/lib/common/memory.c:47
    #2 0x7fb599194dbf in gvconfig /home/matthew/graphviz/lib/gvc/gvconfig.c:542
    #3 0x7fb59919aed5 in gvContextPlugins /home/matthew/graphviz/lib/gvc/gvc.c:42
    #4 0x556ba142f74c in main /home/matthew/graphviz/cmd/dot/dot.c:100
    #5 0x7fb598f3009a in __libc_start_main ../csu/libc-start.c:308

Direct leak of 44 byte(s) in 8 object(s) allocated from:
    #0 0x7fb5993ce810 in strdup (/lib/x86_64-linux-gnu/libasan.so.5+0x3a810)
    #1 0x7fb59925961e in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3313
    #2 0x7fb59925b70e in record_init /home/matthew/graphviz/lib/common/shapes.c:3553
    #3 0x7fb599268311 in common_init_node /home/matthew/graphviz/lib/common/utils.c:653
    #4 0x7fb596386959 in dot_init_node /home/matthew/graphviz/lib/dotgen/dotinit.c:40
    #5 0x7fb596387461 in dot_init_node_edge /home/matthew/graphviz/lib/dotgen/dotinit.c:81
    #6 0x7fb596388ed0 in dotLayout /home/matthew/graphviz/lib/dotgen/dotinit.c:308
    #7 0x7fb59638a62d in doDot /home/matthew/graphviz/lib/dotgen/dotinit.c:463
    #8 0x7fb59638ac08 in dot_layout /home/matthew/graphviz/lib/dotgen/dotinit.c:509
    #9 0x7fb59918478c in gvLayoutJobs /home/matthew/graphviz/lib/gvc/gvlayout.c:85
    #10 0x556ba142f960 in main /home/matthew/graphviz/cmd/dot/dot.c:132
    #11 0x7fb598f3009a in __libc_start_main ../csu/libc-start.c:308

Direct leak of 6 byte(s) in 3 object(s) allocated from:
    #0 0x7fb5993ce810 in strdup (/lib/x86_64-linux-gnu/libasan.so.5+0x3a810)
    #1 0x7fb59925961e in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3313
    #2 0x7fb5992592b4 in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3291
    #3 0x7fb5992592b4 in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3291
    #4 0x7fb59925b70e in record_init /home/matthew/graphviz/lib/common/shapes.c:3553
    #5 0x7fb599268311 in common_init_node /home/matthew/graphviz/lib/common/utils.c:653
    #6 0x7fb596386959 in dot_init_node /home/matthew/graphviz/lib/dotgen/dotinit.c:40
    #7 0x7fb596387461 in dot_init_node_edge /home/matthew/graphviz/lib/dotgen/dotinit.c:81
    #8 0x7fb596388ed0 in dotLayout /home/matthew/graphviz/lib/dotgen/dotinit.c:308
    #9 0x7fb59638a62d in doDot /home/matthew/graphviz/lib/dotgen/dotinit.c:463
    #10 0x7fb59638ac08 in dot_layout /home/matthew/graphviz/lib/dotgen/dotinit.c:509
    #11 0x7fb59918478c in gvLayoutJobs /home/matthew/graphviz/lib/gvc/gvlayout.c:85
    #12 0x556ba142f960 in main /home/matthew/graphviz/cmd/dot/dot.c:132
    #13 0x7fb598f3009a in __libc_start_main ../csu/libc-start.c:308

Direct leak of 4 byte(s) in 2 object(s) allocated from:
    #0 0x7fb5993ce810 in strdup (/lib/x86_64-linux-gnu/libasan.so.5+0x3a810)
    #1 0x7fb59925961e in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3313
    #2 0x7fb5992592b4 in parse_reclbl /home/matthew/graphviz/lib/common/shapes.c:3291
    #3 0x7fb59925b70e in record_init /home/matthew/graphviz/lib/common/shapes.c:3553
    #4 0x7fb599268311 in common_init_node /home/matthew/graphviz/lib/common/utils.c:653
    #5 0x7fb596386959 in dot_init_node /home/matthew/graphviz/lib/dotgen/dotinit.c:40
    #6 0x7fb596387461 in dot_init_node_edge /home/matthew/graphviz/lib/dotgen/dotinit.c:81
    #7 0x7fb596388ed0 in dotLayout /home/matthew/graphviz/lib/dotgen/dotinit.c:308
    #8 0x7fb59638a62d in doDot /home/matthew/graphviz/lib/dotgen/dotinit.c:463
    #9 0x7fb59638ac08 in dot_layout /home/matthew/graphviz/lib/dotgen/dotinit.c:509
    #10 0x7fb59918478c in gvLayoutJobs /home/matthew/graphviz/lib/gvc/gvlayout.c:85
    #11 0x556ba142f960 in main /home/matthew/graphviz/cmd/dot/dot.c:132
    #12 0x7fb598f3009a in __libc_start_main ../csu/libc-start.c:308

SUMMARY: AddressSanitizer: 2154 byte(s) leaked in 14 allocation(s).
```

I can't seem to test this because the test suite doesn't run in my config:

```sh
$ make check
...
Making check in rtest
make[2]: Entering directory '/home/matthew/graphviz/rtest'
make[2]: *** No rule to make target '../contrib/diffimg/diffimg', needed by 'check'.  Stop.
make[2]: Leaving directory '/home/matthew/graphviz/rtest'
make[1]: *** [Makefile:835: check-recursive] Error 1
make[1]: Leaving directory '/home/matthew/graphviz'
make: *** [Makefile:1130: check] Error 2
```

This is with the same `--enable-perl=no --enable-tcl=no` options I was using in #1707.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1350","cfd8364842fb0492e7d76e90de7cb6b607535999","2020-05-08 00:01:27.535-04","2020-05-15T12:24:10.948Z","[]"
1836,2570,"enable Quartz plugin in CMake and squash compiler warnings","It is unclear how valuable this is, given this is only applicable to macOS and
its dependency discovery (based on the Autotools behavior) is fairly ad hoc. But
we still drag it into the CMake world to make progress on unifying the Graphviz
build system.

Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2570","3007680fafd7d08550975ff6ae85ecf41d9d5544","2022-04-07 00:09:58.953-04","2022-04-10T16:49:16.641Z","[]"
1875,1663,"Remove warnings and enable all warnings for non MSVC CMake builds","Enables ""all"" warnings in CMake builds by setting `-Wall` and removes all the 50+ warnings that were revealed. Also fixes a few minor issues that were discovered and removes some commented out code.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1663","017a0471a371f965301dbfb2275954fabb5fde1f","2020-11-08 00:07:55.301-05","","[]"
1763,1600,"add configure option for controlling man page PDF generation","Copy and pasting from the middle commit:

There are now the following behaviors during configure and compilation:

```
  ./configure --enable-man-pdfs ...
    PDFs of man pages will be generated using ps2pdf. If ps2pdf is not
    installed, pstopdf will be used. If pstopdf is also not installed,
    compilation will fail.

  ./configure --disable-man-pdfs ...
    The build will not check for or attempt to generate any PDF versions of man
    pages. It is irrelevant whether ps2pdf or pstopdf are installed.

  ./configure ... (with neither option)
    If ps2pdf is found in $PATH, PDFs of man pages are generated using ps2pdf.
    If ps2pdf is not found, pstopdf will be looked for and, if found, used to
    generate PDFs of man pages. If neither are found, no PDFs of man pages will
    be generated and compilation will succeed, omitting these.
```

Closes #1763.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1600","9cea8ecfb1c6d4840b072de05329037be8db6a54","2020-10-03 00:08:22.564-04","2020-10-09T14:57:42.047Z","[]"
1753,248,"update download links to new URLs since Graphviz 2.46.0","As of Graphviz commit 2b4eed1cd2e2063e079db64f39d2b74e1040eea5, releases are
hosted on Gitlab. The 2.46.0 release was the first one to go through this
deployment workflow. These changes update the download URLs to note release
2.46.0 is on Gitlab, not on www2.graphviz.org.","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/248","a454b66ae3b324827a3c93a86f19ba22e1a53ad3","2021-01-18 00:09:25.387-05","2021-01-22T01:16:09.763Z","[]"
372,2828,"Add writing of annotated SVG files to test case for issue #372","~~**NOTE:** This MR is in draft status because it contains the commits from the not yet merged !2824, but early reviews of the last six commits starting with **tests: test_edge_node_overlap_utilities: add support for writing of SVG files for manual inspection** are possible and welcome. :slight_smile:~~

Following !2780, !2797, !2808 and !2824, this is the fifth in a series of MRs extracted from !2702 and !2701. It adds support for writing annotated SVG files for visual inspection of detected overlap problems when the test case for #372 fails.

Here's an example of such a file:

![test_edge_node_overlap_annotated.svg](/uploads/175eb04aeefb6b6cd3501654ca2301bc/test_edge_node_overlap_annotated.svg)

Zoom of the interesting part:

![image](/uploads/9789c7de00daaf2aca3cc16d1afbcd23/image.png)

Upcoming MRs include (not necessarily in this order or partitioned like this):

- Fixes for maximum overlap problems (#372).
- Test cases for minimum overlap test.
- Fixes for the minimum overlap problems.
- Test cases for testing overlap between the edge path (stem) and it arrowhead or arrowtail.
- Fixes for overlap problem between an edge path (stem) and its arrowhead or arrowtail
- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.

Towards #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2828","42e68cb21a0fb27f722f8a8ed12290f3a17558c3","2022-09-06 00:05:14.123-04","2022-09-12T08:40:24.710Z","[]"
1971,2059,"rewrite edgepaint command line parsing using getopt_long","Apart from addressing #1971, this can serve as a reasonable probe for whether `getopt_long` causes any problems. I believe it's fine to use everywhere now, but we can include this single use in the next release and validate it doesn't cause any downstream changes for people packaging Graphviz before rolling out wider use in the code base.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2059","bca4e7c95bfd80f6e3e0f45adaa079198d6ed95a","2021-07-18 00:07:18.568-04","2021-07-22T01:07:35.338Z","[]"
2204,2587,"more #2204 progress","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2587","397e7a2c584903f9fa9dfe4309a44e7ee300fe84","2022-04-12 00:05:09.306-04","2022-04-13T04:10:57.464Z","[]"
1813,1569,"Re-add gvedit to Windows MSBuild","~~This is WIP because:~~

1. ~~The Linux tests fail due to https://gitlab.com/graphviz/graphviz/-/issues/1813 that is fixed in https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 which must be merged first.~~ (Now fixed)
1. ~~Once https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 is merged and this branch is rebased on the new master, the Windows tests will start to fail for the same reason~~ (Now fixed) ~~The Windows tests fail since they use an old version of `getopt`. The fix for that is outlined in https://gitlab.com/graphviz/graphviz/-/issues/1820, but needs to be reviewed.~~
1. ~~Because of an added test case there will merge conflicts with https://gitlab.com/graphviz/graphviz/-/merge_requests/1565 which I expect to merge before this MR (There will also be conflicts from the merge of https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 mentioned above which adds the same test case, but with other skip conditions)~~ (Now fixed).
1. ~~https://gitlab.com/graphviz/graphviz-build-utilities/-/merge_requests/13 or something equivalent must be merged first.~~

This MR depends on that https://gitlab.com/graphviz/graphviz-windows-dependencies/-/merge_requests/2-

The good news is that `gvedit` now works on Windows. At least it can be built and show usage which is tested in this MR. :slightly_smiling_face:

Anybody volunteering for manual testing? :wink:","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/1569","42b7f4fd6a4b995a515a464e9291d6f696d4a226","2020-09-10 00:07:39.099-04","","[]"
1753,2994,"add 'gvedit' to the CMake build system","Note that we need to disable building GVEdit on Windows in CI because we do not
currently have Qt installed there.¹

Gitlab: closes #1753, closes #1836

¹ See https://gitlab.com/graphviz/graphviz/-/merge_requests/1569 for further
  discussion.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2994","69412e779e558fb58d3544456c15194eb2b590a8","2022-12-07 00:09:12.568-05","","[]"
1797,1526,"Make the Windows pipeline stop on PowerShell cmdlet failure","Note that this doesn't affect failures from `.exe` programs, but that is
already handled by the GitLab Shared Windows Runner.

Note also that the pipeline fails because of https://gitlab.com/graphviz/graphviz/-/issues/1797 which shows that this MR actually works :grin:.

https://gitlab.com/graphviz/graphviz/-/merge_requests/1525 should be merged before this MR in order to avoid a failing master pipeline. After that, this MR should be rebased on the new master to verify that the pipeline succeeds, hence the WIP.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1526","508125881a0bf61ec2a778e31e43ac83f3a42b2c","2020-08-14 00:02:45.159-04","2020-08-18T08:56:12.548Z","[]"
1793,2421,"gc: [nfc] simplify stack implementation","This code was using two abstractions, a block `blk_t` and stack `stk_t`, to
amortize the cost of allocations. We can remove the block abstraction and
rewrite the stack implementation to something simpler while still retain these
amortization benefits. Note that this refactoring also makes initialization of
the stack data structure unnecessary as a zeroed `stk_t` is now also a valid
empty stack.

Note that neither the old code nor the new code performs any deallocation. Both
are assuming the program is short running and program termination will clean up
this memory.

This pattern of using both a hand-rolled block and hand-rolled stack appears in
numerous places in the Graphviz code base, of which this is just one instance.

Gitlab: related to #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2421","4e2875fd7376338259dcb3ccc8f029d58bdf22dd","2022-01-30 00:05:18.495-05","2022-04-12T01:49:18.267Z","[]"
2058,2193,"Add Cygwin autotools build jobs to CI","This MR adds two new jobs to CI. The reason it's not only one is that I discovered in https://gitlab.com/graphviz/graphviz/-/merge_requests/2175/diffs?commit_id=6d646c82d94efdfb9933328f08301f6e1600943e that there was a problem when building from the portable source produced in CI, that did not exist when building from a portable source produced with Cygwin.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2193","53a9e5ea1040125cb0304f15b9d472c482142904","2021-09-26 00:03:30.321-04","2021-09-28T17:18:02.234Z","[]"
144,3151,"fix #144 [Dot] Edge arrowhead and arrowtail inverted if splines=ortho is set.","fix https://gitlab.com/graphviz/graphviz/-/issues/144 [Dot] Edge arrowhead and arrowtail inverted if splines=ortho is set.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3151","a7d2f91a8741ed0266004cb9ac31689340b2e27d","2023-04-01 00:08:24.861-04","2023-04-02T17:51:10.144Z","[]"
1800,2529,"fix neatopack crashes and restore the test","Fixes #1800

Introduce agbindrec before GD_* ND_* where is required.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2529","243eecaa23a699c121493e21caedf2dc8e58ed6c","2022-03-24 00:08:11.007-04","","[]"
1436,1424,"fix segfault when node fusing encounters the end of a chain","When processing a chain of nodes, rebuild_vlists() would encounter and then
dereference a NULL pointer on reaching the end of the chain. See included test
case for a sample of how to reproduce this. Fixes #1436.

Some things to call out in this merge request:
* Did I get the changelog format right? I realize this will need to be rebased/merged once !1394 is merged.
* @truenorth, I don't have a thorough understanding of the code I was modifying, so does the commit message make sense? I want to be sure this is something that won't baffle future readers.
* @magjac, I added this regression test to rtest/ under the assumption this is the way forward, as opposed to the test/ directory. Does this seem reasonable?
* I used [a fairly stupid test case reducer](https://github.com/Smattr/mattutils/blob/master/shrink) to produce the 1436.dot in this commit. A smarter reducer could probably minimize this further.

I'll merge this on 2020-06-14 if I don't hear any objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1424","063ba474c1f4effeedead8b974ffd1b84e2aabf9","2020-06-09 00:01:32.518-04","2020-06-15T14:00:49.177Z","[]"
1854,2540,"CMake: enable Smyrna on Linux","Following https://gitlab.com/graphviz/graphviz/-/merge_requests/2533 and https://gitlab.com/graphviz/graphviz/-/merge_requests/2537, this takes the final step towards enabling Smyrna in the CMake build system.

Note that this only enables it on Ubuntu in CI. CentOS enabling is probably not too much extra work. I didn't attempt Windows. I'm ready to admit defeat on macOS for now.

On macOS, the blocker is that I cannot get freeglut to link. A list of some things I have tried:
* swapping between Homebrew and Macports for installing the freeglut dependency
* `${GLUT_LINK_LIBRARIES}` instead of `${GLUT_LIBRARIES}`
* `${GLUT_glut_LIBRARY}` and various other internal variables from within FindGLUT.cmake itself.
* `target_link_directories`
* `set_target_properties`
* `link_directories`
* `target_compile_options`
* manually forcing `-L` options
* forcefully injecting various `pkg_config`-derived ldflags

I've exhausted what I can debug without access to Apple hardware. If macOS users want Smyrna, they can use the Autotools build system.

#1836, #1854","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2540","7c523da54bc4ec56a64e2d80e8dce29f6a0ebbde","2022-03-29 00:06:55.408-04","2022-03-30T01:20:49.881Z","[]"
1836,2546,"WebP plugin: squash warnings and enable in the CMake build system","#1836.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2546","645817efcb9926bdd42f3616eb52e8ea5c199283","2022-03-31 00:09:57.339-04","2022-04-02T01:23:20.650Z","[]"
2202,2836,"Stable release 6.0.1","Lets try again tomorrow and hope things go better.

----

The 6.0.0 release was bungled, resulting in multiple commits¹ that claimed to be
Graphviz 6.0.0. ddd69c589483b31f589834e49ae902142cd4df38 of the website
repository² deleted the 6.0.0 download links and we have deleted the 6.0.0 tag
in this repository.

This commit updates the changelog to indicate there was no 6.0.0 release and the
next release will be 6.0.1. Hopefully things will go smoother this time around.

Unfortunately the situation with 6.0.0 was predictable. Discussion on #2202
covered a hole in the release procedure, which turned out to be the exact
problem that occurred.

¹ 9c4299601b40e5856df9a37cae78265ed2eb33b8 and
  091148d2910ac5f9b4d3b14578da2623f47e347b.
² https://gitlab.com/graphviz/graphviz.gitlab.io","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2836","af85a9ee045fd6d0ba9e379e99f442ee7864e4d5","2022-09-11 00:04:45.284-04","2022-09-11T15:26:39.516Z","[]"
2201,2926,"tests: only accept 'which' results that are adjacent to 'dot'","As described in the code comment, this addresses a problem where testing would
find binaries from a prior Graphviz installation and then spuriously fail.

This is not ideal. It is easy for an upcoming test writer to forget or be
unaware of this quirk and introduce a new direct call to `shutil.which`. But it
seems the best option we have right now.

Gitlab: closes #2201","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2926","515c86a923601db5cb704da93046800df7da030a","2022-10-29 00:07:54.236-04","2022-11-03T15:34:11.546Z","[]"
1286,1292,"Add support for hyperlinks in cairo output","This is an updated patch from Issue #1286.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1292","738127982ab5d1110e40c8bb686b80b94619cf97","2018-10-24 00:09:15.284-04","2018-11-10T00:10:19.301Z","[]"
1916,1693,"fix repeated agmemreads failing","This took me quite a while to figure out how to back out, and we're in this situation partly because I couldn't understand the purpose of the extern replacement in the first place, so I've written a bit of an essay of a commit message explaining.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1693","b64593afc07d3f62a13a3b6b634bcb80b7fe6180","2020-12-24 00:00:12.315-05","2021-01-13T15:09:15.858Z","[]"
372,2701,"Fix overlap caused by penwidth for polygon-based nodes and normal and inv edge arrows","Following !2780, !2797, !2808, !2824, !2828, !2845 and !2849, this is the eighth in a series of MRs extracted from !2702. It fixes https://gitlab.com/graphviz/graphviz/-/issues/372 for all [polygon-based node shapes](https://graphviz.org/doc/info/shapes.html#polygon) (Note that this also includes ellipse-based shapes which Graphviz special-cases as two-sided polygons) except `cylinder` and for the `normal` and `inv` [primitive edge arrow shapes](https://graphviz.org/doc/info/arrows.html#primitive-shapes).

Upcoming MRs include (not necessarily in this order or partitioned like this):

- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.
- Replacement of the use of the rounding macro `POINTS` with the non-rounding macro `INCH2PS` which started already in this MR since it caused overlap problems.
- Fixes for other primitive edge arrow shapes.

Below are images showing the stepwise fixes applied for this DOT source:
```
digraph g1 {
  graph [rankdir=TB]
  node [penwidth=2 shape=box color=""#00000060""]
  edge [dir=both arrowhead=onormal arrowtail=oinv penwidth=2 color=""#00000060""]  a -> b
}
```
I've used a semi-transparent pen color to make it easy to see were the overlaps are.

Original image:

![step0.svg](/uploads/f5664c86e94855d09adf8cf9fcec8c13/step0.svg)

After taking edge penwidth into account when positioning arrow:

![step1.svg](/uploads/73792345da1491ff980e97bd95163c60/step1.svg)

After taking node penwidth into account when clipping edge at node boundary:

![step2.svg](/uploads/b69b21887f3906664a55e4895efc71f1/step2.svg)

After clipping the edge just inside the node outline boundary instead of just outside (to avoid a gap):

![step3.svg](/uploads/feed75ad3714b8a7042ca86fb09d6ccc/step3.svg)

After taking edge penwidth into account when clipping the edge stem at the edge arrowhead or arrowtail:

![step4.svg](/uploads/5ab12b803df7659b688c1956af52af94/step4.svg)

Below is a list of node shape families and arrow types to show which are fixed and not by this MR.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [ ] tee
- [ ] box
- [ ] diamond
- [ ] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2701","beede1476b3b23cd22ca1cb0f3b089aa397e42ab","2022-05-27 00:06:15.781-04","2022-10-11T20:46:22.761Z","[]"
1962,1808,"Adapt mkoutput.py to generate YAML for jekyll","This is towards #1962. The output yaml-front-matter HTML can be used as input to Jekyll.

Once I can have jekyll generating this, we can remove this source in this repo.

This is about to be deleted; just checking this in for posterity.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1808","7d5a4f3cec828227d1e88a53a0a2d06235426204","2021-02-28 00:01:50.026-05","2021-02-28T10:32:14.891Z","[]"
2278,476,"Mind map of Happiness, twopi graph","","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/476","a076048978c484b88d663fdadcc73c3525a0f71e","2022-01-29 00:01:16.231-05","2022-02-05T01:43:32.375Z","[]"
195,1691,"Check for empty strings in tp and hp.","This was a regression in !1527.

Fixes #1907","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1691","a941e5378586f1fc60f5b55c345cd27828b33634","2020-12-16 00:09:36.595-05","","[]"
1786,2446,"CMake: detect and enable extra optional GD features with gdlib-config","This replicates some logic from the Autotools build system, enabling output
formats like `png:gd`. Note that this only enables `png:gd` on CentOS because
other packaging ecosystems do not seem to include `gdlib-config`.

Gitlab: #1786","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2446","ffbd293687685fbb1a8520f35231f3ea04cd4d05","2022-02-14 00:06:27.203-05","2022-02-15T21:48:08.231Z","[]"
2002,2033,"WIP: Add a very basic C++ API","Baby steps towards #2001.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2033","4a28ca138f27e4fb796caedbd90078e9cbc5ecdb","2021-07-04 00:08:07.471-04","","[]"
2303,2927,"support SWIG 4.1.0 in the Autotools build system","Some other adjacent clean up and simplification included too.

Gitlab: closes #2277, closes #2303","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2927","6cffa891b9dfd2feb8835885ce6284eb6334e220","2022-10-30 00:09:03.995-04","2022-11-03T16:33:06.008Z","[]"
372,2845,"Add more overlap checks and test cases","Following !2780, !2797, !2808, !2824 and !2828, this is the sixth in a series of MRs extracted from !2702 and !2701. It adds more checks to the overlap test utilities and some more test cases.

**NOTE:** Some of the test cases are redundant. This is deliberate. An upcoming MR will add several different fixes to the overlap problems seen. Having separate test cases for different problems will help understand which fixes affect which problems as their expect-to-fail status is changed. Especially since some commits that fix one problem introduce a new problem which is then subsequently fixed in a later commit. Once #372 is fully resolved, we can remove the redundant test cases if we so choose.

Upcoming MRs include (not necessarily in this order or partitioned like this):

- Fixes for maximum overlap problems (#372).
- Fixes for minimum overlap problems.
- Fixes for overlap problem between an edge stem and its arrowhead or arrowtail
- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.

Towards #372.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2845","fc142fdba4696ef2bf78a27820dbf0d884238014","2022-09-15 00:00:01.554-04","2022-09-20T18:46:30.529Z","[]"
1753,2445,"CMake: add a 'dot2gxl' symlink for 'gxl2gv', mimicking Autotools","Gitlab: #1753, #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2445","bb1677b2d62890a6cfb86bdb9dd84963a002135f","2022-02-14 00:05:23.672-05","2022-02-16T00:28:11.599Z","[]"
1875,1679,"Fix 1875 and enable all warnings for non MSVC CMake builds","This MR is the remaining part from !1663 after https://gitlab.com/graphviz/graphviz/-/merge_requests/1678 has been broken out as discussed in !1663 (comment 449670736) .

It is WIP since:

1. The code that exhibits the problem described in #1875 is unused and an alternative to fixing it is to just remove it.
1. It contains the commits from !1678 and shall be rebased on the new master after that MR is merged.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1679","389185716c8d1a90f76de7d2a6aff2fca0e83235","2020-11-21 00:06:40.095-05","2020-11-29T17:32:05.699Z","[]"
2102,2112,"Cleanup of drand48 declarations","Spawned off from !2107. Towards #2102. Replaces !2111.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2112","2f5a17f66b47771f51197b6d8852ead9170c9216","2021-08-25 00:06:38.921-04","2021-08-25T17:11:24.719Z","[]"
1762,1485,"add GVPR Vim syntax","Closes #1762.

I think this could eventually get sent upstream to be shipped with Vim itself, but I wanted to have it live in the Graphviz tree for a while and be used by us to try to iron out any issues in advance.

For Vim users who don't normally use custom syntax, dump this in `~/.vim/syntax/` and then when you have a GVPR file open enter `:set syntax=gvpr`. Alternatively arrange for Vim to recognize GVPR files and set syntax automatically.

For anyone who just wants to follow along at home, here's a before and after shot of my setup:

![Screen_Shot_2020-07-28_at_19.10.30](/uploads/c646440bae03b746280e7c5c5e368091/Screen_Shot_2020-07-28_at_19.10.30.png)

I'll merge on 2020-08-03 if there are no objections.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1485","0ec7bf913ad791c3d2bba4f8d4e4a756a9102340","2020-07-29 00:02:28.387-04","","[]"
2173,2386,"Unify storage-class declarations in common headers with Graphviz standard","The third step after !2376 towards making storage-class declarations follow the Graphviz ""standard"" as described in https://gitlab.com/graphviz/graphviz/-/issues/2058#note_678679545.

The previous steps were !2378 & !2380.

Related to, but not necessary for #2058.

Towards https://gitlab.com/graphviz/graphviz/-/issues/2173.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2386","27c0c24c97b9639e9a33e8b25c566fd285788739","2022-01-09 00:02:22.385-05","2022-01-09T20:45:27.504Z","[]"
1830,1577,"Fix failure to create .pdf files with autotools","If neither ps2pdf nor pstopdf is present on the system, the build
fails even if the .pdf files exist. The reason is that the .ps
files are created on the fly, and they are more recent than the
distributed .pdf. Makefile then runs ""false <something>"", which
obviously fails.

Setting PS2PDF to ""true"" is not a solution because we do not
want to ignore when the .pdf file are really absent.

This patch makes running $(PS2PDF) conditional, but still
imposes the .pdf files to be generated when running ""make dist"".

Fixes #1763","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1577","b7be7c0913d27d483e1dc490b5ade301dc95730e","2020-09-15 00:01:46.742-04","2020-09-22T00:03:32.868Z","[]"
2302,3003,"cgraph: implement SSO on agxbuf","This series modifies the generic string buffer `agxbuf` to implement [Small String Optimization](https://stackoverflow.com/questions/10315041/meaning-of-acronym-sso-in-the-context-of-stdstring), a technique for minimizing the in-memory footprint of shorter strings. It involves many commits, but most are small self-contained steps towards the goal.

For motivation, I will just quote the performance table from the last commit:

| | before                     | after                      | diff |
| --- | --- | --- | ---: |
| chain | 1.16s<br/>10436971652 instructions<br/>444MB peak RSS | 1.05s<br/>9006483829 instructions<br/>180MB peak RSS | -9%<br/>-14%<br/>-59% |
| long  | 2.69s<br/>22856315061 instructions<br/>1056MB peak RSS                      | 2.39s<br/>19359309874 instructions<br/>416MB peak RSS                      | -11%<br/>-15%<br/>-61% |
| 456a | 4h16m36s<br/>881MB peak RSS | 4h13m46s<br/>861MB peak RSS | -1%<br/>-2% |
| 1652a | 17.98s<br/>113257927412 instructions<br/>97MB peak RSS                     | 17.81s<br/>113083410200 instructions<br/>52MB peak RSS                     |  -1%<br/>-0%<br/>-46% |
| 1652b | 2m09s<br/>20MB peak RSS                     |  2m08s<br/>16MB peak RSS                      |  -1%<br/>-20% |
| 1718  | 2m34s<br/>1620909322870 instructions<br/>20MB peak RSS                      | 2m35s<br/>1620889232022 instructions<br/>18MB peak RSS                      |  +1%<br/>-0%<br/>-10% |
| 1864a | 32m05s<br/>3435MB peak RSS | 34m22s<br/> 1479MB peak RSS | +7%<br/>-57% |
| 1864b | 14.68s<br/>89053964853 instructions<br/>2421MB peak RSS | 13.62s<br/>83880586677 instructions<br/>464MB peak RSS | -7%<br/>-6%<br/>-81% |
| 2064  | 11m37s<br/>815499533953 instructions<br/>1370MB peak RSS                     | 11m38s<br/>814007887571 instructions<br/>1261MB peak RSS                     |  +0%<br/>-0%<br/>-8% |
| 2095 | 2m10s<br/>74871386805 instructions<br/>113MB peak RSS | 2m11s<br/>74549569707 instructions<br/>92MB peak RSS | +1%<br/>-0%<br/>-19% |

I'm still waiting on some further profiling to complete, but I wanted to post the series now to avoid delaying the 7.0.5 release. I think the data already paints a pretty compelling story.

Fixes #2326, Closes #2302","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3003","49df513ba741ca07de361039c9451d128415a63d","2022-12-18 00:07:16.381-05","2022-12-21T04:07:47.989Z","[]"
1549,1434,"remove legacy lib/agraph","This code was not being compiled or otherwise used. Closes #1549. I'll merge on 2020-06-26 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1434","b9b3cb9fbf7eabdb63c92abbea83e104ef5b4b04","2020-06-20 00:05:32.917-04","2020-06-27T00:02:25.167Z","[]"
1951,1783,"Only run macOS CI on graphviz/graphviz repo","Don't run on forks, which generally don't have access to macOS runners.

This variable is only set on the main graphviz repo.

Fixes #1951","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1783","5052447d34a37421282b8eb5a9677097518b86b7","2021-02-20 00:06:24.408-05","2021-02-20T07:59:25.791Z","[]"
2173,2390,"Unify storage class declarations in xdot","The fifth step after !2376 towards making storage-class declarations follow the Graphviz ""standard"" as described in https://gitlab.com/graphviz/graphviz/-/issues/2058#note_678679545.

The previous steps were !2378, !2380, !2386 & !2389.

Related to, but not necessary for #2058.

Towards https://gitlab.com/graphviz/graphviz/-/issues/2173.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2390","610d41a9d8619d4d4334d4d037bde9fcb56f91a5","2022-01-09 00:08:48.554-05","2022-01-10T15:05:07.182Z","[]"
1876,1682,"stop disabling assertions in libcgraph when DEBUG is undefined","This is counterintuitive to developers and moreover assertions are already
controllable via NDEBUG.

While debugging #1876, I spotted this root cause of something that has plagued me for quite a while.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1682","68bcbbd4ddef4960c7ea6884dda10854b0e012e0","2020-11-21 00:04:30.203-05","2021-01-23T19:23:32.716Z","[]"
1880,2973,"ortho: dynamically manage trapezoid structures","Ortho was calculating the number of trapezoid structures required and allocating this amount upfront. This calculation was wrong. Some inputs would exceed the number of calculated trapezoids and Graphviz would abort with an error message.

We could just empirically try bumping how the number of trapezoids are calculated. But this series instead pursues a more thorough fix where we remove upfront estimation altogether. Trapezoids are now allocated and appended on demand, their number limits only by available memory.

Gitlab: fixes #56, fixes #1880","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2973","51993bbc35a64d48c9f9be5fadd8bb8bf6201a47","2022-11-24 00:01:39.2-05","2022-11-30T05:03:33.291Z","[]"
1743,1796,"Change Docker context to be the repo root","See https://stackoverflow.com/a/24540011/171898 and
https://docs.docker.com/engine/reference/builder/#usage

The directory passed to docker is the context. Previously we changed
directory into `ci/$IMAGE` then passed `.` as the ""context"".

Passing a subdir as context prevents any inclusion of files outside the
context, which isn't what we want: we want to include `requirements.txt`
from the root.

So instead, pass the entire repo as ""context"", and use the ""-f"" flag to
set the Dockerfile used.

Should help with #1743 and !1784","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1796","c0264d08ecc3b5e72fcc12e04d53935f50ed75b5","2021-02-24 00:06:02.779-05","2021-02-24T10:19:54Z","[]"
1800,1554,"Remove warnings related to issue 1800","Removes 47 warnings (48 when compiled with -DDEBUG).

This is stuff that I stumbled upon while debugging #1800.

Please note and review with extra care:
* There are no changes of the *documented* public API. There is however one backwards compatible (AFAICT) change of the *actual* public API to conform to what's documented (returning an int instead of a long).
* I've put `assert(FALSE);` in the added switch-defaults for safety, but if that's not customary I can remove it.
* A few changes are not the bare minimum required to fix the warning. Where updates were anyway needed to fix a warning, I've strived to change data types of involved *internal* variables to `size_t` where appropriate instead of optimizing for as few changed lines of code as possible.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1554","c7cdd0af57b7a88c79c261cf1d359f12cb4449ae","2020-09-02 00:00:25.634-04","2020-09-07T14:14:01.960Z","[]"
1789,1686,"revert changes to add non-local names to internal map","Merge Request !1489 made a change to which names were stored in the internal
map. Following this, non-local names (user-provided ones; not starting with '%')
were stored in the internal map as well as local names. This inadvertently broke
some fdp and circo assumptions (#1876, #1877, !1676).

This change reverts the main pieces of the following commits, resolving #1876
and #1877, while re-opening #1767 and #1789.
   * 4f283dd1c02a6a4999b53ad2fcbf2264a7074a8b
   * 85b09cf13179b0e5ab8bddb4857e3d2af0a39a31
   * 9409324489a69557229d3d6f505857b9af85a913
   * 2a9449a99b2a2146fce01fa1d9713e999ad3dd4e
   * 14be5169ef49faad0f30cd9d36cdd438e1739f77
   * b6ffeca3a4457efcffbc3fcdbcee683375f74d05

We will need to find a different solution to #1767.

----

This is a more conservative MR that supersedes !1676. It simply backs out the original changes, reopening some issues.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1686","25e2d0cc91e026b54ebde6f1c7133d36ddb3bcdf","2020-11-29 00:03:19.22-05","2021-01-12T01:18:19.767Z","[]"
42,2955,"fix neato crash in trigraph code","## neatogen: fix out of bounds write when exceeding estimated edges

The `edgei` allocation in `mkTriGraph` was wrong. This code was written prior to
Git history, and it is not obvious how the calculation for how many edges to
allocate was arrived at. My educated guess is that the `+ 2` was intended to
account for the maximum number of final appended edges (the maximum trip count
of the trailing loop in this function), except that is 3 not 2. Bumping this to
3 indeed bypasses the ASan failure in #42.

Rather than just make that equally error prone adjustment, this MR stops
estimating the edge count upfront at all and instead allocates edges per-node
on-demand.

The prior code was allocating edges for all nodes as a contiguous array. Each
node would then be given an offset pointer into this array. Apart from the
problem described above, this meant all nodes apart from the last one could
overflow their edge count, silently corrupting their neighbor’s edges, in a way
undetectable by ASan. This refactoring gives each node distinct memory for its
edges. But this means we needed to introduce a node count (`nnodes`) to the
trigraph and free each of these separate allocations when destructing the
trigraph.

This also required passing in original edge counts to `resetGraph`. Previously
the code would detect an edge that needed to be removed by a node’s edges
running up against its neighbor’s. Obviously this was subject to the above
described bugs which could cause false negatives in this test, leading to even
further compounding data corruption.

Fixing this unfortunately only yields yet another ASan crash. That one is fixed by...

## neatogen: fix miscalculation of intermediate edge resources

`genroute` was allocating an array for edge computation upfront. But what it was
not accounting for was that some of the functions it later calls _change_ the
`pn` value it used to determine how many array elements it should allocate.
Specifically, `Pshortestpath` can add new points to the polygon, thereby causing
the walk of the (now too short) array to write out of bounds.

## Addendum 

It should be clear from the above that the code here has a very error prone
structure. (1) Estimating how much memory is required upfront with non-trivial
calculations and (2) allocating a block of memory that is then partitioned out
to clients trusted not to run into each other, effectively creates a scenario
where bugs are undetectable by memory safety tools and easily compound one
another. In future the other allocations in this file should be rewritten to
avoid this structure too.

Gitlab: fixes #42","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2955","41ddbf28e4a0558c6360ec170d463861b0a748b5","2022-11-15 00:04:41.948-05","2022-11-17T04:52:42.485Z","[]"
1777,1925,"GVC: export 'gvToolTred'","This is a temporary bandaid solution for a missing export from the GVC
library.  The general solution of fixing the annotation on the
declarations is better suited for Windows.  That would allow the
compiler to make appropriate optimizations.  Modern MinGW should also be
able to handle the exports through the attribute, avoiding the need to
maintain the extra def file.

The attributes could also be further generalized to aid on Unix
platforms.

This partially resolves #2057","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1925","155aa5630d99e1e18674000e371997bb4eca33ea","2021-04-25 00:02:07.374-04","2021-05-02T16:04:57.900Z","[]"
1877,1518,"Remove rtest workaround for non stable cluster order","Since https://gitlab.com/graphviz/graphviz/-/issues/1767 (Duplicate: https://gitlab.com/graphviz/graphviz/-/issues/1789) was fixed, the test runs fine.

Thanks for fixing @smattr :muscle:","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1518","27030bffaeee757286c26967a442cfc8016512e4","2020-08-12 00:07:55.058-04","2020-08-12T15:04:14.695Z","[]"
2368,3142,"add a test case for #2368","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3142","eb655a80b48f5cd10e7f949fff98e47b6d3d8df3","2023-03-30 00:02:37.56-04","2023-04-04T18:32:32.421Z","[]"
1682,1421,"fix: anticipate duplicate nodes in UF_union()","It is possible to construct (invalid) input to Graphviz that leads to two copies
of the same node being encountered during UF_union(). Previously this would
cause an integer overflow. This was detectable with Undefined Behavior Sanitizer
using the following input:

```dot
digraph G { {rank=same a b     n A;C;E;G;I;K;M;O;Q;S;U;W;Y;
  B;D;F;H;J;L;N;P;R;T;V;X;Z;  }

 a{rank=same a b       A;C;E;G;I;K;M;O;Q;S;U;W;Y    B;D;F;H;J;L;N;P;R;T;V;X;Z;
    }Courier6;
} ?
```

We now anticipate this scenario and handle it gracefully, copying the pattern
from UF_union() in lib/spine/union_find.c. Fixes #1682. This issues was
originally found by the Google Autofuzz project.

If I don't hear any objections, I'll merge this on 2020-06-10.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1421","76b65aca4b5b658975458dc22bcbd067a8de7631","2020-06-07 00:05:40.97-04","2020-06-11T14:12:18.017Z","[]"
2185,2460,"fix 'gvpr' usage output","Commit 83eea6075b8f4746d632a792b1d1b97c19797acb altered the calling convention
of `errorv`, but failed to take into account that the local variable `s` was
being used for something else prior to its use as the first unpacked parameter.
Following this commit, the first parameter was being discarded as `s` was
overwritten with `error_info.id` or `id`.

This fix restores the previous behavior.

----

As discussed in https://gitlab.com/graphviz/graphviz/-/issues/2185#note_824183947","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2460","2fef8a589d0812b4284d3579137f971816d89acc","2022-02-19 00:01:21.132-05","2022-02-20T21:03:57.730Z","[]"
2178,2387,"Fix MinGW CMake builds and add tests","Adds testing of MinGW CMake builds to CI and fixes some issues that prevented them to pass.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2387","51c7607034fc525cd7ce8e495a090c7c1d47644b","2022-01-09 00:07:41.662-05","2022-01-10T13:02:25.722Z","[]"
2060,1930,"xdot: remove unused Windows.h header","This header is unused and does not need to be included.  Although for
most uses this does not impact anything, attempting to use this in a
Swift program causes problems due to the library being pulled into a
modular build.  This removal allows the use of xdot in Swift.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1930","8fde34a127db0de69577037c3003ed810974e2f3","2021-04-26 00:07:37.419-04","2021-05-02T04:02:54.712Z","[]"
2286,2890,"Use full paths to pangocairo libraries, not names","This lets me build on macOS.

Thanks to Matthew for finding this fix for #2286

There are a few other usages of PANGOCAIRO_LIBRARIES within Graphviz,
but none that I'm currently compiling on macOS. Maybe those should be
moved too, but I've just started with this one.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2890","f5868e0d90aebbeced03caaafe29498181ff53a5","2022-10-08 00:04:36.163-04","2022-10-11T22:28:34.765Z","[]"
1875,1680,"WIP: Remove unused matrix market functions and enable all warnings for non MSVC CMake builds","This is an alternative MR to !1679.

It is WIP since:

1. It shall not be merged if !1679 is merged.
1. It contains the commits from !1678 and shall be rebased on the new master after that MR is merged.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1680","f8c823f5f7fd7f349d672964a9a802f83d84bdb0","2020-11-21 00:09:28.134-05","","[]"
1713,1345,"small fixes for larger graphs","Changes:
1. short -> int in rank values to avoid overflow
2. changes to cleanup1() to improve performance","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1345","ba59204bbb589d326504ba28b24b1c8a8b2fbe52","2020-04-19 00:03:09.003-04","2020-05-07T02:03:08.527Z","[]"
45,1739,"fix: depend on _MSC_VER instead of _WIN32 for use of __declspec import/export","Non-MSVC Windows environments (e.g. MinGW under Cygwin) do not understand
__declspec and so were failing to infer the correct declarations. This change is
mostly an educated guess, as I don't have a Windows machine to test MinGW on.
Fixes #1940.

----

@Synoecium, are you able to test this?","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1739","e5f6a6170d820c258bf50d0b8804b7678d0699f7","2021-02-11 00:01:43.926-05","","[]"
597,248,"update download links to new URLs since Graphviz 2.46.0","As of Graphviz commit 2b4eed1cd2e2063e079db64f39d2b74e1040eea5, releases are
hosted on Gitlab. The 2.46.0 release was the first one to go through this
deployment workflow. These changes update the download URLs to note release
2.46.0 is on Gitlab, not on www2.graphviz.org.","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/248","a454b66ae3b324827a3c93a86f19ba22e1a53ad3","2021-01-18 00:09:25.387-05","2021-01-22T01:16:09.763Z","[]"
1546,1309,"[macOS] Make GraphViz.app a self contained package","Changes over the graphviz GUI build to create a self contained application package that can be copied and installed on any Mac.","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/1309","d394abaaeb3700a09fa64e4a0cb44fa6b813038e","2019-03-18 00:04:34.098-04","","[]"
1613,2,"WIP: Fixed uint_64_t type typo noted in 1613","(cherry picked from commit be51633a6409f9e49e31f8c7d024748480a01f67)
`uint64_t` is misspelled in a few cmake script templates. This is a minor issue mentioned in graphviz/graphviz#1613. It is marked as WIP because new compiler warnings are thrown which may indicate some declarations or casts are inadvertently changed. Needs review to ensure that fixing the typo isn't introducing additional issues.","opened","https://gitlab.com/apthorpe/graphviz/-/merge_requests/2","622c02c7e9eb66eee5e7b041df8dd44cb2feebe7","2020-07-12 00:02:43.015-04","","[]"
372,2917,"Add CHANGELOG entry for partial fix of issue #372","This should have been added in !2701, !2907 and !2910, but wasn't.

This MR should be merged before !2915.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2917","d45d293c51d6dfa91c67b8c0a1e8776241985a4f","2022-10-19 00:07:38.139-04","2022-10-22T20:05:34.373Z","[""release blocker""]"
1881,2128,"remove Fedora 32 CI testing","Fedora 32 was EOLed in May 2021.¹

¹ https://fedoraproject.org/wiki/End_of_life?rd=LifeCycle/EOL","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2128","af2f77e31927f12ee932c8057426674bba41d026","2021-08-31 00:02:47.198-04","2021-09-04T01:00:02.510Z","[]"
2185,2461,"Stable Release 3.0.0","I propose cutting the next release on 2022-02-26.

Technically #2185 is a still-open regression. But its introduction was well prior to the last release (it was introduced prior to 2.46.0), so I don't think we should consider it a release blocker.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2461","d176a1df716b6348cff58b149f9ec5af7f563bd4","2022-02-20 00:05:12.706-05","2022-02-26T17:11:28.685Z","[]"
1876,1683,"minor cleanups","Some changes I made while debugging #1876.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1683","f90edeeeed501f6120671473aefa4b9707577c61","2020-11-22 00:09:46.69-05","2021-01-23T19:55:08.113Z","[]"
1221,1657,"fix: anticipate empty clusters when using newrank","When using newrank=true and incorrectly putting a node in two clusters, one of
    the clusters would end up empty. This broke assumptions in the crossing logic;
    e.g. that all clusters have a leader. We fix this by detecting empty clusters
    and removing them prior to the crossing logic. Fixes #1221.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1657","55fa3dbbda8554e170e939abc95cc5f472712d65","2020-11-01 00:02:07.186-04","2020-11-07T02:10:12.686Z","[]"
1874,1737,"fix: use public inheritance in VPSC hierarchy","See #1874.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1737","04fbb9f9d1fbb1b34b58960fb95921abf9b08140","2021-02-09 00:04:45.564-05","2021-02-15T05:02:09.416Z","[]"
1965,1822,"Close output file descriptor only after done writing","Previously we would close the output as soon as we wrote a single line.

This didn't account for continuation lines, where $1 == """".

The subsequent printfs would be to a closed file.

Fixes #1965","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1822","fa341dfafa8d757dbd5f9f12e9618b0b56ab26f3","2021-03-02 00:04:32.907-05","2021-03-02T08:39:40.132Z","[]"
1839,2938,"add 'cluster' to the CMake build system","Gitlab: #1839","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2938","b2f7af25f4c2c8d46637985a87888df4080aeea6","2022-11-06 00:05:43.836-04","2022-11-10T16:40:25.806Z","[]"
1594,1462,"fix line numbers in GVPR error reporting","When swallowing a single line comment (C-style ""//..."" or shell-style ""#...""),
lib/gvpr would push the trailing newline into its output buffer as well as
yielding it. The effect of this was that the second stage parsing done by
lib/expr would see two newlines, throwing off its recorded line number by one
for each single line comment. Fixes #1594.

Thanks to @steveroush and @truenorth for doing the debugging on this one, so all I really had to do was piece together the clues they had accrued. I'll merge this on 2020-07-18 if we don't have any objections before then.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1462","811eb78676709bbb0b3155fdef1db72c254372f0","2020-07-12 00:08:57.478-04","2020-07-18T16:25:16.390Z","[]"
2322,3024,"remove gv.php include from PHP demo","As of SWIG 4.1.0, PHP source is no longer generated when SWIG is targeting PHP.

Gitlab: closes #2322<br/>
Reported-by: Petr Sumbera","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3024","81caa59b7e7d60701afe91cdaa0e8b7c0648874b","2022-12-29 00:08:40.172-05","2022-12-30T00:25:47.666Z","[]"
2332,3125,"Autotools: use 'sysconfig' to discover Python module installation path","Python 3.10 deprecated the `distutils` module. Python 3.12 will remove it
altogether.

This change replaces the use of `distutils.syconfig` with its documented
replacement. Note that this is not entirely equivalent, seemingly due to distro
patches. For example:

```
  On Ubuntu 22.04 with Python 3.10:
    >>> distutils.sysconfig.get_python_lib(1, 0)
    '/usr/lib/python3/dist-packages'
    >>> sysconfig.get_path(""platlib"")
    '/usr/local/lib/python3.10/dist-packages'

  On Fedora 37 with Python 3.11:
    >>> distutils.sysconfig.get_python_lib(1, 0)
    '/usr/lib64/python3.11/site-packages'
    >>> sysconfig.get_path(""platlib"")
    '/usr/local/lib64/python3.11/site-packages'
```

It seems the `sysconfig` paths, though not equivalent, are actually the correct
ones that Graphviz should be using.

Gitlab: fixes #2332<br/>
Reported-by: Tom Callaway","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3125","7e61d2285d6634a34fc81d1d483d32515af14352","2023-03-21 00:08:46.192-04","2023-03-26T21:22:36.393Z","[]"
1367,1303,"Fixes CVE-2018-10196","And adds regression testing against it","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1303","4ec32a0a757a15bfd7c7109db452b4d186173d8c","2019-01-07 00:09:44.51-05","","[]"
2133,2205,"CI: avoid BOM in GRAPHVIZ_VERSION file in windows build jobs","Hopefully fixes https://gitlab.com/graphviz/graphviz/-/issues/2133.

There's also some related cleanup that wasn't strictly necessary.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2205","35865ade787f1181cab5f5b19fa35715b56e3a2a","2021-10-08 00:04:20.731-04","2021-10-09T10:39:47.158Z","[]"
1777,1524,"Fix test 1767 fails on agread on windows","Changes the test to use dynamic linking which is what the Graphviz libraries also use.

The test is still skipped for `MSBuild` builds because of https://gitlab.com/graphviz/graphviz/-/issues/1777. Locally it works with `MSBuild` builds as well provided that the INCLUDE directory is set to point to the header files produced by a `CMake` build, while still using the libraries from the `MSBuild` build.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1524","b075678146a7f3276a76ad18e8e0b954ff9b50e7","2020-08-14 00:07:39.474-04","2020-08-18T10:09:19.004Z","[]"
1772,1478,"WIP: Run unit tests, regression tests, and CI tests via CMake/CTest, addresses 1772","This MR has three main goals:
- configure CMake to run unit tests, regression tests, and CI tests via CTest as mentioned in #1772
- build unit tests against the Criterion test framework (see https://github.com/Snaipe/Criterion), either by using a a pre-existing installation or downloading, building, and locally installing a fresh copy, and
- replace the deprecated `find_package(PythonInterp)` with `find_package(Python)`

The focus is on driving the existing tests from CMake so no effort has been put into fixing or upgrading tests. Regression tests are the most successful, completely passing during local testing on Windows and Linux with one failure (`test_long_chain`) on OSX. The unit test executable `command_line` built on OSX and Windows but failed several subtests; the executable did not build on Linux (link error for unresolved symbol `agerr` which I believe is from `cgraph`). Regardless, building against Criterion seemed to work on all platforms as did building an external copy of Criterion itself.

Note that the functionality to download, build, and install Criterion is limited to `cmake/BuildCriterion.cmake`; this can be disabled in the main `CMakeLists.txt` file by commenting out `include(BuildCriterion)`

Several tests required the use of `python` or `python3` but did not specify the executable to be used for testing. `find_package(PythonInterp)` was replaced with `find_package(PythonInterp COMPONENTS Interpreter)` and the variable `Python_EXECUTABLE` was substituted for both `python` and `python3` for consistency in running tests.

This addresses many of the infrastructure issues which hampered comprehensive testing under CMake and hopefully lets people focus on revising the tests and application code instead of the build and test infrastructure.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1478","c2578889e153a79360998c5705760449d4091f6c","2020-07-23 00:09:23.744-04","","[]"
1449,1447,"avoid 'transparent is not a known color' warning","When using the SVG color scheme, Graphviz would emit a spurious warning. This
change is Steve Roush's solution. Closes #1449.

I'll merge this on 2020-07-04 if I don't hear objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1447","a278a660db15e69d8787048fdc9592f0d81f22a1","2020-06-29 00:03:07.677-04","2020-07-04T16:52:41.550Z","[]"
2095,2050,"fix: remove hard limit of 1000 boxes in dot spline code","This addresses #2095. This MR adds a fairly expensive test case, that takes ~5 mins to run. However, I think it is worthwhile to prevent a regression here in future.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2050","ea55e002307bcaf814396258145c1466c26cc617","2021-07-12 00:09:31.603-04","2021-07-18T20:49:29.382Z","[]"
1748,1515,"Set CPack installation directory to ""Graphviz""","The default was to include the version in the installation path.

Fixes https://gitlab.com/graphviz/graphviz/-/issues/1748","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1515","7421560f07231eac6bb91ff9d2e9f8ff5224a702","2020-08-11 00:03:01.37-04","2020-08-11T17:48:57.927Z","[]"
2320,593,"add gv svg files support to dot_card","**The benefit of this MR is svg-preview for `dot_card` examples.**

Add `gv_svg` to dot_card, which is basename for gv and svg file.

Add usage shape-fixedsize.gv and shape-fixedsize.svg to `nodes/shapes` directory.

Svg files can be automatically generated for all gv examples.

Please read patch descriptions for details.","opened","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/593","40fda540f7d2fc53ffa6dcd7864b3f80e1e16ac4","2022-10-20 00:06:39.862-04","","[]"
2270,2822,"Revert ""gvc auto_output_filename: avoid 'strdup' when constructing file name""","This reverts commit 4291cc769a3eeef8b1c171e5479194733a4da6cd. This commit that
was intended to be a functional no-op actually altered the generated output
filename to remove `.` characters.

Github: xflr6/graphviz #178, NixOS/nixpkgs #188175
Gitlab: fixes #2270
Reported-by: Sebastian Bank <sebastian.bank@uni-leipzig.de>","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2822","8d662734b6a34709d9475b120e7ce3de872339e2","2022-09-04 00:03:14.118-04","2022-09-04T23:31:49.864Z","[]"
1962,1809,"Delete mkoutput.py","Output generation has moved to graphviz.gitlab.io repo.

Towards #1962.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1809","ac2f8c2376aab32309890a31c93b604fa5ab07f0","2021-02-28 00:04:19.472-05","2021-02-28T10:39:00.812Z","[]"
2178,2611,"cgraph: also flush C++ iostreams in exit wrapper","This exit wrapper works around an issue where processes running under MinGW can
exit with unbuffered data remaining in their stdout and stderr internal buffers
without being flushed. The C stdio and C++ iostreams implementations can have
separate buffers. Thus when using this wrapper in C++ code in combination with
C++ iostreams (e.g. cmd/mingle/minglemain.cpp) we need to additionally flush the
C++ buffers as well.

Gitlab: #2178","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2611","5f1431107de1dcd2775acd5becf7220d6bcd1fc9","2022-04-17 00:06:50.103-04","2022-04-19T15:50:11.014Z","[]"
1412,2904,"stop enabling -ffast-math on any platform","The `-ffast-math` compiler option enables a mode of floating point semantics
that are heavily relaxed from strict IEEE 754 conformance in the name of speed.¹
The permissible optimizations under `-ffast-math` include transformations that
produce floating point results most users would consider wrong. It is unclear
why “do math fast but incorrectly” is a useful mode. It seems the world is
finally coming around to this tenet.²

This change stops enabling `-ffast-math` anywhere in the Autotools build system.

Gitlab: fixes #1412, #2296<br/>
Reported-by: Kasper Daniel Hansen<br/>
Reported-by: Ross Barnowski

¹ https://gcc.gnu.org/wiki/FloatingPointMath<br/>
² https://simonbyrne.github.io/notes/fastmath/,
  https://moyix.blogspot.com/2022/09/someones-been-messing-with-my-subnormals.html","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2904","76feefc72cb09a91d4d113f16f182d076fafae9c","2022-10-12 00:09:29.384-04","2022-10-13T01:03:22.031Z","[]"
1806,1523,"Remove obsolete and incorrect mangling of yacc output","Removes no longer needed transformation of yacc output for the `autotools` and `CMake` build systems. The `MSBuild` build system didn't have any AFAICT.

This mangling is (no longer?) necessary and some of them was anyway incorrect in that they converted unsigned long to uint_64_t which doesn't exist.

Fixes https://gitlab.com/graphviz/graphviz/-/issues/1796

Replaces https://gitlab.com/graphviz/graphviz/-/merge_requests/1522

Tanks @smattr for helping me stay on the straight and narrow path :innocent:","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1523","3b00c1fc6b949cc9744d075e0d2b2ed4b1c46763","2020-08-13 00:03:27.239-04","2020-08-18T09:43:25.757Z","[]"
1445,1302,"Fix Mac builds with Xcode 10, and fix warnings (#1445)","Update XIB files, Xcode project, and Mac source to support building with Xcode 10 (required on macOS 10.14). 

Successfully builds and runs on both Mac OS X 10.6 with Xcode 3.2.6, and macOS 10.13.6 with Xcode 10.1 (the latest). Should work correctly on all versions in between.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1302","b7f8eb4da006364a7f6e3820aa1b953473ce8f8d","2018-12-19 00:04:41.921-05","2019-01-11T12:41:22.922Z","[]"
1807,1568,"Add ubuntu20.04-debug-build to CI","IMHO, we need at least one debug build in CI to catch problem like https://gitlab.com/graphviz/graphviz/-/issues/1807","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1568","bee227bb0e6b2344070eae3991b1b8f5a24c87be","2020-09-10 00:04:52.35-04","2020-09-12T09:16:01.013Z","[]"
2156,2290,"gvc.def: Don't override export name","As reported in https://gitlab.com/graphviz/graphviz/-/issues/2156,
the export name override breaks the win32/mingw32 autoconf build.
By not specifying the export name, each toolchain should use its
appropriate default, which should at least work, even if it's
not consistent across toolchains.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2290","2b92772d480f321bda6615140efa546abc5c66e9","2021-11-18 00:05:34.644-05","2021-11-21T16:52:56.801Z","[]"
1836,2547,"Xlib plugin, vimdot: Squash all warnings and enable in the CMake build system","#1836. And a couple of other minor commits.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2547","b9460d044aacc76f8fde557ba0587b4774bc1e41","2022-03-31 00:02:20.292-04","2022-04-02T22:46:33.227Z","[]"
2338,3047,"squash compiler warnings in release mode","This series fixes all the compiler warnings when building via CMake with `-DCMAKE_BUILD_TYPE=Release` except (1) some allocator warnings I need to stare at a bit longer and (2) #2338.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3047","bcda584ec7788c947c66e121fe37c73e54ca3ac5","2023-01-11 00:04:17.05-05","2023-01-14T17:54:55.893Z","[]"
1742,1461,"replace RBTree Assert() with assert()","This is some baby steps towards resolving #1742. It replaces a hand rolled assertion mechanism with libc's `assert`.

I've posted this as a WIP because this enables assertions that were not enabled before. Is this a good idea? Graphviz is built without `DEBUG_ASSERT` defined, so all these assertions were no-ops before. Now they're sometimes active (in debug builds).

----

An opinionated primer on C assertions for anyone confused by this diff...

Assertions are not a language-level feature in C; there is no magic going on. `assert` is simply a macro defined in the header assert.h. So the C compiler does nothing special with an assertion.

Similarly, the `assert` macro has no special powers available to it. Which explains why failures are cryptic: `Assertion failed: x != y`, *""what?!? tell me the value of x and/or y, you riddler?!?""* A macro doesn't have the ability to tell you the value of `x` or `y`.

C assertions also come with no attached message (*""why should x not be equal to y?""*), so people evolved idioms like `assert(expr && ""if x and y are equal, the spice will flow to our enemies"")` to add messages to assertion failures.

C assertions are enabled by default: an assertion failure will cause a call to `abort`, terminating the program. If the `NDEBUG` macro is defined during compilation, assertions become no-ops. I.e. `cc foo.c` has assertions enabled while `cc -DNDEBUG foo.c` does not. `NDEBUG` is typically defined by build systems in a release configuration.

Sorry for appending an assertions 101 tutorial to this MR, but I wanted this to be reviewable by people regardless of their familiarity with C.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1461","b1d16ddf9a5df8a2ec34b867bd7edd81f05abc8d","2020-07-12 00:09:30.746-04","2020-07-20T14:33:05.182Z","[]"
1906,1697,"unify and correct RectArea implementations","As discussed on #1906.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1697","0a4a329d3fb5128cc358729d06d9387547c92ce2","2020-12-28 00:03:33.987-05","2021-01-23T23:46:53.655Z","[]"
2341,3053,"gvrender_core_pic.c: Distinguish between PIC and troff comments","This should address the issue reported in #2341.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/3053","55b850bce8f21d233b2fa405b63866bc5428311a","2023-01-15 00:07:51.738-05","","[]"
1876,1676,"WIP: test cases and fix for #1876 and #1877","","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1676","d790ae5933e01041fe908873087bd9b81d8641d8","2020-11-19 00:01:04.359-05","","[]"
2296,2904,"stop enabling -ffast-math on any platform","The `-ffast-math` compiler option enables a mode of floating point semantics
that are heavily relaxed from strict IEEE 754 conformance in the name of speed.¹
The permissible optimizations under `-ffast-math` include transformations that
produce floating point results most users would consider wrong. It is unclear
why “do math fast but incorrectly” is a useful mode. It seems the world is
finally coming around to this tenet.²

This change stops enabling `-ffast-math` anywhere in the Autotools build system.

Gitlab: fixes #1412, #2296<br/>
Reported-by: Kasper Daniel Hansen<br/>
Reported-by: Ross Barnowski

¹ https://gcc.gnu.org/wiki/FloatingPointMath<br/>
² https://simonbyrne.github.io/notes/fastmath/,
  https://moyix.blogspot.com/2022/09/someones-been-messing-with-my-subnormals.html","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2904","76feefc72cb09a91d4d113f16f182d076fafae9c","2022-10-12 00:09:29.384-04","2022-10-13T01:03:22.031Z","[]"
2127,2157,"fix compilation errors with Bison 3.8","Fixes #2127.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2157","aca5b3674c16a002c889f3a5bc7dc1388dd448ee","2021-09-12 00:01:38.732-04","2021-09-13T14:43:21.144Z","[]"
2138,2228,"fix GVPR splitting and tokenization bug","Fixes #2138.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2228","ccc3cf8b4a10cb14b052bc0bd0f2979546952de5","2021-10-16 00:05:10.498-04","2021-10-19T15:48:25.347Z","[]"
799,3064,"remove VML output renderer","Gitlab: closes #799","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3064","8cc25440a834ddef3756b9bdb2cd87ca45936149","2023-01-22 00:08:49.343-05","2023-01-26T02:37:24.486Z","[]"
2101,3151,"fix #144 [Dot] Edge arrowhead and arrowtail inverted if splines=ortho is set.","fix https://gitlab.com/graphviz/graphviz/-/issues/144 [Dot] Edge arrowhead and arrowtail inverted if splines=ortho is set.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3151","a7d2f91a8741ed0266004cb9ac31689340b2e27d","2023-04-01 00:08:24.861-04","2023-04-02T17:51:10.144Z","[]"
1868,1962,"WIP: add a unified XML escaping function","This is some work towards #1868, but I wanted to get feedback before going further. It replaces all existing XML escaping code with a more powerful and complete solution. What are people's thoughts about this direction?

----

This change adds to cgraph a function that performs a superset of current XML
escaping done within Graphviz. This is intended to be an all-singing,
all-dancing alternative that subsumes and deprecates all other existing XML
escaping functions. As horrifying as that sentence sounds, this is believed to
be more reasonable than the current duplication of XML escaping functionality.

In particular, this function subsumes the following:

  * cmd/tools/gv2gxl.c:xml_string
  * cmd/smyrna/smyrna_utils.c:xml_string
  * lib/common/labels.c:xml_string
  * plugin/core/gvrender_core_vml.c:html_string

A future change will remove the above and replace them all with calls to
gv_xml_esc.

This new function differs from the above in a few notable ways:

  1. It attempts more strict conformance with the XML specification. In
     particular, it has a more precise definition of what can be an XML entity
     name. The hope is to avoid latent issues like, e.g., html_string above does
     not recognize “sup2” as an entity name.

  2. It handles UTF-8 more rigorously. The html_string implementation both
     arbitrarily aborts in some cases that appear legal and also is too liberal
     in accepting malformed UTF-8.

  3. It does not recognize “&#;” or “&#x;” as XML entities. The previous escape
     functions do, but this appears to be accidental rather than deliberate.

Though it is exported from cgraph, its header is not shipped. It is assumed
that users have no need to XML-escape strings or have better ways of doing this,
so the header would just clutter their include directories. Nevertheless the
function gv_xml_esc needs to be exported to be usable by other Graphviz
components.

Towards #1868.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1962","8fd6c28767c6ecf3b389be166229aa3fcf3cc904","2021-05-16 00:01:11.91-04","","[]"
507,1289,"Several usability improvements for dotty","1) Center the node's bounding box on the node's position (in the global coordinate system) based on its size while being moved. This solves the issue of being unable to click-and-drag a node after it was initially dragged, since the bounding box erroneously remained at the initial position.  Solves issue #507 .

2) Keep the relative position offset between the center of the node and the position of the cursor when clicking-and-dragging. This avoids snapping the center of the node to the current cursor position, but rather allows it to move with the cursor.

3) Redraw the graph on 'leftup' to correct nodes that may have become visually corrupted by edges obscuring their outlines.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1289","7fee4459402b5caea3e6eefffdb333f9bd2cf8e9","2018-09-05 00:04:10.241-04","2018-09-08T12:18:14.294Z","[]"
1591,1318,"fix creating _gv.so symlinks when using --enable-python{2,3}","Do check this isn't specific to Gentoo Linux.

Seems not, looking at the test targets that were added at the same time as --enable-python{2,3}:
https://gitlab.com/graphviz/graphviz/commit/32466ecc452102a1fc84f4331c0ed099da4e7edc#6fe4b2d0ba44567aab713083a84ef802e55f2a8d_617_663","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1318","281db1b2861f6f533dae7fdfd0132295224f5d47","2019-08-25 00:08:40.244-04","","[]"
1820,1569,"Re-add gvedit to Windows MSBuild","~~This is WIP because:~~

1. ~~The Linux tests fail due to https://gitlab.com/graphviz/graphviz/-/issues/1813 that is fixed in https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 which must be merged first.~~ (Now fixed)
1. ~~Once https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 is merged and this branch is rebased on the new master, the Windows tests will start to fail for the same reason~~ (Now fixed) ~~The Windows tests fail since they use an old version of `getopt`. The fix for that is outlined in https://gitlab.com/graphviz/graphviz/-/issues/1820, but needs to be reviewed.~~
1. ~~Because of an added test case there will merge conflicts with https://gitlab.com/graphviz/graphviz/-/merge_requests/1565 which I expect to merge before this MR (There will also be conflicts from the merge of https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 mentioned above which adds the same test case, but with other skip conditions)~~ (Now fixed).
1. ~~https://gitlab.com/graphviz/graphviz-build-utilities/-/merge_requests/13 or something equivalent must be merged first.~~

This MR depends on that https://gitlab.com/graphviz/graphviz-windows-dependencies/-/merge_requests/2-

The good news is that `gvedit` now works on Windows. At least it can be built and show usage which is tested in this MR. :slightly_smiling_face:

Anybody volunteering for manual testing? :wink:","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/1569","42b7f4fd6a4b995a515a464e9291d6f696d4a226","2020-09-10 00:07:39.099-04","","[]"
2229,2575,"unflatten, etc: more #2204 progress","Gitlab: #2204","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2575","a32de450e59d9ac11bc66672abb33c1fd4dd05ea","2022-04-09 00:00:38.101-04","2022-04-10T22:08:14.705Z","[]"
1958,2295,"fix xdot JSON output to be valid JSON","The output of libxdot’s JSON functions included identifiers as non-strings,
something that is not valid JSON. This change results in identifiers like `e`
now being emitted as a string `""e""`.

Fixes #1958.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2295","ddefc228ac3c68ee518852658bb6bac119330049","2021-11-21 00:02:53.854-05","2021-11-21T18:19:21.952Z","[]"
2164,2370,"Upgrade to MacOS 12, Xcode 13","Since yesterday it's been very hard to get all MacOS jobs to pass CI. They fail during different `brew` operations. See e.g. https://gitlab.com/graphviz/graphviz/-/pipelines/437025207.

Based on https://gitlab.com/gitlab-com/macos-buildcloud-runners-beta/-/issues/3#note_774084791, I was hoping that upgrading would help. Perhaps it does, but the jobs fail for other reasons, hence the draft status.

I don't have time to look into this today so if anyone else wants to pick up the baton, this task is up for grabs.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2370","d313e00be3a9be10068de8b6b6d2863bf66f89ba","2021-12-27 00:07:10.54-05","2022-02-06T18:59:48.500Z","[]"
1682,1355,"WIP: fix: avoid undefined integer overflow when accumulating nodeinfo sizes","The following input would trigger the sum of two large integers causing an
undefined overflow in `UF_union()`:

```dot
digraph G { {rank=same a b     n A;C;E;G;I;K;M;O;Q;S;U;W;Y;
  B;D;F;H;J;L;N;P;R;T;V;X;Z;  }

 a{rank=same a b       A;C;E;G;I;K;M;O;Q;S;U;W;Y    B;D;F;H;J;L;N;P;R;T;V;X;Z;
    }Courier6;
}	?
```

This was originally found by Google Autofuzz. Fixes #1682.

----

To reproduce the original issue found by Autofuzz on commit 970dd1a95f3b2c8abe95b89ce5175221062231c5:

```sh
$ CFLAGS=""-g -fsanitize=undefined"" CXXFLAGS=""-g -fsanitize=undefined"" ./configure && make && make install
...
$ UBSAN_OPTIONS=print_stacktrace=1 dot -Tsvg bf492754-0826-45f6-b402-3c40c2322f27
utils.c:175:16: runtime error: signed integer overflow: 1946157056 + 1946157056 cannot be represented in type 'int'
    #0 0x7fdf7eb20459 in UF_union /home/matthew/graphviz/lib/common/utils.c:175
    #1 0x7fdf7d3755d3 in collapse_rankset /home/matthew/graphviz/lib/dotgen/rank.c:160
    #2 0x7fdf7d377c87 in collapse_sets /home/matthew/graphviz/lib/dotgen/rank.c:332
    #3 0x7fdf7d37ae64 in dot1_rank /home/matthew/graphviz/lib/dotgen/rank.c:589
    #4 0x7fdf7d37b252 in dot_rank /home/matthew/graphviz/lib/dotgen/rank.c:623
    #5 0x7fdf7d3306be in dotLayout /home/matthew/graphviz/lib/dotgen/dotinit.c:311
    #6 0x7fdf7d332ec7 in doDot /home/matthew/graphviz/lib/dotgen/dotinit.c:463
    #7 0x7fdf7d33339e in dot_layout /home/matthew/graphviz/lib/dotgen/dotinit.c:509
    #8 0x7fdf7e9f712a in gvLayoutJobs /home/matthew/graphviz/lib/gvc/gvlayout.c:85
    #9 0x563e1f4ed954 in main /home/matthew/graphviz/cmd/dot/dot.c:132
    #10 0x7fdf7db4e09a in __libc_start_main ../csu/libc-start.c:308
    #11 0x563e1f4ed219 in _start (/tmp/tmp.LrWOA4He7V/bin/dot+0x2219)
...
```

----

The changes in this PR involve casting a `size_t` to an `int` in one place. I think for more robustness we should also convert `order` and `rank` to always be uniformly `size_t` as well, so we don't need this cast. AIUI these cannot be negative and `size_t` reflects this while also letting their maximum value scale with the limits of the current platform.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1355","d21f4667a553d607c2e955e5ddedf8475bf11455","2020-05-15 00:05:32.161-04","","[]"
165,1474,"fix unescaped backslashes in xdot output","Fixes #165. I'll merge on 2020-07-26 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1474","80a9dc3a3d7a1bff49db3f8e40fc03e91ca2261e","2020-07-21 00:03:45.653-04","2020-07-26T17:48:50.010Z","[]"
1759,1500,"Change to get windows/dependencies submodules from graphviz","The windows/dependencies repositories are now hosted as subprojects in
the GitLab Graphviz group:

* https://gitlab.com/graphviz/graphviz-build-utilities
* https://gitlab.com/graphviz/graphviz-windows-dependencies","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1500","7fed5d665682524b8c17610b308e658306129985","2020-08-06 00:01:54.387-04","2020-08-07T09:10:17.547Z","[]"
1836,2571,"CMake: enable Visio plugin","While doing this, I discovered that confusingly this plugin was not enabled on any Windows environment in CI, the one place you'd think it might be useful.

Gitlab: #1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2571","a0feaca9d3566f6bb84a196ed475878147e4e3f2","2022-04-08 00:00:28.234-04","2022-04-11T02:19:59.475Z","[]"
2178,3124,"CI: fix: have windows_build.py write to log file directly instead of via pipe","As discussed on #2364, this series makes Windows CI failures no longer silent (observe the CI failure runs for the second commit in this series) and then repairs the breakage.

With yet another PowerShell-induced fail-open scenario, we should perhaps escalate the process begun in be7e75f688b99211d517f5592f08be699cd9bf14 of moving as much logic out of PowerShell as possible.

Gitlab: fixes #2364","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3124","c2375cf30f97ed63885092d4d2ce9c127bd45e9c","2023-03-21 00:08:06.343-04","2023-03-21T23:19:00.966Z","[]"
2347,3087,"apply Python black and isort; add gating CI checks","As discussed in #2347. This is broken down file-by-file for ease of review. Reviewers may want to tick hide-whitespace-changes and/or skip the reformatting commits themselves.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3087","72f207874a7a5a1030852f39adcb416912723aac","2023-02-23 00:06:00.087-05","2023-02-26T19:09:42.845Z","[]"
14,2647,"fix emitSearchGraph for better representation","It looks like the original `emitSearchGraph` was not finished and polished. 

see descriptions for details.

References: 

- https://graphviz.org/docs/attrs/pos/
- https://graphviz.org/docs/attr-types/point/","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2647","6401ad8c2cf321fd56f372e333612aa5e1438bc1","2022-05-02 00:04:47.715-04","2022-05-26T03:06:13.734Z","[]"
1941,1732,"Stable Release 2.46.1","I think we should cut a new release to get the fixes for regressions !1723 and #1931 out.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1732","dce678aa257c369c4341153d272142d1c50f7b1b","2021-02-06 00:01:40.961-05","2021-02-13T17:02:13.715Z","[]"
1836,2526,"towards enabling Smyrna in CMake","This only gets part of the way there, but this series was getting egregiously long already. I have some further outstanding commits that add a cmd/smyrna/CMakeLists.txt and enable it in CI, but these need more work.

Note that despite repairing lib/topfish and enabling lib/glcomp, this MR does not affect our CMake CI builds because `with_smyrna` which guards these defaults to off.

#1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2526","87cc54644e40fccc0651b7fedc137b3dd02b4514","2022-03-22 00:02:14.295-04","2022-03-26T06:47:54.431Z","[]"
1725,1389,"Squash Fedora Dockerfiles yums into fewer layers","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1389","ff4730605f081febbb10a4fa5404439bf3db3285","2020-06-01 00:00:12.782-04","2020-06-01T15:50:59.475Z","[]"
2282,2861,"add a test case for #2282","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2861","3bd1c8014ba2318384d21db48455d8ebb01a6ef3","2022-09-27 00:05:53.211-04","2022-09-27T15:53:35.792Z","[]"
1962,264,"Migrate output formats from main graphviz repo","Trying to centralize the data in one repo, rather than having it split
across two repos.

I converted the data using a yaml export in mkoutputs.py: https://gitlab.com/graphviz/graphviz/-/merge_requests/1808

Towards #39, https://gitlab.com/graphviz/graphviz/-/issues/1962

I looked at the diffs, there are minor whitespace diffs, with one functional change (a doc update made in 2018 that was never deployed to the docs site -- exactly the kind of problem this change is aiming to prevent)","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/264","5d6a20bacf6cef8a2239e9bb555091df7e4d314f","2021-02-28 00:00:29.51-05","2021-02-28T10:08:57.023Z","[]"
2061,1937,"remove unused tmsize10.clo","Fixes #2061.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1937","ffb886fccd293ef0b5c2af05eea028662e31282f","2021-04-30 00:03:27.626-04","2021-05-06T13:27:09.870Z","[]"
1477,1466,"CMake subproject support - minimal - addresses 1477","This changes `CMAKE_SOURCE_DIR` to `CMAKE_CURRENT_SOURCE_DIR` to allow graphviz to be built as a CMake subproject; see #1477. Hopefully this is a minimal replacement for !1441","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1466","5167d7cf73cf188cda1930ccb1e596701a5908c5","2020-07-13 00:05:58.065-04","2020-07-19T23:21:19.906Z","[]"
1784,1691,"Check for empty strings in tp and hp.","This was a regression in !1527.

Fixes #1907","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1691","a941e5378586f1fc60f5b55c345cd27828b33634","2020-12-16 00:09:36.595-05","","[]"
1881,1899,"Add Ubuntu 20.10 CMake ASan build and test jobs to CI","* `ASAN_OPTIONS=detect_leaks=0` since Graphviz have plenty of such problems. See e.g. https://gitlab.com/magjac/graphviz/-/jobs/1170826297
* `ASAN_OPTIONS=alloc_dealloc_mismatch=0` since `/usr/bin/pic` has problems. See e.g. https://gitlab.com/magjac/graphviz/-/jobs/1171970602. This should be possible to avoid with `ASAN_OPTIONS=suppressions=$GRAPHVIZ/ASan.supp` instead, but I haven't succeeded yet.
* Includes a small fix for Debian that's been tested, but is currently not used since we don't have any Debian builds in CI.

Resolves #1881.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1899","c9797153eba9593c4d9fa67a9be7406c951f9af0","2021-04-12 00:03:33.273-04","2021-04-22T16:07:32.681Z","[]"
1834,2083,"flip Smyrna default to disabled in the Autotools build system","This is step 1 of a 4 step plan to remove Smyrna:¹

  1. Default it to disabled.
  2. Disable it in CI jobs that build release artifacts.
  3. Remove build system support.
  4. Remove Smyrna code.

The current plan is to have ≥1 release in between each of these steps. This
should make backing out these steps straightforward if compelling reasons for
continuing to support Smyrna emerge.

The present change only affects users who build Smyrna using the Autotools build
system on Linux. Other environments are unaffected:

  - CMake build system: no support for building Smyrna (#1836).
  - macOS: Smyrna is disabled (#1854).
  - Windows: Smyrna is built but seems unusable (#1829).

Related, Smyrna is also not currently built on CentOS (#1834).

¹ https://gitlab.com/graphviz/graphviz/-/issues/1834#note_576332436","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2083","3b56e37a7850b9d7493af51979762fa9bf1e6583","2021-08-03 00:01:49.855-04","","[]"
2333,3027,"CMake: look for and use Qt6 in preference to Qt5","The CMake build system was setup to exclusively find Qt5 for gvedit, while Qt6 has been out for sometime. This series teaches it Qt6 support.

It remains an open task to adapt the Autotools build system (from which Qt4 support was previously dropped) to also support Qt6.

Gitlab: #2233","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3027","743aed2fea0206827294c9efa6ab117a2ba8dceb","2022-12-31 00:03:38.657-05","2022-12-31T18:10:38.044Z","[]"
2227,2886,"Draft: SVG output format for inlining into HTML","Towards #2285

Also working around #2227

```
$ echo 'digraph {}' | /usr/local/bin/dot -Tsvg_inline
<!-- Generated by graphviz version 6.0.2~dev.20221007.1037 (20221007.1037)
 -->
<!-- Pages: 1 -->
<svg width=""8pt"" height=""8pt""
 viewBox=""0.00 0.00 8.00 8.00"">
<g id=""graph0"" class=""graph"" transform=""scale(1 1) rotate(0) translate(4 4)"">
<polygon fill=""white"" stroke=""none"" points=""-4,4 -4,-4 4,-4 4,4 -4,4""/>
</g>
</svg>
```","opened","https://gitlab.com/graphviz/graphviz/-/merge_requests/2886","0f5c5b2065563130a5f916468300b866f7af8c45","2022-10-07 00:02:59.911-04","","[]"
1861,1727,"fix HTML validation issues in FAQ.html","Related to #1861.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1727","3a8f3f002d2fd9957a73709065f1ea4b2be2d91a","2021-02-02 00:02:27.862-05","2021-02-13T20:13:29.063Z","[]"
1314,1490,"fix: cast overflow with large font sizes in Pango plugin","When using an abnormally large font size, computing the Pango units for the size
would overflow. This resulted in an assertion failure in Pango when seeing a
negative size value. This issue was found by Google Autofuzz project. This
fixes #1314.

I'll merge on 2020-08-07 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1490","4ba76b984d7dcc3af663328a1793a8befd8ae045","2020-08-01 00:06:04.956-04","2020-08-07T14:53:58.927Z","[]"
2294,2701,"Fix overlap caused by penwidth for polygon-based nodes and normal and inv edge arrows","Following !2780, !2797, !2808, !2824, !2828, !2845 and !2849, this is the eighth in a series of MRs extracted from !2702. It fixes https://gitlab.com/graphviz/graphviz/-/issues/372 for all [polygon-based node shapes](https://graphviz.org/doc/info/shapes.html#polygon) (Note that this also includes ellipse-based shapes which Graphviz special-cases as two-sided polygons) except `cylinder` and for the `normal` and `inv` [primitive edge arrow shapes](https://graphviz.org/doc/info/arrows.html#primitive-shapes).

Upcoming MRs include (not necessarily in this order or partitioned like this):

- Overlap test cases for other settings of the Graphviz `shape`, `penwidth`, `dir`, `rankdir`, `arrowhead` and `arrowtail` attributes.
- Replacement of the use of the rounding macro `POINTS` with the non-rounding macro `INCH2PS` which started already in this MR since it caused overlap problems.
- Fixes for other primitive edge arrow shapes.

Below are images showing the stepwise fixes applied for this DOT source:
```
digraph g1 {
  graph [rankdir=TB]
  node [penwidth=2 shape=box color=""#00000060""]
  edge [dir=both arrowhead=onormal arrowtail=oinv penwidth=2 color=""#00000060""]  a -> b
}
```
I've used a semi-transparent pen color to make it easy to see were the overlaps are.

Original image:

![step0.svg](/uploads/f5664c86e94855d09adf8cf9fcec8c13/step0.svg)

After taking edge penwidth into account when positioning arrow:

![step1.svg](/uploads/73792345da1491ff980e97bd95163c60/step1.svg)

After taking node penwidth into account when clipping edge at node boundary:

![step2.svg](/uploads/b69b21887f3906664a55e4895efc71f1/step2.svg)

After clipping the edge just inside the node outline boundary instead of just outside (to avoid a gap):

![step3.svg](/uploads/feed75ad3714b8a7042ca86fb09d6ccc/step3.svg)

After taking edge penwidth into account when clipping the edge stem at the edge arrowhead or arrowtail:

![step4.svg](/uploads/5ab12b803df7659b688c1956af52af94/step4.svg)

Below is a list of node shape families and arrow types to show which are fixed and not by this MR.

[Arrow types](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/arrows.c#L29-36):
- [x] norm
- [ ] crow
- [ ] tee
- [ ] box
- [ ] diamond
- [ ] dot
- [ ] curve
- [ ] gap


[Node shape families](https://gitlab.com/magjac/graphviz/-/blob/main/lib/common/shapes.c#L42-79):
- [x] poly
- [x] point
- [ ] record
- [ ] epsf
- [x] star
- [ ] cylinder","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2701","beede1476b3b23cd22ca1cb0f3b089aa397e42ab","2022-05-27 00:06:15.781-04","2022-10-11T20:46:22.761Z","[]"
1618,3042,"add '--version' and '--help' command line options","Gitlab: closes #1618","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3042","8f08625052c5f28a642cdba174af2d59786746f5","2023-01-06 00:05:05.255-05","2023-01-08T05:11:20.039Z","[]"
1785,2035,"Add a C++ test infrastructure","The foundation for #2002.

Spawned of from https://gitlab.com/graphviz/graphviz/-/merge_requests/2033 after discussions in https://gitlab.com/graphviz/graphviz/-/merge_requests/2033#note_619081872. ~~I haven't dealt with the feedback that I've already gotten on https://gitlab.com/graphviz/graphviz/-/merge_requests/2033, hence this MR is WIP~~.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2035","40c3c1d66ddf3669013e4007279cc42a0612557b","2021-07-06 00:08:18.131-04","2021-07-07T05:18:08.219Z","[]"
1902,1688,"Draft: Run feasible_tree() even if maxiter is zero.","If `nslimit1` is zero, then `rank2` is called with `maxiter=0`. It is likely the intent here is to at least compute and return an initial feasible solution (though not running any network simplex iterations).

fixes #1902","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1688","c0c224b386d7508516007cc5422fa15a525787bb","2020-12-08 00:05:44.5-05","","[]"
1710,1370,"Make python large tests run on Windows","This sets up the testing infrastructure to be able to run python tests on Windows.

The test is a no-op, skipped on Windows, but this gives us a framework to add more tests.

Note `win32` in Python applies to both 32 and 64 bit Windows.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1370","0e94dbec5e04e6cf0f50de7172928ab397dc5086","2020-05-22 00:03:41.85-04","2020-05-22T09:40:35.486Z","[]"
1803,1536,"Fix windows artifacts directory platform name","* Fixes https://gitlab.com/graphviz/graphviz/-/issues/1803 by renaming an environment variable to avoid a clash.
* Includes a robustification of the parsing kludge of the vcvarsall.bat output that was necessary to avoid errors caused by the commit *message* (!) of the fix (:scream: :see_no_evil:  :hear_no_evil: :speak_no_evil:)","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1536","614998cdfa34e555fae859089ec21006e35bf9d8","2020-08-23 00:06:24.476-04","2020-08-23T18:42:00.330Z","[]"
1720,1345,"small fixes for larger graphs","Changes:
1. short -> int in rank values to avoid overflow
2. changes to cleanup1() to improve performance","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1345","ba59204bbb589d326504ba28b24b1c8a8b2fbe52","2020-04-19 00:03:09.003-04","2020-05-07T02:03:08.527Z","[]"
1785,1530,"Add windows build bash scripts and CI jobs","This is the second of two MR's with the overall goal to make it much easier for users to build Graphviz for Windows and for writing improved documentation on how to do it. This MR provides three `Bash` scripts and adds new Windows pipeline jobs that use them. The [other MR](https://gitlab.com/graphviz/graphviz/-/merge_requests/1529) provides PowerShell scripts with the same functionality.

* `setup-build-utilities.sh` - Tries to find specific build utilities in the user's path and if it doesn't find one falls back to set up the path to the utility in the Graphviz build utilities submodule at `windows\dependencies\graphviz-build-utilities`. Produces output messages to tell what it is doing and where the utilities have been found.
* `build.sh --build-system cmake|msbuild --configuration Release|Debug --platform Win32|x64` - Builds Graphviz provided that the build utilities have already been set up.
* `setup-and-build.sh` - First runs `setup-build-utilities.sh` and then `build.sh` with the arguments supplied.

The new jobs do not produce anything other than the PowerScript-based builds already do and hence the artifacts are not archived. The value they have is that they test that it it possible to build under bash and that the supplied bash scripts work.","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1530","c7f5e3a10f8acab56ed204cdd217ea07fb9eea7d","2020-08-17 00:09:22.592-04","","[]"
2115,2465,"Windows: remove 'sed' as a setup build utility","Progress on #2115","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2465","5b450739a95d2af4c55864c9f52faa9c66ce0d86","2022-02-21 00:07:38.75-05","2022-02-23T04:33:56.292Z","[]"
1907,1691,"Check for empty strings in tp and hp.","This was a regression in !1527.

Fixes #1907","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1691","a941e5378586f1fc60f5b55c345cd27828b33634","2020-12-16 00:09:36.595-05","","[]"
1892,1689,"rewrite deployment CI task to create releases on Gitlab","As a preface to the following commit message: there's obviously no way to test the final state of this series after rebasing and cleanup except by cutting an actual release. So please read the diff closely and call out anything weird you spot.

After merge, I can delete all the temporary generic packages and 0.0... releases I created while working on this, we can merge !1686, and then I think we should be able to cut the 2.46.0 release.

----

Prior to this commit, the deployment CI task runs on a private runner and
uploads release artifacts to www2.graphviz.org. The SSH steps in the deployment
task are currently failing due to connectivity issues. The current maintainers
are unable to fix this as we do not have enough knowledge of how this work flow
was intended to function.

Apart from these concerns, Gitlab have recently introduced support for so-called
[“generic packages”](https://docs.gitlab.com/ee/user/packages/generic_packages/index.html) to host binary artifacts directly on Gitlab (or its
underlying CDN) as well as the ability to [programmatically create releases](https://gitlab.com/gitlab-org/release-cli/-/blob/master/docs/index.md)
on the releases page of a project. The decision was made to simplify the
Graphviz infrastructure and host future releases (both stable and development)
on Gitlab.

This change rewrites the deployment task to (1) run on the Gitlab shared runner
using a release-cli Docker image, (2) upload package artifacts to Graphviz'
generic package, and (3) create a release from this for stable version numbers.

To comprehend the role the generic package container is playing here, note that
generic package version numbers are synthesized from commit SHA and are not
intended to be exposed to users. Users can browse the [generic package page](https://gitlab.com/graphviz/graphviz/-/packages),
but are only ever expected to be interested in the latest version available
here. In contrast, version numbers on the [release page](https://gitlab.com/graphviz/graphviz/-/releases) are intended to
correspond to Graphviz stable version numbers. ci/deploy.py handles mapping a
release on this page to its related (synthesized) generic package version.

Closes #1892.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1689","b443b70a828a34c79c71e41af9cb2eab7b950a14","2020-12-10 00:06:09.133-05","2021-01-09T19:01:37.795Z","[]"
2009,335,"Remove todo items migrated to the issue tracker","From https://gitlab.com/graphviz/graphviz/-/issues/2009
to https://gitlab.com/graphviz/graphviz/-/issues/2018

Towards #79","merged","https://gitlab.com/graphviz/graphviz.gitlab.io/-/merge_requests/335","ef26ff252a993d13472612612b52ffc767f2724a","2021-04-12 00:02:51.453-04","2021-04-12T08:58:55.301Z","[]"
2058,1931,"Remove MSVC linkage warnings","There are still a few linkage warnings left, but I'm posting this already now to get some feedback since things have started to move in https://gitlab.com/graphviz/graphviz/-/issues/2058 and since I'm having great difficulties in deciding which is the best way to fix two of the remaining warnings, the warnings about `gvFreeLayout` and `gvLayoutJobs` below.

These symbols are declared in two (!) different header files, namely `gvc/gvc.h` and `gvc/gvcproc.h` and they end up being differently declared. The former is included directly from `gvpack.c` and the latter indirectly through `common/render.h`. Why do we have duplicated declarations like this? Is it necessary? If so, why? If not, how could this be handled differently? I've hap-hazzardly tried to remove/change includes in related files, but to no avail. I need help from someone who understands the current include structure.

All the remaining warnings (I haven't looked into `zmalloc` or `lt_preloaded_symbols` yet):
```
LINK : warning LNK4217: symbol 'zmalloc' defined in 'memory.obj' is imported by 'label.lib(xlabels.obj)' in function 'placeLabels' [C:\Users\magja\graphviz\build\lib\gvc\gvc.vcxproj]
C:\Users\magja\graphviz\cmd\dot\no_builtins.c(13,37): warning C4273: 'lt_preloaded_symbols': inconsistent dll linkage [C:\Users\magja\graphviz\build\cmd\dot\dot.vcxproj]
LINK : warning LNK4217: symbol 'lt_preloaded_symbols' defined in 'no_builtins.obj' is imported by 'dot.obj' in function 'main' [C:\Users\magja\graphviz\build\cmd\dot\dot.vcxproj]
C:\Users\magja\graphviz\lib\gvc\gvcproc.h(118,55): warning C4273: 'gvFreeLayout': inconsistent dll linkage [C:\Users\magja\graphviz\build\cmd\tools\gvpack.vcxproj]
C:\Users\magja\graphviz\lib\gvc\gvcproc.h(119,55): warning C4273: 'gvLayoutJobs': inconsistent dll linkage [C:\Users\magja\graphviz\build\cmd\tools\gvpack.vcxproj]
C:\Users\magja\graphviz\cmd\tools\gvpack.c(34,37): warning C4273: 'lt_preloaded_symbols': inconsistent dll linkage [C:\Users\magja\graphviz\build\cmd\tools\gvpack.vcxproj]
```","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1931","42bc5e7364d492b3aa2230933f246f961bbbfc41","2021-04-26 00:09:22.36-04","2021-05-19T19:29:25.551Z","[]"
2365,3139,"fix: link against tdtclft libs when building tcldot builtins","This looks to have been an accidental omission in
a353967fb3b213859be1d187480244846d5aabfe. On macOS with a custom Tcl/Tk
installation without this change the following build error would occur:

```
  Undefined symbols for architecture x86_64:
    ""_Gdtclft_Init"", referenced from:
        _Tcldot_Init in libtcldot_builtin_la-tcldot.o
  ld: symbol(s) not found for architecture x86_64
```

Gitlab: fixes #2365<br/>
Reported-by: Dario Gjorgjevski<br/>
Suggested-by: Dario Gjorgjevski","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3139","eec4aa1dc383546ffaadb02991d3c5b3a07ffdd3","2023-03-28 00:08:44.485-04","2023-03-28T15:24:28.375Z","[]"
1624,2725,"test case for #1624 and warning squashing","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2725","adf3f694733f98991ce5a135fdd277cc660b192d","2022-06-22 00:00:10.753-04","2022-06-25T17:51:46.312Z","[]"
634,2092,"more const-ing of API char* arguments","More incremental progress on #634.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2092","bb17221e1ee5b7e3fdb422fc2cbf32292b2fc5c9","2021-08-10 00:08:19.969-04","2021-08-13T15:40:18.674Z","[]"
925,2760,"fix UTF-8 character decoding in record labels","This one's a long one, so pour yourself a glass of wine, sit back, and let me tell you a tale...

----

When using `shape=record`, certain characters within labels have alternate
semantics. The switch in `parse_reclbl` handles these, with most characters
having no special semantics and branching to the default case. The trailing loop
in this case was attempting to accrue UTF-8 continuation bytes. But lets take a
look at the Wikipedia table describing UTF-8:¹

```
  ┌────────────────┬───────────────┬──────────┬──────────┬──────────┬──────────┐
  │First code point│Last code point│  Byte 1  │  Byte 2  │  Byte 3  │  Byte 4  │
  ├────────────────┼───────────────┼──────────┼──────────┼──────────┼──────────┤
  │          U+0000│         U+007F│ 0xxxxxxx │          │          │          │
  │          U+0080│         U+07FF│ 110xxxxx │ 10xxxxxx │          │          │
  │          U+0800│         U+FFFF│ 1110xxxx │ 10xxxxxx │ 10xxxxxx │          │
  │         U+10000│       U+10FFFF│ 11110xxx │ 10xxxxxx │ 10xxxxxx │ 10xxxxxx │
  └────────────────┴───────────────┴──────────┴──────────┴──────────┴──────────┘
```

Notice that the continuation bytes are distinguished by upper 0b10 bits. Now
consider that the trailing loop was using a mask with 128 (0b10000000) to
identify such bytes. Such a value masks _out_ bit 6. That is, this loop
condition expression was true for all values with upper 0b10 bits _or_ upper
0b11 bits.

The first consequence of this is that this loop thought multiple consecutive
non-ASCII characters were a single character. It treated the 0b11xxxxxx byte 1
of a new non-ASCII character as if it were another continuation byte of the
preceding non-ASCII character.

The second consequence of this is that an ASCII character followed by non-ASCII
characters would be treated as a single character. That is, 0b0xxxxxxx bytes led
to adjacent following 0b1xxxxxxx bytes being consumed along with them.

These factors combine in the #925 example to confuse the state machine of the
containing loop and result in a malformed label being produced.

This fix adjusts the mask such that it takes _both_ bit 7 and bit 6 and compares
against 0b10xxxxxx.

There are a number of other odd things going on with this code that I did not
attempt to change:

  1. ASCII characters are allowed to have following UTF-8 continuation bytes.
     This would be considered malformed, but this code treats it as legal.

  2. UTF-8 permits a maximum of 3 continuation bytes (see table above) but this
     code allows an arbitrary number of continuation bytes. It also does no
     validation that the leading byte’s upper bit values and the number of
     continuation bytes correspond.

  3. There is something called “hard space” mode that this code toggles to keep
     track of when a space that would otherwise be omitted needs to be
     preserved in the output. Once the hard space flag is toggled on, the code
     appears to never toggle it off. This looks like it has the (presumably
     unintended) effect of something like `""\\ ""` causing all later spaces in
     the label to become hard spaces.

Gitlab: fixes #925

¹ https://en.wikipedia.org/wiki/UTF-8","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2760","2e61f3319486e0442d2cd8f4ae9c8777758aa431","2022-07-14 00:01:44.269-04","2022-07-19T15:29:31.915Z","[]"
1720,3010,"fix reading incorrect input in #1710 test case","A mistake in 632fe0bd1cfc6a4f636db4f85206aff6720bdc6b made this test read from
/dev/null instead of the input file it was supposed to read. Note that this
required some tweak to the skip condition. The Windows platforms on which this
fails seems all over the place and expressing the exact pattern seemed too
complex. For the curious, what we currently see in CI is:

```
  ┌──────────────┬─────────┬──────────────┬─────────┬────────┐
  │ architecture │ OS      │ build system │ mode    │ result │
  ╞══════════════╪═════════╪══════════════╪═════════╪════════╡
  │ x86          │ Windows │ MS Build     │ debug   │ FAIL   │
  │              │         │              ├─────────┼────────┤
  │              │         │              │ release │ pass   │
  │              │         ├──────────────┼─────────┼────────┤
  │              │         │ CMake        │ debug   │ FAIL   │
  │              │         │              ├─────────┼────────┤
  │              │         │              │ release │ FAIL   │
  │              ├─────────┼──────────────┼─────────┼────────┤
  │              │ MinGW   │ CMake        │ -       │ pass   │
  ├──────────────┼─────────┼──────────────┼─────────┼────────┤
  │ x86-64       │ Windows │ CMake        │ debug   │ FAIL   │
  │              │         │              ├─────────┼────────┤
  │              │         │              │ release │ FAIL   │
  │              ├─────────┼──────────────┼─────────┼────────┤
  │              │ MinGW   │ CMake        │ -       │ FAIL   │
  └──────────────┴─────────┴──────────────┴─────────┴────────┘
```

I would not be surprised if these results are not stable. It is likely this
failure presents across all platforms, but is dependent on things like Address
Space Layout Randomization to exhibit.

Gitlab: #1710, #1720","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3010","c1e794c17a91095a7a5c105921e3483f536efaa9","2022-12-24 00:01:25.124-05","2022-12-24T17:50:35.344Z","[]"
1767,1686,"revert changes to add non-local names to internal map","Merge Request !1489 made a change to which names were stored in the internal
map. Following this, non-local names (user-provided ones; not starting with '%')
were stored in the internal map as well as local names. This inadvertently broke
some fdp and circo assumptions (#1876, #1877, !1676).

This change reverts the main pieces of the following commits, resolving #1876
and #1877, while re-opening #1767 and #1789.
   * 4f283dd1c02a6a4999b53ad2fcbf2264a7074a8b
   * 85b09cf13179b0e5ab8bddb4857e3d2af0a39a31
   * 9409324489a69557229d3d6f505857b9af85a913
   * 2a9449a99b2a2146fce01fa1d9713e999ad3dd4e
   * 14be5169ef49faad0f30cd9d36cdd438e1739f77
   * b6ffeca3a4457efcffbc3fcdbcee683375f74d05

We will need to find a different solution to #1767.

----

This is a more conservative MR that supersedes !1676. It simply backs out the original changes, reopening some issues.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1686","25e2d0cc91e026b54ebde6f1c7133d36ddb3bcdf","2020-11-29 00:03:19.22-05","2021-01-12T01:18:19.767Z","[]"
2092,2427,"add a test case for #2092","And some other minor clean up","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2427","a3cb881fcb152d13a939a0de33622ab9842904db","2022-02-03 00:02:58.136-05","2022-02-04T09:53:50.681Z","[]"
1804,2433,"API BREAK: fix: typedef 'ssize_t' to 'SSIZE_T' on Windows","In several places, code was using `int` as a drop-in replacement for `ssize_t`
on Windows where it does not exist. This is incorrect on some platforms. E.g. on
x86-64 this will result in `ssize_t` being a 32-bit type instead of a 64-bit
type. This change replaces it with the correct Windows equivalent, `SSIZE_T`.¹

¹ https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types?redirectedfrom=MSDN#ssize_t

Gitlab: fixes #1804","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2433","d56ff9fd7590e925e9211db213719886fb0c307e","2022-02-07 00:09:02.547-05","2022-02-08T03:32:15.792Z","[]"
1904,1739,"fix: depend on _MSC_VER instead of _WIN32 for use of __declspec import/export","Non-MSVC Windows environments (e.g. MinGW under Cygwin) do not understand
__declspec and so were failing to infer the correct declarations. This change is
mostly an educated guess, as I don't have a Windows machine to test MinGW on.
Fixes #1940.

----

@Synoecium, are you able to test this?","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/1739","e5f6a6170d820c258bf50d0b8804b7678d0699f7","2021-02-11 00:01:43.926-05","","[]"
1818,1565,"Re-add lefty to Windows MSBuild builds","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1565","4ca901c28b270f9e1ec1d0fb7e9274d585aad707","2020-09-09 00:05:51.059-04","2020-09-11T06:28:26.898Z","[]"
2121,2156,"Draft: Resolve ""Include graphviz source in SVG file""","Closes #2121","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/2156","c46ed5090e245ad87d76886eba471d36adc09774","2021-09-12 00:06:21.957-04","","[]"
2290,2905,"bump required CMake version to 3.13.0","As discussed on #2290, this makes some moves to upgrade CMake on Ubuntu 18.04, then raises the minimum CMake requirement.

In future, we could feasibly raise it further to 3.16.3. Or even all the way to 3.24 if we're willing to do what I've done here on Ubuntu 18.04 for all the other CI environments too.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2905","da82cbb9802c7924d8000335cb32505507a69c79","2022-10-13 00:02:28.122-04","2022-10-14T01:38:03.774Z","[]"
1992,1985,"remove some legacy Python 2 pieces","None of this code was in use. While related to #1992, this does not close that issue. Fully removing the Python 2 bindings is more complicated and I think we need to introduce a CI test that the Python 3 bindings are being installed and usable before this can be achieved.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1985","877d3fd523bb0a5a4da7fada4531b933f37f4c61","2021-06-03 00:06:07.638-04","2021-06-09T16:11:23.127Z","[]"
2331,3015,"Issue 2331","Added CTest for Issue #2331","closed","https://gitlab.com/graphviz/graphviz/-/merge_requests/3015","d74a3741c00723e87268fc4978632bcdedb6287a","2022-12-26 00:01:23.782-05","","[]"
1785,1588,"disambiguate #includes (4/5)","Following !1582, this is part 4 of the series towards #1242 and #1785.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1588","5ae6926db484707e39ae50fbd61c37c8594f89f2","2020-09-22 00:00:46.844-04","2020-09-29T00:22:48.340Z","[]"
2101,2062,"replace mkdefs-generated gdefs.h with X macros","Prior to this commit, the gdefs.h header was generated by a C program, mkdefs.c.
There were a number of issues with this approach:

  1. The CMake build system was assuming the compiler to build mkdefs.c and the
     compiler to build Graphviz itself were the same. This is not necessarily
     true when cross-compiling.

  2. Generation under MSBuild seems to have been impractical, so the generated
     header was checked in to the repository under windows/include/gvpr/gdefs.h,
     somewhat defeating the purpose of making it generated.

  3. The CMake build system seems to not have been setup to correctly compile
     mkdefs.c under all circumstances (see #2101).

This change removes any reliance on a host C compiler and instead uses a series
of X macros¹ to achieve the same effect. The values of all generated constants
and the content of generated structures is intended to be unchanged, though some
#defines have been altered to enums. In these cases, there was no advantage to
using a macro and multiple advantages to not using a macro.

This change is affecting a shipped header (gdefs.h) and also removes it from the
list of shipped headers. Installing it appears to have been a mistake as there
is no easy way for end users to use it. The header, fully expanded, still relies
on further expansion of macros that are only defined in expr.h, a header that is
not shipped.

Closes #2101.

¹ https://en.wikipedia.org/wiki/X_Macro

----

This still needs a little work as it generates new warnings on one of the Windows builds, but it's mostly final.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2062","288075e2ffd94f1670e03ccb7a8c68e373f31d0c","2021-07-21 00:05:30.113-04","2021-07-27T00:58:05.542Z","[]"
2118,2644,"remove Awk build dependency","This MR removes the remaining Awk steps in the build process and replaces them with Python. This does not introduce new build dependencies because these steps take place during `make dist` where Python was already required.

@SoapGentoo, this touches some lines you were editing recently so please let us know if this will cause you problems.

#2118","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2644","206ad1620634269f89974e83018be8dab2515999","2022-04-30 00:05:06.284-04","2022-05-02T17:50:19.591Z","[]"
1131,3039,"remove webdot","Gitlab: closes #934, closes #1048, closes #1131","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/3039","55494ef8efc4e7046a0fca57019dab99b8e44ab1","2023-01-05 00:06:07.748-05","2023-01-05T02:50:39.671Z","[]"
1992,1993,"remove Python 2 support from shapes regression test","Python 2 was EOLed in 2020. This change removes the ability to use Python 2 when
running the shapes test.

This is somewhat moot as the Makefile.am targets for this are not really usable
right now (see the commits merged in 7d0bd41a7ccac1d0d992e8c19ce08f62b85b16ad
that improved the situation but still did not make `make check-recursive`
runnable). Nevertheless this at least removes one legacy code path that does not
need to be worked on in future.

Related to #1992.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1993","0d675ce14f131f6825fd3b6a4a8e058b2dbafc54","2021-06-08 00:06:19.456-04","2021-06-14T15:43:56.937Z","[]"
2160,2318,"more warning squashing and dead code removal","","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2318","af5d891378ed2ab1412973bd445112cf5e52efb2","2021-12-03 00:01:21.338-05","2021-12-05T02:39:10.338Z","[]"
1800,2973,"ortho: dynamically manage trapezoid structures","Ortho was calculating the number of trapezoid structures required and allocating this amount upfront. This calculation was wrong. Some inputs would exceed the number of calculated trapezoids and Graphviz would abort with an error message.

We could just empirically try bumping how the number of trapezoids are calculated. But this series instead pursues a more thorough fix where we remove upfront estimation altogether. Trapezoids are now allocated and appended on demand, their number limits only by available memory.

Gitlab: fixes #56, fixes #1880","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2973","51993bbc35a64d48c9f9be5fadd8bb8bf6201a47","2022-11-24 00:01:39.2-05","2022-11-30T05:03:33.291Z","[]"
372,2599,"Breaking change: remove unused shape_t struct from public header types.h","A minor thing I discovered while working on #372. Now that we seem to go to the next major version anyway, I thought I might file this separately.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2599","b701fc84894201a051d481968bba317638d152cb","2022-04-16 00:08:23.972-04","2022-04-17T08:31:14.570Z","[]"
2228,2683,"add 'gvmap' and 'gvmap.sh' to the CMake build system","#1836","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2683","2f9c7adb559b60e25716eca3cf971055cf501ea7","2022-05-21 00:04:14.107-04","2022-05-22T18:42:26.499Z","[]"
1793,2617,"gxl2gv: replace inline stack implementations with generic API","More #1793","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/2617","be7e79aacb33cc0597ff0b3ccba651933387517f","2022-04-20 00:03:30.562-04","2022-04-25T01:23:00.731Z","[]"
1749,1495,"fix edge attribute order confusion","Certain edge attributes are constructed in advance of their being seen in the
input because Graphviz knows it may need default values for them. Later, if seen
in the input, the values of these attributes are updated.

This all works fine unless the order in which these initially-defaulted edge
attributes appear in the input does not match the order in which the default
versions are constructed by Graphviz internally. In this case, the order in
which the attributes are seen in the input is used to construct a dictionary of
them, but the original copies are used to index into attribute values.

In the particular test case added in this commit,

  digraph {
    { rank=same; n1; n2 }

    n2 -> n1 [ headport=s, arrowhead=normal ]
  }

arrowhead was constructed with symbol ID 0 and headport was constructed with
symbol ID 1. But then the later parsing of these attributes resulted in a
dictionary where the headport value was in ID 0 and the arrowhead value was in
ID 1. Indexing into this dictionary with the initially constructed E_arrowhead
resulted in incorrectly returning the value ""s"". This caused a spurious error
'Arrow type ""s"" unknown' as well as incorrect graph output.

Fixes #1444. Note that this may just be one of several issues resulting from
using these initially constructed E_* symbols.

I'll merge on 2020-08-10 if there are no objections.","merged","https://gitlab.com/graphviz/graphviz/-/merge_requests/1495","4e727ede4f5181c4650c4aa60427bef8b43d113d","2020-08-05 00:01:01.437-04","2020-08-11T01:35:45.864Z","[]"

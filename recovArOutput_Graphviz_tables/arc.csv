"id","version","addedelements","removedelements","description"
1740,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1940,"4.0.0","{}","{cmd/tools/gvpack.c}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1836,"7.0.5","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1818,"5.0.1","{}","{cmd/lefty/lefty.c}","This is spawned from https://gitlab.com/graphviz/graphviz/-/issues/1753#note_372031810

## Steps to reproduce

Install Graphviz using the `MSBuild` ZIP archive, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#installation-instructions-for-custom-installations-recommended-for-advanced-users)

## Expected Behaviour

Being able to run `lefty`.

## Actual Behaviour

```
C:\Users\magja>lefty
'lefty' is not recognized as an internal or external command,
operable program or batch file.
```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Enabling `lefty` in MSBuild builds gives:

`C:\Users\magja\graphviz\cmd\lefty\lefty.c(363,42): error C2039: '_cnt': is not a member of '_iobuf' [C:\Users\magja\graphviz\cmd\lefty\lefty.vcxproj]`

See e.g. [this pipeline](https://gitlab.com/magjac/graphviz/-/pipelines/162207634).

Some subprojects including `lefty` and `gvedit` were removed in https://gitlab.com/graphviz/graphviz/-/commit/b191b604e19a633d7f80e02d43e80e6901874b82  because of problems, seemingly intended as a temporary solution."
1457,"2.48.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1544,"7.0.3","{lib/neatogen/overlap.c}","{lib/neatogen/overlap.c}","When building without triangle support, the following function has an invalid signature:
https://gitlab.com/graphviz/graphviz/blob/master/lib/neatogen/overlap.c#L686"
1464,"4.0.0","{}","{cmd/tools/gvpack.c}","I got to the Coverity Scan static analysis for graphviz, so sharing. Hopefully it will be useful. I am sorry I did only basic filtering of false positives - so there will be probably still many false positives. But at least [#def27], [#def29], and [#def185] - [#def189] seems suspicious. [graphviz-2.40.1-coverity-scan-results.txt](/uploads/056a54ec8ebb2d47e86a0de38beaf7f5/graphviz-2.40.1-coverity-scan-results.txt)"
2001,"2.49.2","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","In order to be able to take advantage of many modern C++ features such as automatic memory managment, it would be useful if Graphviz had a high-level C++ API.

This is spawned from a [discussion at the forum](https://forum.graphviz.org/t/work-going-forward/165/28?u=magjac). I though it might be better to collect discussion about it in one place.

I realize that this is not a priority for the Graphviz project right now, but since I'm working on creating a new test suite written in C++, I will implement parts of such an API anyway."
1798,"6.0.2","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/glcomp/glcomptexture.h,lib/neatogen/call_tri.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/neatogen/overlap.c,cmd/smyrna/glexpose.h,lib/neatogen/pca.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,lib/edgepaint/lab_gamut.h,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h}","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/glcomp/glcomptexture.h,lib/neatogen/call_tri.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/neatogen/overlap.c,cmd/smyrna/glexpose.h,lib/neatogen/pca.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,lib/edgepaint/lab_gamut.h,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1798,"7.0.2","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/neatogen/call_tri.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,cmd/smyrna/glexpose.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/neatogen/call_tri.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,cmd/smyrna/glexpose.h,lib/neatogen/overlap.c,lib/neatogen/pca.h,lib/circogen/block.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1753,"7.0.2","{lib/circogen/block.c,lib/neatogen/overlap.c}","{lib/circogen/block.c,lib/neatogen/overlap.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
1753,"6.0.2","{lib/neatogen/overlap.c}","{lib/neatogen/overlap.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
2058,"7.0.5","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1242,"2.46.1","{lib/ast/sfstr.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/fdpgen/comp.h}","{lib/ast/sfstr.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/fdpgen/comp.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1772,"2.46.0","{lib/vmalloc/vmopen.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmclose.c,lib/vmalloc/vmclear.c,lib/vmalloc/test.c}","{lib/vmalloc/vmopen.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmclose.c,lib/vmalloc/vmclear.c,lib/vmalloc/vmdcheap.c,lib/vmalloc/vmprivate.c}","I've been trying to debug the !1472 pipeline failure. So I dutifully checked out the source branch on my local Linux box and ran the CMake build instead of the Autotools build. But to my surprise, the test suite sprayed huge numbers of failures; not just failures related to the changes in that MR.

After some poking around, I realized the CI jobs are all running completely different test suites:
* the Linux jobs run `ci/test.sh`, which runs `python3 -m pytest --junitxml=report.xml tests rtest`
* the Windows Msbuild jobs run `tests/regression_tests/regression_tests.ps1`, which then runs a Python `unittest` test suite
* the Windows CMake jobs run:
  1. CMake-driven tests that call `python shapes.py` in tests/regression_tests/shapes; and
  2. `pytest -s rtest\test_examples.py`

To put it bluntly: this is a complete mess. We have little visibility into what is broken, coverage of the existing tests is difficult to determine, and it's very hard to even add a test and have confidence it will get run.

I don't mean this as an accusation of anyone (I know we're all doing our best), but we need to fix this situation. I spent a couple of hours debugging ""why do my local failures disagree with CI?"" which exhausted all the time I had available today to spend on addressing Graphviz user issues. The build system -- and now test suite -- diversity is gradually grinding progress to a standstill."
1748,"4.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
19,"7.0.5","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
1748,"5.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1521,"2.46.1","{lib/ast/sfstr.h}","{lib/ast/sfstr.h}","For various reasons, my compiler always performs optimisations, even without -O.

iffe's ""lib"" check is written in such a way that it gets optimised away entirely, thus causing all such checks to succeed, even when the function is actually not available.

Simply removing the ""static"" keyword from the global `i` variable works."
2195,"5.0.1","{}","{lib/common/logic.h}","While reviewing !2450, I recalled the Graphviz tree has various `NOTUSED` macros:

```c
#define NOTUSED(x)    (void) (x)
```

This is wrapping the common idiom for squashing warnings for unused parameters. However, it is used inconsistently in the code base. Thus Graphviz developers still need to know and recognize this idiom when they see it.

Should we remove these macros and write `(void)x;` wherever we are ignoring `x`? My thinking is that only two end states make sense: (1) `NOTUSED` used everywhere, or (2) `NOTUSED` used nowhere and removed. Which should we move towards?

CC @magjac, @makelinux

----

Some elaborating discussion for completeness...

There is a GCC extension for squashing such warnings:

```c
void foo(int x __attribute__((unused))) {
}
```

This GNU attribute is also supported by Clang. In C++, there is a much nicer portable way of expressing this by omitting the parameter name:

```cpp
void foo(int) {
}
```

There has been some discussion over the years of bringing attribute syntax to ISO C. C++11 introduced `[[...]]` syntax for attributes and I have some hope this will come to a future version of ISO C. However I am not aware of any plans for this right now.

So a void cast is the most portable way I'm currently aware of for suppressing such warnings in C."
219,"5.0.1","{}","{cmd/lefty/ws/x11/gpcanvas.c,cmd/lefty/dot2l/dottrie.c,cmd/lefty/lefty.c,cmd/lefty/ws/gtk/gscroll.c,cmd/lefty/ws/gtk/gpcanvas.c,cmd/lefty/ws/x11/libfilereq/SFDecls.h,cmd/lefty/leftyio.h,cmd/lefty/ws/mswin32/gcommon.c,cmd/lefty/ws/x11/gmenu.c,cmd/lefty/ws/gtk/gcanvas.c,cmd/lefty/ws/x11/gcommon.h,cmd/lefty/dot2l/dotlex.c,cmd/lefty/ws/x11/libfilereq/Path.c,cmd/lefty/mem.c,cmd/lefty/mem.h,cmd/lefty/ws/gtk/gmenu.c,cmd/lefty/gfxview.h,cmd/lefty/ws/gtk/gbutton.c,cmd/lefty/ws/mswin32/gcommon.h,cmd/lefty/ws/x11/gcommon.c,cmd/lefty/ws/x11/gquery.c,cmd/lefty/gfxview.c,cmd/lefty/ws/x11/libfilereq/SF.h,cmd/lefty/ws/x11/garray.c,cmd/dotty/mswin32/dotty.c,cmd/lefty/ws/mswin32/gquery.c,cmd/lefty/ws/none/gmenu.c,cmd/lefty/ws/mswin32/gtext.c,cmd/lefty/ws/gtk/gview.c,cmd/lefty/code.c,cmd/lefty/dot2l/triefa.h,cmd/lefty/ws/none/gcommon.c,cmd/lefty/ws/none/gcommon.h,cmd/lefty/ws/x11/libfilereq/Dir.c,cmd/lefty/dot2l/triefa.c,cmd/lefty/ws/x11/glabel.c,cmd/lefty/os/mswin32/io.c,cmd/lefty/ws/mswin32/gview.c,cmd/lefty/code.h,cmd/lefty/ws/gtk/glabel.c,cmd/lefty/ws/mswin32/gpcanvas.c,cmd/lefty/aix_mods/tbl.c,cmd/lefty/ws/mswin32/resource.h,cmd/lefty/ws/gtk/gtext.c,cmd/lefty/parse.h,cmd/lefty/ws/x11/gcanvas.c,cmd/lneato/mswin32/lneato.c,cmd/lefty/ws/mswin32/gcanvas.c,cmd/lefty/os/unix/io.c,cmd/lefty/parse.c,cmd/lefty/ws/x11/gview.c,cmd/lefty/ws/none/gbutton.c,cmd/lefty/aix_mods/exec.c,cmd/lefty/g.c,cmd/lefty/tbl.h,cmd/lefty/ws/gtk/garray.c,cmd/lefty/tbl.c,cmd/lefty/ws/x11/gtext.c,cmd/lefty/g.h,cmd/lefty/ws/mswin32/gmenu.c,cmd/lefty/ws/none/gtext.c,cmd/lefty/exec.h,cmd/lefty/ws/gtk/gcommon.h,cmd/lefty/exec.c,cmd/lefty/ws/none/gview.c,cmd/lefty/ws/gtk/gcommon.c,cmd/lefty/ws/x11/libfilereq/SFinternal.h,cmd/lefty/ws/mswin32/garray.c,cmd/lefty/ws/none/gcanvas.c,cmd/lefty/ws/none/garray.c,cmd/lefty/dot2l/dot2l.c,cmd/lefty/ws/gtk/gquery.c,cmd/lefty/dot2l/dot2l.h,cmd/lefty/common.h,cmd/lefty/aix_mods/common.h,cmd/lefty/common.c,cmd/lefty/ws/x11/libfilereq/xstat.h,cmd/lefty/ws/none/gquery.c,cmd/lefty/internal.c,cmd/lefty/txtview.c,cmd/lefty/ws/x11/libfilereq/SelFile.c,cmd/lefty/internal.h,cmd/lefty/txtview.h,cmd/lefty/ws/none/glabel.c,cmd/lefty/ws/none/gpcanvas.c,cmd/lefty/cs2l/cs2l.c,cmd/lefty/display.h,cmd/lefty/ws/mswin32/gbutton.c,cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/gbutton.c,cmd/lefty/display.c,cmd/lefty/ws/none/gscroll.c,cmd/lefty/ws/x11/libfilereq/Draw.c,cmd/lefty/ws/x11/gscroll.c,cmd/lefty/str.c,cmd/lefty/ws/mswin32/gscroll.c,cmd/lefty/lex.h,cmd/lefty/str.h,cmd/lefty/lex.c,cmd/lefty/ws/mswin32/glabel.c}","Ported Issue from Mantis
Original ID: 2491 **Referenced attachment(s) only available in original Mantis DB**
Reported By: vampm

SEVERITY: BLOCK
Submitted: 2014-09-22 17:01:06

OS: LINUX / X11

OS BUILD: FEDORA 2.6.30.10

PLATFORM: I686

PROFILE ID: 7
## DESCRIPTION

I have need of a lefty interface that is not unlike the code described as Appendix B.1 ""Finite Automaton Simulator"" in the (admittedly aged) DOTTY users guide entitled ""Editing graphs with dotty"". But after coding the example (w/some
minor tweaks to fit my data) and running it, the graph is produced, as expected,
into an X11/Xlib/XAW3d window using a default visual of 24-bit TrueColor.

According to the lefty code, the first graph node SHOULD be ""filled"" in ""tan"" with BlackPixel foreground and WhitePixel background. Pressing the select-mouse-button should modify this display to its next state position having the 2nd node in ""tan"" and the first node now in ""lite-grey"". Pressing the middle-mouse button should reverse this state transition, back to the original picture.

Instead, NO VISUAL FEEDBACK occurs at all. The picture remains constant with all nodes displayed in black-outline on white, non-filled, with ZERO changes as mouse interactions occur.

However, changes ARE observed in the lefty text window making table changes and
accurately depicting the changes in color and fill-state for individual nodes.

I rebuilt lefty (I am a retired Bell Labs programmer) stripping the code down
to the bare minimum (X11/XAW3D support only) to eliminate things like CAIRO, pango, libpng, et. al. to limit the list of things to examine. However, attempts at debugging on my own with virtually ZERO internal guidance has not been fruitful. My built version behaves EXACTLY as the original.

Thus I am stuck. Either, the problem is outside of lefty - (KDE Desktop, Xorg Server); or perhaps it is fixed in a newer version - but I could find no information in changelogs and/or bug reports that even comes close to describing anything about lost/missing/misapplied graph attributes. As a vague test of the external mechanisms, I modified the example code to re-activate the menu item that writes the current graph into a DOT-file. Subsequent use of DOTTY on this file CORRECTLY displays the proper filled/colored nodes as they should have been when written from the incorrectly-displayed example state.

This leads me to believe the error is truly within lefty/dotty and that despite
making the graph/lefty changes to its datastructure, SOMETHING neglects to interpret those changes and push them far enough through the software layers to reach AND successfully modify the X11 primitives as it does when initially reading the DOT description.
## STEPS TO REPRODUCE

Extract the script file ""fa.lefty"" and the two data files ""nfaexp.dot"" and ""nfaexp.trans"" from the attached tar.gz and place them into a convenient current working directory.
Then invoke with the command ""lefty fa.lefty"" and observe the created X11 window.
"
2160,"4.0.0","{}","{cmd/tools/gvpack.c}","`plugin/ming/gvrender_ming.c` outputs Shockwave Flash files, using the `ming` library: http://www.libming.org/.

This format's pretty dead, with Adobe giving up support: https://www.adobe.com/au/products/flashplayer/end-of-life.html

And the output format isn't documented on https://graphviz.org/docs/outputs/.

I propose we remove this code; perhaps through a deprecation period (maybe flagging it off in a release? then removing it next release?)"
1242,"2.48.0","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,cmd/gvmap/power.h,cmd/dot/no_builtins.c,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h}","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,cmd/gvmap/power.h,cmd/dot/no_builtins.c,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,lib/vpsc/remove_rectangle_overlap.cpp,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1950,"5.0.0","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1950,"4.0.0","{lib/cgraph/itos.h}","{lib/cgraph/sprint.h,lib/cgraph/sprint.c,lib/cgraph/itos.h,cmd/tools/gvpack.c,lib/cgraph/test_sprint.c}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1457,"7.0.4","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
2153,"5.0.1","{}","{cmd/lefty/ws/x11/gpcanvas.c,cmd/lefty/dot2l/dottrie.c,cmd/lefty/lefty.c,cmd/lefty/ws/gtk/gscroll.c,cmd/lefty/ws/gtk/gpcanvas.c,cmd/lefty/ws/x11/libfilereq/SFDecls.h,cmd/lefty/leftyio.h,cmd/lefty/ws/mswin32/gcommon.c,cmd/lefty/ws/x11/gmenu.c,cmd/lefty/ws/gtk/gcanvas.c,cmd/lefty/ws/x11/gcommon.h,cmd/lefty/dot2l/dotlex.c,cmd/lefty/ws/x11/libfilereq/Path.c,cmd/lefty/mem.c,cmd/lefty/mem.h,cmd/lefty/ws/gtk/gmenu.c,cmd/lefty/gfxview.h,cmd/lefty/ws/gtk/gbutton.c,cmd/lefty/ws/mswin32/gcommon.h,cmd/lefty/ws/x11/gcommon.c,cmd/lefty/ws/x11/gquery.c,cmd/lefty/gfxview.c,cmd/lefty/ws/x11/libfilereq/SF.h,cmd/lefty/ws/x11/garray.c,cmd/dotty/mswin32/dotty.c,cmd/lefty/ws/mswin32/gquery.c,cmd/lefty/ws/none/gmenu.c,cmd/lefty/ws/mswin32/gtext.c,cmd/lefty/ws/gtk/gview.c,cmd/lefty/code.c,cmd/lefty/dot2l/triefa.h,cmd/lefty/ws/none/gcommon.c,cmd/lefty/ws/none/gcommon.h,cmd/lefty/ws/x11/libfilereq/Dir.c,cmd/lefty/dot2l/triefa.c,cmd/lefty/ws/x11/glabel.c,cmd/lefty/os/mswin32/io.c,cmd/lefty/ws/mswin32/gview.c,cmd/lefty/code.h,cmd/lefty/ws/gtk/glabel.c,cmd/lefty/ws/mswin32/gpcanvas.c,cmd/lefty/aix_mods/tbl.c,cmd/lefty/ws/mswin32/resource.h,cmd/lefty/ws/gtk/gtext.c,cmd/lefty/parse.h,cmd/lefty/ws/x11/gcanvas.c,cmd/lneato/mswin32/lneato.c,cmd/lefty/ws/mswin32/gcanvas.c,cmd/lefty/os/unix/io.c,cmd/lefty/parse.c,cmd/lefty/ws/x11/gview.c,cmd/lefty/ws/none/gbutton.c,cmd/lefty/aix_mods/exec.c,cmd/lefty/g.c,cmd/lefty/tbl.h,cmd/lefty/ws/gtk/garray.c,cmd/lefty/tbl.c,cmd/lefty/ws/x11/gtext.c,cmd/lefty/g.h,cmd/lefty/ws/mswin32/gmenu.c,cmd/lefty/ws/none/gtext.c,cmd/lefty/exec.h,cmd/lefty/ws/gtk/gcommon.h,cmd/lefty/exec.c,cmd/lefty/ws/none/gview.c,cmd/lefty/ws/gtk/gcommon.c,cmd/lefty/ws/x11/libfilereq/SFinternal.h,cmd/lefty/ws/mswin32/garray.c,cmd/lefty/ws/none/gcanvas.c,cmd/lefty/ws/none/garray.c,cmd/lefty/dot2l/dot2l.c,cmd/lefty/ws/gtk/gquery.c,cmd/lefty/dot2l/dot2l.h,cmd/lefty/common.h,cmd/lefty/aix_mods/common.h,cmd/lefty/common.c,cmd/lefty/ws/x11/libfilereq/xstat.h,cmd/lefty/ws/none/gquery.c,cmd/lefty/internal.c,cmd/lefty/txtview.c,cmd/lefty/ws/x11/libfilereq/SelFile.c,cmd/lefty/internal.h,cmd/lefty/txtview.h,cmd/lefty/ws/none/glabel.c,cmd/lefty/ws/none/gpcanvas.c,cmd/lefty/cs2l/cs2l.c,cmd/lefty/display.h,cmd/lefty/ws/mswin32/gbutton.c,cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/gbutton.c,cmd/lefty/display.c,cmd/lefty/ws/none/gscroll.c,cmd/lefty/ws/x11/libfilereq/Draw.c,cmd/lefty/ws/x11/gscroll.c,cmd/lefty/str.c,cmd/lefty/ws/mswin32/gscroll.c,cmd/lefty/lex.h,cmd/lefty/str.h,cmd/lefty/lex.c,cmd/lefty/ws/mswin32/glabel.c}","## Steps to reproduce

./configure ...
make
make install ...

## Expected Behaviour

Now that lefty is disabled by default, lefty should not be compiled and none of its associated files shoule be installed.

## Actual Behaviour

During ./configure:
```
  lefty:         
```
After installation, as compared to my 2.46.0 that had lefty enabled, I now have
* bin/lefty -- not installed
* share/graphviz/lefty/ -- fewer files but still some
* pdf/leftyfguide.pdf -- still installed
* share/man/man1/lefty.1 -- still installed

## OS Version

OS X 10.13

## Graphviz Version

2.49.3

## Additional info

It looks like cmd/lefty/Makefile.am does an incomplete job of wrapping its pieces with ```WITH_LEFTY```. Would it be easier to apply that control to a ```SUBDIRS+=lefty``` in cmd/Makefile.am rather than within the deeper levels?

The leftyguide comes from doc/Makefile.am, where there is no ```WITH_LEFTY``` control."
1740,"7.0.3","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
2058,"2.48.0","{lib/ortho/ortho.h}","{lib/ortho/ortho.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
2173,"7.0.4","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
1836,"4.0.0","{plugin/poppler/gvloadimage_poppler.c,lib/ortho/ortho.h,plugin/gdk/gvdevice_gdk.c,lib/glcomp/opengl.h}","{plugin/poppler/gvloadimage_poppler.c,lib/ortho/ortho.h,plugin/gdk/gvdevice_gdk.c}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1843,"2.46.0","{}","{windows/getopt/getopt.h,windows/getopt/getopt.c}","## Steps to reproduce

E.g. `edgepaint -Q`

## Expected Behaviour

An error message and exit with non-zero status.

## Actual Behaviour

`option -Q unrecognized - ignored`

The edgepaint program still runs and waits for input from stdin. If some garbage is entered, it (correctly) prints an error message:

```
yada yada
Error: <stdin>: syntax error in line 1 near 'yada'
```
This was just to shown the program is still running.

## OS Version

All OSs, but this was tested on Ubuntu 18.04.

## Graphviz Version

dot - graphviz version 2.44.2~dev.20200928.0851 (20200928.0851)

Built from master at 3dd185241646d10149c86899f3a99beb51fce5d9 with local modifications.

## Additional info

Similar behavior is shown by:
* bcomps
* ccomps
* cluster
* edgepaint
* gc
* gvcolor
* gvmap
* gvmap.sh
* gvpack
* nop
* sccmap
* tred"
1785,"7.0.2","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/block.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1793,"4.0.0","{lib/cgraph/test_stack.c,lib/cgraph/stack.h}","{lib/cgraph/test_sprint.c}","Graphviz contains a number of inline implementations of a stack data structure:
* `initStk` implementation duplicated in at least five places
* SFIO's `sfstack`
* cgraph's `gstack_t`
* cgraph's `save_stack_t`
* rbtree's `stk_stack`
* ortho's `stack`
* sparse's `IntStack`
* circogen's `nstack_t`
* cricogen's `estack`
* tred's `estack`
* sccmap's `stack`
* gxl2gv's ad hoc `Gstack`

I have not analyzed how much these overlap, but I hope we can all agree this is more stack implementations than we would like to maintain. As a first step, de-duplicating all the `initStk` copies would be progress. I have not yet investigated which is the best target library to merge them into."
1785,"6.0.2","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/blocktree.h}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/blocktree.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1457,"2.46.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1880,"7.0.4","{lib/common/boxes.h}","{}","## Steps to reproduce
```
dot -Tpng -oout.png graph.dot
```

graph.dot contents:
```
digraph {
    tooltip="" ""
    graph [style=""rounded, filled"", splines=ortho, fontname=""Helvetica"", tooltip="" ""]
    edge [penwidth=1.5, tooltip="" ""]
    node [shape=box, style=""rounded, filled"", fontname=""Helvetica"", tooltip="" ""]
    
    subgraph cluster_node0 {
        id=node0
        label=""Stage 1 [-]""
        fillcolor=""#e8f3e1""
        
        class=""z0""
        
        4564909 [label=""Action 1"", id=""node4564909"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#e6f3e6"", class=""z1""]
        4564911 [label=""Action 2"", id=""node4564911"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#efdcf4"", class=""z1""]
        4564913 [label=""Action 3"", id=""node4564913"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#f9ffe3"", class=""z1""]
        subgraph cluster_node4564915 {
            id=node4564915
            label=""Action 4 [-]""
            fillcolor=""#e6f6f3""
            
            class=""z1""
            
            4564918 [label=""Subaction 1"", id=""node4564918"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#fbe3fa"", class=""z2""]
            4564920 [label=""Subaction 2"", id=""node4564920"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#efe4e2"", class=""z2""]
            4564924 [label=""Subaction 3"", id=""node4564924"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#f3f1f4"", class=""z2""]
            4564926 [label=""Subaction 4"", id=""node4564926"", fixedsize=true, width=4.2, height=1, fillcolor=""#f0eef3"", class=""z2""]
            4564929 [label=""Subaction 5"", id=""node4564929"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#ecebe4"", class=""z2""]
            4564930 [label=""Subaction 6"", id=""node4564930"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#e3f3eb"", class=""z2""]
        }
        4564932 [label=""Action 5 [+]"", id=""node4564932"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#f8eee7"", class=""z1""]
        4564952 [label=""Action 6"", id=""node4564952"", fixedsize=true, width=4.2, height=1, fillcolor=""#ecf3f5"", class=""z1""]
    }
    1 [label=""Stage 2 [+]"", id=""node1"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#dfe5e0"", class=""z0""]
    2 [label=""Stage 3 [+]"", id=""node2"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#f6e5ea"", class=""z0""]
    3 [label=""Stage 4 [+]"", id=""node3"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#ebfefc"", class=""z0""]
    4 [label=""Stage 5 [+]"", id=""node4"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#e3f8ee"", class=""z0""]
    5 [label=""Stage 6 [+]"", id=""node5"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#f2f1eb"", class=""z0""]
    
    4564909 -> 4564918 [id=""4564909-4564918""]
    4564909 -> 4564920 [id=""4564909-4564920""]
    4564911 -> 4564918 [id=""4564911-4564918""]
    4564911 -> 4564920 [id=""4564911-4564920""]
    4564913 -> 4564918 [id=""4564913-4564918""]
    4564913 -> 4564920 [id=""4564913-4564920""]
    4564918 -> 4564920 [id=""4564918-4564920""]
    4564918 -> 4564924 [id=""4564918-4564924""]
    4564918 -> 4564932 [id=""4564918-4564932""]
    4564920 -> 4564924 [id=""4564920-4564924""]
    4564924 -> 4564926 [id=""4564924-4564926""]
    4564926 -> 4564932 [id=""4564926-4564932""]
    4564929 -> 4564926 [id=""4564929-4564926""]
    4564930 -> 4564926 [id=""4564930-4564926""]
    4564932 -> 1 [id=""4564932-1""]
    4564932 -> 4564952 [id=""4564932-4564952""]
    4564952 -> 1 [id=""4564952-1""]
    1 -> 2 [id=""1-2""]
    1 -> 4 [id=""1-4""]
    2 -> 3 [id=""2-3""]
    2 -> 4 [id=""2-4""]
    3 -> 5 [id=""3-5""]
    4 -> 5 [id=""4-5""]
}
```
## Expected Behaviour

A generated png with a graph

## Actual Behaviour

An error:
```
newtrap: Trapezoid-table overflow 341
dot: trapezoid.c:84: newtrap: Assertion `0' failed.
Aborted
```

## OS Version

Ubuntu 20.04.1 LTS under WSL 2 in Windows 10 2004

## Graphviz Version

2.43.0 (0)

## Additional info

This dot file is an autogenerated artefact based on other data. The full data (including the segment in the file I provided) renders fine. Removing the spline option makes it render. Removing at least one edge also makes it render without an error."
1836,"5.0.0","{lib/ortho/ortho.h}","{lib/ortho/ortho.h}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1843,"3.0.0","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c}","{cmd/mingle/minglemain.c,lib/pack/ptest.c}","## Steps to reproduce

E.g. `edgepaint -Q`

## Expected Behaviour

An error message and exit with non-zero status.

## Actual Behaviour

`option -Q unrecognized - ignored`

The edgepaint program still runs and waits for input from stdin. If some garbage is entered, it (correctly) prints an error message:

```
yada yada
Error: <stdin>: syntax error in line 1 near 'yada'
```
This was just to shown the program is still running.

## OS Version

All OSs, but this was tested on Ubuntu 18.04.

## Graphviz Version

dot - graphviz version 2.44.2~dev.20200928.0851 (20200928.0851)

Built from master at 3dd185241646d10149c86899f3a99beb51fce5d9 with local modifications.

## Additional info

Similar behavior is shown by:
* bcomps
* ccomps
* cluster
* edgepaint
* gc
* gvcolor
* gvmap
* gvmap.sh
* gvpack
* nop
* sccmap
* tred"
1820,"3.0.0","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c}","{cmd/mingle/minglemain.c,lib/pack/ptest.c}","The version of `getopt` in [windows/getopt](https://gitlab.com/graphviz/graphviz/-/tree/master/windows/getopt) is outdated. It's incompatible with the version that the Linux autotools builds use. The fix for https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 in commit https://gitlab.com/graphviz/graphviz/-/merge_requests/1561/diffs?commit_id=997e12cf45ddfb44d1019c05f05bf12b53bd7322 shows this incompatibility.

Also, this outdated version is used by the CMake builds, regardless of which operating system you're on. I discovered this the hard way by an accidental (details provided on a need-to-know basis :flushed: ) removal of `windows/getopt` in [this Ubuntu CMake job](https://gitlab.com/magjac/graphviz/-/jobs/729861596).

My plan right now is to:

1. Remove `windows/getopt`
1. Add `getopt` using `vcpkg` to the [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) submodule
1. Adapt the CMake builds to:
    1. Use the vcpkg version on Windows
    1. Use the native/Docker image version on Linux and hope that this also works on macOS
1. Adapt the MSBuild builds to use the vcpkg version

The current libraries in [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) has unclear origins, but I read in [this issue](https://github.com/ellson/MOTHBALLED-graphviz/issues/1218#issuecomment-323947968) that many probably comes from https://windows.php.net/downloads/.

My plan is to add a new `vcpkg` top level directory to [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) so that libraries can be installed there directly without the need to figure out which file to put where in the old structure. In future, we can replace other outdated packages in the old structure with new ones installed with `vcpkg`.

**I would very much like to hear your comments on this and the above.**

As a reference, these are the `getopt` files that are installed with vcpkg:

```
~/vcpkg/vcpkg-export-20200910-082739$ find . -type f
./.vcpkg-root
./installed/vcpkg/info/getopt-win32_0.1_x86-windows.list
./installed/vcpkg/info/getopt_0_x86-windows.list
./installed/x86-windows/bin/getopt.dll
./installed/x86-windows/bin/getopt.pdb
./installed/x86-windows/debug/bin/getopt.dll
./installed/x86-windows/debug/bin/getopt.pdb
./installed/x86-windows/debug/lib/getopt.lib
./installed/x86-windows/include/getopt.h
./installed/x86-windows/lib/getopt.lib
./installed/x86-windows/share/getopt/vcpkg_abi_info.txt
./installed/x86-windows/share/getopt-win32/copyright
./installed/x86-windows/share/getopt-win32/vcpkg_abi_info.txt
./scripts/buildsystems/msbuild/applocal.ps1
./scripts/buildsystems/msbuild/vcpkg-general.xml
./scripts/buildsystems/msbuild/vcpkg.props
./scripts/buildsystems/msbuild/vcpkg.targets
./scripts/buildsystems/vcpkg.cmake
./scripts/cmake/vcpkg_get_windows_sdk.cmake
```"
1242,"2.44.0","{lib/neatogen/randomkit.c,lib/neatogen/sgd.c}","{}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1940,"7.0.5","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
2180,"3.0.0","{cmd/lneato/mswin32/lneato.c}","{}","## Steps to reproduce

`lneato.exe -V; echo $?`

## Expected Behaviour

Version printed and exit status 0.

## Actual Behaviour

No output and exit status 127.

For Debug builds, this dialog pops up:

![Screenshot_2022-01-16_094837](/uploads/0c5722f43374224fdc949048129aefa4/Screenshot_2022-01-16_094837.png)

## OS Version

Windows 10.

## Graphviz Version

`dot - graphviz version 3.0.0~dev.20220115.2107 (20220115.2107)`

Build on a branch emanating from 0be189b22.

## Additional info

The text in the popup is probably related to this warning:

`C:\GitLab-Runner\builds\magjac\graphviz\cmd\lneato\mswin32\lneato.c(55,36): warning C4476: 'snprintf' : unknown type field character 'N' in format specifier [C:\GitLab-Runner\builds\magjac\graphviz\cmd\lneato\lneato.vcxproj]`

This problem persists after fixing #1934 with !2407.

Printf-debugging shows that the program terminates when [this statement](https://gitlab.com/graphviz/graphviz/-/blob/main/cmd/lneato/mswin32/lneato.c#L55-57) is executed:

```
        snprintf(cmd, sizeof(cmd), ""%s -e \""load('dotty.lefty');""
                 ""dotty.protogt.lserver='neato';dotty.simple('%Ns');\"""", path,
                 pCmdLine);
```"
1785,"3.0.0","{plugin/poppler/gvloadimage_poppler.c}","{lib/circogen/nodeset.c,cmd/mingle/minglemain.c,lib/sparse/vector.c,plugin/poppler/gvloadimage_poppler.c,lib/mingle/edge_bundling.c,plugin/ming/gvplugin_ming.c,plugin/ming/gvrender_ming.c,lib/mingle/agglomerative_bundling.c,lib/mingle/ink.c,lib/pack/ptest.c,lib/mingle/nearest_neighbor_graph.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
211,"2.46.0","{lib/vmalloc/vmopen.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmclose.c,lib/vmalloc/vmclear.c,lib/vmalloc/test.c}","{lib/vmalloc/vmopen.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmclose.c,lib/vmalloc/vmclear.c,lib/vmalloc/vmdcheap.c,lib/vmalloc/vmprivate.c}","Ported Issue from Mantis
Original ID: 2377
Reported By: Mirraz

SEVERITY: MINOR
Submitted: 2013-09-29 08:54:42

OS: GENTOO LINUX

PLATFORM: X86_64
## DESCRIPTION

Building graphviz-2.28.0 I'v got this compilation warnings:

```
vmbest.c:438:6: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:594:7: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:633:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:647:6: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:648:6: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:874:3: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:875:3: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:1015:2: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmopen.c:141:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmopen.c:146:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmopen.c:147:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmprivate.c:174:2: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmstat.c:72:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmstat.c:74:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
```
## ADDITIONAL INFORMATION

gcc-4.7.3"
1801,"2.47.2","{lib/ast/sfstr.h}","{lib/ast/sfstr.h}","Related to #1742 and as discussed on #1800, there are further uses of `setjmp` errors paths that access non-volatile local variables with the expectation that they are preserved across a call to `longjmp`. Unfortunately this property is not true.

Rather than trying to audit this and annotate every accessed variable with `volatile`, I propose we simply remove this exception-style control flow. I have not yet assessed how hard this is to do."
1971,"2.49.2","{}","{lib/spine/spine.c}","cmd/edgepaint/edgepaintmain.c has code like the following:

```c
static void usage (char* cmd, int eval){
  fprintf(stderr, ""Usage: %s <options> gv file with 2D coordinates.\n"", cmd);
  fprintf(stderr, ""Find a color assignment of the edges, such that edges that cross at small angle have as different as posible.\n"");
  fprintf(stderr, ""Options are: \n"");
…
  fprintf(stderr, "" -random_seed=s   : random seed to use. s must be an integer. If s is negative, we do -s iterations with different seeds and pick the best.\n"");
…
  while ((c = getopt(argc, argv, "":vc:a:s:r:l:o:?"")) != -1) {
    switch (c) {
    case 's':
      *check_edges_with_same_endpoint = 1;
      break;
    case 'r':
      if (strncmp(optarg,""andom_seed="", 11) == 0){
  if (sscanf(optarg+11, ""%d"", seed) != 1){
    fprintf(stderr,""-random_seed option must be a positive integer.\n"");
    usage(cmd, 1);
  }
      }
      break;
```

A couple of things to say about this:
1. Passing something like `-rabbit` is a no-op (not rejected, but also doesn't do anything). Unclear if this is intentional.
2. When specifying a non-integer to `-random_seed` the error message contradicts the usage text.

The above is one example of a problematic argument, but every command line parameter to edgepaint has some variant of this situation.

I think this should really not be hand rolling its own (incorrect) implementation of `getopt_long`. We should just call a standard library that provides this (libc on anything non-Windows, and the existing getopt we depend on on Windows)."
2058,"4.0.0","{lib/pathplan/pathgeom.h,lib/ortho/ortho.h}","{lib/cgraph/sprint.h,lib/pathplan/pathgeom.h,lib/ortho/ortho.h,cmd/tools/gvpack.c}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1785,"2.46.1","{lib/ast/sfstr.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/fdpgen/comp.h}","{lib/ast/sfstr.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/fdpgen/comp.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
2058,"5.0.0","{lib/pathplan/pathgeom.h,lib/ortho/ortho.h}","{lib/pathplan/pathgeom.h,lib/ortho/ortho.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
797,"8.0.1","{}","{plugin/core/gvrender_core_vml.c}","Ported Issue from Mantis
Original ID: 1517
Reported By: Jorg Richter

SEVERITY: MINOR
Submitted: 2009-01-25 16:32:32

OS: X86-OSX-

VERSION: 2.16.1
## DESCRIPTION

<br>

Commandline: dot -Tcmapx -o map << ...
<br>

Results in this output:
<br>

<map id=""tree"" name=""tree"">
<area shape=""rect"" href=""a"" title=""&amp; &;"" alt="""" coords=""5,6,77,54""/>
</map>
<br>

Note that ""&amp;"" is transformed to ""&"". But this only happens when it is followed by a "";""
## STEPS TO REPRODUCE

digraph tree {
""1"" [shape=""box"", label=""&amp; &amp;;"", URL=""a""];
}
"
1573,"2.48.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
19,"4.0.0","{}","{cmd/tools/gvpack.c}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
1748,"7.0.5","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1276,"5.0.1","{lib/common/xml.c}","{lib/common/xml.c}","*Created by: caber*

https://github.com/ellson/graphviz/blob/8f8c435c7c7ed3750816fa39c39b56ab0cc6a86f/cmd/tools/gv2gml.c#L232
Doesn't escape qoutes, emits malformed gml for proper dot file, without error.
PoC:
digraph test {
x  [label=<""Label"">]; //  emits: label """"Label"""" should emit: label ""\\""Label\\""""
}

"
1748,"2.47.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1713,"7.0.3","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1798,"3.0.0","{plugin/poppler/gvloadimage_poppler.c,cmd/dotty/mswin32/dotty.c,lib/osage/osage.h,lib/common/logic.h,cmd/lneato/mswin32/lneato.c,lib/pathplan/pathgeom.h,lib/sparse/colorutil.h,lib/sfdpgen/sfdp.h,cmd/smyrna/topfisheyeview.h}","{plugin/poppler/gvloadimage_poppler.c,lib/osage/osage.h,plugin/ming/gvplugin_ming.c,plugin/ming/gvrender_ming.c,lib/sparse/colorutil.h,lib/mingle/ink.c,lib/pack/ptest.c,lib/sparse/vector.h,lib/mingle/nearest_neighbor_graph.c,lib/common/timing.h,lib/circogen/nodeset.c,lib/sparse/vector.c,lib/common/logic.h,lib/circogen/nodeset.h,lib/pathplan/pathgeom.h,lib/mingle/edge_bundling.c,lib/mingle/agglomerative_bundling.c,lib/sfdpgen/sfdp.h,cmd/smyrna/topfisheyeview.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
2046,"5.0.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","I want to customize some attributes when generating svg images.for example:
<g id=""CFC72F05-6E77-4772-93C9-0BE9485815E8-02700"" class=""node"" **time=""2021/4/15""** >"
1573,"2.49.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
2001,"6.0.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","In order to be able to take advantage of many modern C++ features such as automatic memory managment, it would be useful if Graphviz had a high-level C++ API.

This is spawned from a [discussion at the forum](https://forum.graphviz.org/t/work-going-forward/165/28?u=magjac). I though it might be better to collect discussion about it in one place.

I realize that this is not a priority for the Graphviz project right now, but since I'm working on creating a new test suite written in C++, I will implement parts of such an API anyway."
1748,"2.49.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
45,"2.49.2","{lib/common/utils.h}","{lib/common/utils.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1800,"3.0.0","{}","{lib/pack/ptest.c}","## Steps to reproduce

1. Compile [dot.demo/neatopack.c](https://gitlab.com/graphviz/graphviz/-/blob/master/dot.demo/neatopack.c) to `a.exe`
1. Run `echo 'graph {a -- b}' | ./a.exe`

## Expected Behaviour

No error.

## Actual Behaviour

* `Segmentation fault (core dumped)` on Linux.
* `STATUS_ACCESS_VIOLATION` on Windows.

## OS Version

All supported OSs in our pipeline, but debug info below from `Ubuntu 18.04`.

## Graphviz Version

Home-built based on commit 4999fb8597c6f798763b8b8f0bf911eef11cf291.

`dot - graphviz version 2.44.2~dev.20200820.1251 (20200820.1251)`

## Additional info

This might not be a bug in Graphviz. It might be a bug in `neatopack.c` or in the way I'm using it.

GDB gives this backtrace:
```

magjac@t440:~/graphviz$ gdb -c core --args a.exe g.dot
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type ""show copying""
and ""show warranty"" for details.
This GDB was configured as ""x86_64-linux-gnu"".
Type ""show configuration"" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type ""help"".
Type ""apropos word"" to search for commands related to ""word""...
Reading symbols from a.exe...done.
[New LWP 18066]
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
Core was generated by `./a.exe'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
174	../sysdeps/x86_64/multiarch/../strcmp.S: No such file or directory.
(gdb) bt
#0  0x00007ff744aa1fea in __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
#1  0x00007ff744735051 in dttree (dt=0x5592f7cd3860, obj=0x7ffdd3771140, type=4) at dttree.c:143
#2  0x00007ff74500ed18 in refsymbind (strdict=0x5592f7cd3860, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:74
#3  0x00007ff74500ede9 in agstrdup (g=0x5592f7ccba90, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:102
#4  0x00007ff74500b94f in aginternalmapinsert (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", id=6) at imap.c:126
#5  0x00007ff74500b532 in agmapnametoid (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", result=0x7ffdd3771288, createflag=0) at id.c:105
#6  0x00007ff7450126a4 in agsubg (g=0x5592f7ccba90, name=0x7ffdd3773350 ""_cc_0"", cflag=1) at subg.c:57
#7  0x00007ff744d58a2e in ccomps (g=0x5592f7ccba90, ncc=0x7ffdd3773408, pfx=0x0) at ccomps.c:326
#8  0x00005592f703cbcf in main (argc=1, argv=0x7ffdd3773528) at /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:33
(gdb) 
```

ASan gives this:
```
ASAN:DEADLYSIGNAL
=================================================================
==19175==ERROR: AddressSanitizer: SEGV on unknown address 0x362e6f732e6c (pc 0x7fef93c124db bp 0x7ffd890ded70 sp 0x7ffd890ded30 T0)
==19175==The signal is caused by a READ memory access.
    #0 0x7fef93c124da in aggetrec /home/magjac/graphviz/lib/cgraph/rec.c:42
    #1 0x7fef93c1268e in agbindrec /home/magjac/graphviz/lib/cgraph/rec.c:95
    #2 0x7fef8b54da6a in neato_init_node /home/magjac/graphviz/lib/neatogen/neatoinit.c:46
    #3 0x7fef8b54dfaf in neato_init_node_edge /home/magjac/graphviz/lib/neatogen/neatoinit.c:125
    #4 0x7fef8b54f843 in neato_init_graph /home/magjac/graphviz/lib/neatogen/neatoinit.c:620
    #5 0x7fef8b551e06 in neato_layout /home/magjac/graphviz/lib/neatogen/neatoinit.c:1438
    #6 0x7fef93950bfe in gvLayoutJobs /home/magjac/graphviz/lib/gvc/gvlayout.c:85
    #7 0x7fef9395b2e2 in gvLayout /home/magjac/graphviz/lib/gvc/gvc.c:65
    #8 0x55ec144a6114 in main /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:38
    #9 0x7fef9355db96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #10 0x55ec144a5e59 in _start (/home/magjac/graphviz/a.exe+0xe59)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /home/magjac/graphviz/lib/cgraph/rec.c:42 in aggetrec
==19175==ABORTING
```

The problem can be seen for all OSs in [this pipeline](https://gitlab.com/magjac/graphviz/-/pipelines/180140052)

https://gitlab.com/graphviz/graphviz/-/merge_requests/1527 does not solve the problem as can be seen in [this pipeline].(https://gitlab.com/magjac/graphviz/-/pipelines/180166113)."
1934,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
1934,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
1753,"3.0.0","{cmd/mingle/minglemain.cpp,lib/mingle/agglomerative_bundling.cpp,lib/mingle/edge_bundling.cpp}","{}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
2102,"7.0.6","{lib/expr/exparse.h}","{lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1573,"2.46.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1457,"5.0.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1836,"8.0.1","{lib/glcomp/glcomptexture.h}","{plugin/visio/gvrender_visio_vdx.cpp,lib/glcomp/glcomptexture.h,plugin/visio/gvplugin_visio.c}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1798,"2.49.3","{lib/circogen/block.c,cmd/gvmap/power.h,lib/circogen/block.h,lib/fdpgen/fdp.h,cmd/smyrna/topfisheyeview.h,cmd/tools/convert.h}","{lib/circogen/block.c,cmd/gvmap/power.h,lib/circogen/block.h,lib/fdpgen/fdp.h,cmd/smyrna/topfisheyeview.h,cmd/tools/convert.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1785,"2.48.0","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,cmd/gvmap/power.h,cmd/dot/no_builtins.c,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h}","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,cmd/gvmap/power.h,cmd/dot/no_builtins.c,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,lib/vpsc/remove_rectangle_overlap.cpp,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1950,"7.0.5","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1713,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1242,"6.0.1","{tclpkg/tcldot/no_builtins.c,tclpkg/gv/gv_builtins.c,cmd/dot/no_builtins.c,lib/fdpgen/comp.h,lib/glcomp/glcomptexture.h}","{tclpkg/tcldot/no_builtins.c,tclpkg/gv/gv_builtins.c,cmd/dot/no_builtins.c,lib/fdpgen/comp.h,lib/glcomp/glcomptexture.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1242,"7.0.1","{lib/circogen/blockpath.h,lib/fdpgen/comp.h,lib/dotgen/position.c,lib/glcomp/glcomptexture.h}","{lib/circogen/blockpath.h,lib/fdpgen/comp.h,lib/dotgen/position.c,lib/glcomp/glcomptexture.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
2229,"7.0.2","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","Migrating this from https://gitlab.com/graphviz/graphviz/-/merge_requests/2575#note_907097811:

> I implemented `itos` believing lifetime of an [rvalue](https://en.cppreference.com/w/c/language/value_category) like this to be the extent of the containing expression. However, your question made me delve in to try to find chapter and verse in the C standard to back this up. I realized I'm wrong and I was thinking of the equivalent scenario in C++ (which would involve what they term a [prvalue](https://en.cppreference.com/w/cpp/language/value_category#prvalue)). In C, the situation apparently differs between C99 and C11, for which there is a helpful example https://en.cppreference.com/w/c/language/lifetime.
>
> The tl;dr of this is that use of `itos` like this is unfortunately [undefined behavior](https://en.cppreference.com/w/c/language/behavior) in C99, the mode in which we compile Graphviz. We should probably look at removing `itos` and its uses, which is disappointing as I introduced it aiming to solve a number of `sprintf` problems."
2229,"6.0.2","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","Migrating this from https://gitlab.com/graphviz/graphviz/-/merge_requests/2575#note_907097811:

> I implemented `itos` believing lifetime of an [rvalue](https://en.cppreference.com/w/c/language/value_category) like this to be the extent of the containing expression. However, your question made me delve in to try to find chapter and verse in the C standard to back this up. I realized I'm wrong and I was thinking of the equivalent scenario in C++ (which would involve what they term a [prvalue](https://en.cppreference.com/w/cpp/language/value_category#prvalue)). In C, the situation apparently differs between C99 and C11, for which there is a helpful example https://en.cppreference.com/w/c/language/lifetime.
>
> The tl;dr of this is that use of `itos` like this is unfortunately [undefined behavior](https://en.cppreference.com/w/c/language/behavior) in C99, the mode in which we compile Graphviz. We should probably look at removing `itos` and its uses, which is disappointing as I introduced it aiming to solve a number of `sprintf` problems."
1768,"2.46.0","{}","{lib/cgraph/main2.c,lib/cgraph/main3.c,lib/cgraph/main1.c,lib/cgraph/tester.c}","lib/cgraph contains the following files that look like they were inadvertently committed when cgraph was imported. They seem to be fragmentary testing code:

* main1.c
* main2.c
* main3.c
* main.c
* tester.c

I think we should remove these."
1697,"2.47.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1854,"7.0.3","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
2054,"2.47.2","{}","{lib/inkpot/inkpot_value.h,lib/inkpot/inkpot_xlate.c,lib/inkpot/inkpot.h,lib/inkpot/inkpot_scheme.h,lib/inkpot/data/xcolors.c,lib/inkpot/inkpot.c,lib/inkpot/inkpot_xlate.h,lib/inkpot/inkpot_scheme.c,lib/inkpot/inkpot_value.c}","lib/inkpot/inkpot_scheme.c contains the following:

```c
inkpot_status_t inkpot_write_rgb8 ( inkpot_t *inkpot )
{
    inkpot_status_t rc;
    unsigned short rgba[4];
    char buf[7];
    int len;

    rc = inkpot_get_rgba_i ( inkpot, rgba );
    if (rc == INKPOT_SUCCESS) {
        len = snprintf(buf, ""%02x%02x%02x"", rgba[0]>>8, rgba[1]>>8, rgba[2]>>8);
  assert(len==6);
        inkpot->write_disc.writer(inkpot->write_closure, buf, len);
    }
    return rc;
}
```

The `snprintf` call in the middle here is wrong; it should be passing the buffer length as the second argument. This was committed by yours truly in f43db5e2293618361ca39ddf19dd8bc4384a5ee9.

While investigating how I could have committed code that should not have compiled, I discovered lib/inkpot is not referenced anywhere in either the Autotools or CMake build system. Should we remove this directory?"
1445,"2.42.0","{}","{macosx/GVGraph.m}","I'm getting a persistent error related to CompileXIB when attempting to build with brew:

```
brew install graphviz --with-app --with-pango --with-librsvg --with-gts
==> Downloading https://www.mirrorservice.org/sites/distfiles.macports.org/graphviz/graphviz-2.40.1.tar.gz
Already downloaded: /Users/arvind/Library/Caches/Homebrew/downloads/1c469743457f48b96f1f3fca3f9444a15736b2840413f31cc7e5f4a6bb5c8510--graphviz-2.40.1.tar.gz
==> ./configure --prefix=/usr/local/Cellar/graphviz/2.40.1 --disable-php --disable-swig --with-quartz --without-freetype2 --without-qt --without-x
==> make install
==> xcodebuild SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk -configuration Release 
Last 15 lines from /Users/arvind/Library/Logs/Homebrew/graphviz/03.xcodebuild:

CompileXIB /tmp/graphviz-20181101-50025-1fhtfzt/graphviz-2.40.1/macosx/English.lproj/Attributes.xib (in target: application)
    cd /tmp/graphviz-20181101-50025-1fhtfzt/graphviz-2.40.1/macosx
    export XCODE_DEVELOPER_USR_PATH=/Applications/Xcode.app/Contents/Developer/usr/bin/..
    /Applications/Xcode.app/Contents/Developer/usr/bin/ibtool --errors --warnings --notices --module Graphviz --output-partial-info-plist /tmp/graphviz-20181101-50025-1fhtfzt/graphviz-2.40.1/macosx/build/graphviz.build/Release/application.build/English.lproj/Attributes-PartialInfo.plist --auto-activate-custom-fonts --target-device mac --minimum-deployment-target 10.13 --output-format human-readable-text --compile /tmp/graphviz-20181101-50025-1fhtfzt/graphviz-2.40.1/macosx/build/Release/Graphviz.app/Contents/Resources/English.lproj/Attributes.nib /tmp/graphviz-20181101-50025-1fhtfzt/graphviz-2.40.1/macosx/English.lproj/Attributes.xib
2018-11-01 23:51:09.404 ibtoold[77286:458720] NetworkStorageDB:_openDBReadConnections: failed to open read connection to DB @ /Users/arvind/Library/Caches/com.apple.ibtool/Cache.db.  Error=14. Cause=unable to open database file
2018-11-01 23:51:09.404 ibtoold[77286:458720] CacheRead: unable to open cache files in /Users/arvind/Library/Caches/com.apple.ibtool

** BUILD FAILED **


The following build commands failed:
	CompileXIB /tmp/graphviz-20181101-50025-1fhtfzt/graphviz-2.40.1/macosx/English.lproj/MainMenu.xib
	CompileXIB /tmp/graphviz-20181101-50025-1fhtfzt/graphviz-2.40.1/macosx/English.lproj/Export.xib
(2 failures)
```

Can anyone explain what is going on? 

This https://stackoverflow.com/questions/46690619/build-fails-with-command-failed-with-a-nonzero-exit-code suggests some possible solutions but I'm not sufficiently familiar with building with Xcode to know where to look in the Graphviz source files.

I should note that when I build only with ""--with-app"" then it fails only on MainMenu.xib"
2308,"2.49.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","MSVC seems upset about the definition of `GVLayout`:

```
  GVLayout.cpp
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(50,35): warning C4251: 'GVC::GVLayout::m_gvc': class 'std::shared_ptr<GVC::GVContext>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(29): message : see declaration of 'std::shared_ptr<GVC::GVContext>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(51,38): warning C4251: 'GVC::GVLayout::m_g': class 'std::shared_ptr<CGraph::AGraph>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(30): message : see declaration of 'std::shared_ptr<CGraph::AGraph>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
```"
1950,"7.1.0","{cmd/tools/colorxlate.h}","{}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1940,"2.47.1","{lib/gvc/gvio.h,lib/edgepaint/lab_gamut.h}","{lib/gvc/gvio.h,lib/edgepaint/lab_gamut.h,cmd/tools/gvpack_builtins.c}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
2308,"2.49.0","{lib/gvc++/GVContext.h,lib/gvc++/GVRenderData.h,lib/cgraph++/AGraph.h,lib/gvc++/GVContext.cpp,lib/gvc++/GVLayout.h,lib/cgraph++/AGraph.cpp,lib/gvc++/GVLayout.cpp,lib/gvc++/GVRenderData.cpp}","{}","MSVC seems upset about the definition of `GVLayout`:

```
  GVLayout.cpp
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(50,35): warning C4251: 'GVC::GVLayout::m_gvc': class 'std::shared_ptr<GVC::GVContext>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(29): message : see declaration of 'std::shared_ptr<GVC::GVContext>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(51,38): warning C4251: 'GVC::GVLayout::m_g': class 'std::shared_ptr<CGraph::AGraph>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(30): message : see declaration of 'std::shared_ptr<CGraph::AGraph>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
```"
1424,"2.49.0","{}","{lib/vmalloc/vmbest.c,lib/vmalloc/vmhdr.h}","hi
I am trying to install graphviz with the command:
brew isntall graphviz

Here's the error I get:

==> ./configure --prefix=/home/wjs/.linuxbrew/Cellar/graphviz/2.40.1 --without-qt --with-quartz --disable-php --disable-swig --without-pangocairo --without-freetype2 --without-x --without-rsvg
==> make install

> Last 15 lines from /home/wangjingsong/.cache/Homebrew/Logs/graphviz/02.make:
> malloc.c:331:15: error: return type is an incomplete type
>  struct mstats mstats(void)
>                ^
> malloc.c: In function 'mstats':
> malloc.c:334:19: error: storage size of 'ms' isn't known
>      struct mstats ms;
>                    ^
> make[3]: *** [malloc.lo] Error 1
> make[3]: *** Waiting for unfinished jobs....
> make[3]: Leaving directory `/tmp/graphviz-20180912-12028-15brl3t/graphviz-2.40.1/lib/vmalloc'
> make[2]: *** [install-recursive] Error 1
> make[2]: Leaving directory `/tmp/graphviz-20180912-12028-15brl3t/graphviz-2.40.1/lib'
> make[1]: *** [install-recursive] Error 1
> make[1]: Leaving directory `/tmp/graphviz-20180912-12028-15brl3t/graphviz-2.40.1'
> make: *** [install] Error 2"
1998,"8.0.1","{}","{lib/expr/exgram.h}","## Steps to reproduce

compared sfio.h within Graphviz to sfio.h from github

## Expected Behaviour

Expected identical (or similar) versions

## Actual Behaviour
github version:   #define SFIO_VERSION    20090915L
Graphviz Version  #define SFIO_VERSION    20010201L

## OS Version

not applicable

## Additional info

Diff of files shows differences.
I have not tried to determine if any Graphviz-related bugs are fixed in the newer version of sfio."
2229,"7.0.3","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","Migrating this from https://gitlab.com/graphviz/graphviz/-/merge_requests/2575#note_907097811:

> I implemented `itos` believing lifetime of an [rvalue](https://en.cppreference.com/w/c/language/value_category) like this to be the extent of the containing expression. However, your question made me delve in to try to find chapter and verse in the C standard to back this up. I realized I'm wrong and I was thinking of the equivalent scenario in C++ (which would involve what they term a [prvalue](https://en.cppreference.com/w/cpp/language/value_category#prvalue)). In C, the situation apparently differs between C99 and C11, for which there is a helpful example https://en.cppreference.com/w/c/language/lifetime.
>
> The tl;dr of this is that use of `itos` like this is unfortunately [undefined behavior](https://en.cppreference.com/w/c/language/behavior) in C99, the mode in which we compile Graphviz. We should probably look at removing `itos` and its uses, which is disappointing as I introduced it aiming to solve a number of `sprintf` problems."
2173,"5.0.0","{lib/ortho/ortho.h}","{lib/ortho/ortho.h}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
2173,"4.0.0","{lib/ortho/ortho.h}","{lib/cgraph/sprint.h,lib/ortho/ortho.h,cmd/tools/gvpack.c}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
1806,"2.47.2","{}","{lib/expr/exlexname.c}","Creating an issue to more accurately track a discussion stemming out of !1523...

Several of the steps that generate lexers/parsers using Flex/Bison run a subsequent `sed` step to find-and-replace ""yy"" with a custom prefix. The purpose of this is to avoid symbol clashes between different generated parsers.

These `sed` steps are both fragile and over-eager (they end up replacing ""yy"" in comments etc), but they are also not necessary. At the time this code was written there was probably no other convenient way of accomplishing this. But today Flex provides [`%option prefix`](https://www.cs.virginia.edu/~cr4bd/flex-manual/Code_002dLevel-And-API-Options.html) and Bison provides [`%define api.prefix`](https://www.gnu.org/software/bison/manual/html_node/Multiple-Parsers.html) for this purpose. Moving to these would make the build more robust, remove some unnecessary intermediate files, and take us one step towards dropping `sed` as a build dependency.

Quoting my last comment from !1523:

> I attempted this and it results in quite a nice clean up: https://gitlab.com/smattr/graphviz/-/commits/064bf64e-752b-45fc-8da7-e66050fbe8b5. However, [the Windows builds fail CI](https://storage.googleapis.com/gitlab-gprd-artifacts/a4/90/a490598b42559b4746fbf724494aea3ddbf245afc71b53f49640ff8d9d53116f/2020_08_25/701692276/770923734/job.log?response-content-type=text%2Fplain%3B%20charset%3Dutf-8&response-content-disposition=inline&GoogleAccessId=gitlab-object-storage-prd@gitlab-production.iam.gserviceaccount.com&Signature=qHFyA2rslJZA63P%2FR6G34aKlFGDhqtPK24qXkOWI1fgI21RHVEz7%2FNNdg7WP%0AyXiflBcqQWrdMj80i%2FWa07RzrBxQhoSZOCBRRSAPYNn8IS8VMz7rZ4RJc3NN%0AJ34PtmsfQyNGo6YiHLz3S4EK3nf1hBV%2Fcd1zRg%2BQOwtS1GjbXJQsMuVl%2FllN%0AQYLhH6LwsI%2F28b0KREOPDLW1gPlkDImDQAQoUjmnUqsRX%2BUxYBs%2F6SqYxHgK%0AOeig%2Fhx853uR4LJEBXpTPThSTHTlyq%2FdMjPkBwokwivAT2dXqqLSpAEqbGMu%0AGYsiHF5PXnjNuGu%2FF%2B1jgQ7xk%2BvxAWQpDVK%2B0E4GRw%3D%3D&Expires=1598324058):
>
> ```
> Generating Code...
>      Creating library C:/GitLab-Runner/builds/smattr/graphviz/build/lib/cdt/Debug/cdt.lib and object C:/GitLab-Runner/builds/smattr/graphviz/build/lib/cdt/Debug/cdt.exp
>   cdt.vcxproj -> C:\GitLab-Runner\builds\smattr\graphviz\build\lib\cdt\Debug\cdt.dll
>   [BISON][Grammar] Building parser with bison 2.7
>   grammar.y:14.20-24: error: syntax error, unexpected {...}
> C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(231,5): error MSB6006: ""cmd.exe"" exited with code 1. [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\cgraph\cgraph.vcxproj]
> ```
>
> This confuses me because this feature was introduced in Bison 2.6 and the version of Bison we're using there claims to be 2.7. The [Bison docs](https://www.gnu.org/software/bison/manual/bison.html) indicate there have been no relevant changes to this feature since its introduction. @magjac do you have any guesses at what's going on here?"
1242,"7.0.0","{lib/circogen/circpos.h,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/circogen/blocktree.h}","{lib/circogen/circpos.h,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/circogen/blocktree.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1457,"5.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
2362,"8.0.1","{lib/cgraph/sort.h}","{}","The code base contains two separate implementations of the function `quicksort_place`, one in lib/topfish/rescale_layout.c and one in lib/neatogen/kkutils.c. Both contain an optimization to avoid a recursive call when the chunk they’re sorting is already sorted. However the neatogen implementation additionally performs the two recursive calls before these checks:

```c
quicksort_place(place, ordering, first, middle - 1); // ← unconditional sort already
quicksort_place(place, ordering, middle + 1, last);  // being performed

// these conditions will now always evaluate false
if (!sorted_place(place,ordering,first,middle-1))
  quicksort_place(place,ordering,first,middle-1);
if (!sorted_place(place,ordering,middle+1,last))
  quicksort_place(place,ordering,middle+1,last);
```

Not sure this is worth fixing. The simplest path may be to migrate to C11 in the near future and replace all of this with `qsort_s`."
1457,"4.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1757,"2.49.0","{}","{lib/vmalloc/vmbest.c,lib/vmalloc/vmhdr.h}","## Steps to reproduce

simply run `gvpr` with musl-libc, segfault, 2.44.1

## Additional info

It seems that the stub vmalloc from lib/vmalloc/malloc.c overrides the musl-libc `malloc`(linker and loader things). So `malloc` in gvpr always return NULL.

And everything works if I add `-Dcray` to CFLAGS/CXXFLAGS to disable those stubs in lib/vmalloc/{malloc.c,vmbest.c}. You can check my working building sciprts [here](https://github.com/xhebox/noname-linux/blob/master/ports/graphviz/Pkgfile)."
1950,"7.0.4","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1573,"2.46.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1713,"2.47.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1800,"4.0.0","{}","{lib/cgraph/agxbuf.c}","## Steps to reproduce

1. Compile [dot.demo/neatopack.c](https://gitlab.com/graphviz/graphviz/-/blob/master/dot.demo/neatopack.c) to `a.exe`
1. Run `echo 'graph {a -- b}' | ./a.exe`

## Expected Behaviour

No error.

## Actual Behaviour

* `Segmentation fault (core dumped)` on Linux.
* `STATUS_ACCESS_VIOLATION` on Windows.

## OS Version

All supported OSs in our pipeline, but debug info below from `Ubuntu 18.04`.

## Graphviz Version

Home-built based on commit 4999fb8597c6f798763b8b8f0bf911eef11cf291.

`dot - graphviz version 2.44.2~dev.20200820.1251 (20200820.1251)`

## Additional info

This might not be a bug in Graphviz. It might be a bug in `neatopack.c` or in the way I'm using it.

GDB gives this backtrace:
```

magjac@t440:~/graphviz$ gdb -c core --args a.exe g.dot
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type ""show copying""
and ""show warranty"" for details.
This GDB was configured as ""x86_64-linux-gnu"".
Type ""show configuration"" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type ""help"".
Type ""apropos word"" to search for commands related to ""word""...
Reading symbols from a.exe...done.
[New LWP 18066]
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
Core was generated by `./a.exe'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
174	../sysdeps/x86_64/multiarch/../strcmp.S: No such file or directory.
(gdb) bt
#0  0x00007ff744aa1fea in __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
#1  0x00007ff744735051 in dttree (dt=0x5592f7cd3860, obj=0x7ffdd3771140, type=4) at dttree.c:143
#2  0x00007ff74500ed18 in refsymbind (strdict=0x5592f7cd3860, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:74
#3  0x00007ff74500ede9 in agstrdup (g=0x5592f7ccba90, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:102
#4  0x00007ff74500b94f in aginternalmapinsert (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", id=6) at imap.c:126
#5  0x00007ff74500b532 in agmapnametoid (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", result=0x7ffdd3771288, createflag=0) at id.c:105
#6  0x00007ff7450126a4 in agsubg (g=0x5592f7ccba90, name=0x7ffdd3773350 ""_cc_0"", cflag=1) at subg.c:57
#7  0x00007ff744d58a2e in ccomps (g=0x5592f7ccba90, ncc=0x7ffdd3773408, pfx=0x0) at ccomps.c:326
#8  0x00005592f703cbcf in main (argc=1, argv=0x7ffdd3773528) at /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:33
(gdb) 
```

ASan gives this:
```
ASAN:DEADLYSIGNAL
=================================================================
==19175==ERROR: AddressSanitizer: SEGV on unknown address 0x362e6f732e6c (pc 0x7fef93c124db bp 0x7ffd890ded70 sp 0x7ffd890ded30 T0)
==19175==The signal is caused by a READ memory access.
    #0 0x7fef93c124da in aggetrec /home/magjac/graphviz/lib/cgraph/rec.c:42
    #1 0x7fef93c1268e in agbindrec /home/magjac/graphviz/lib/cgraph/rec.c:95
    #2 0x7fef8b54da6a in neato_init_node /home/magjac/graphviz/lib/neatogen/neatoinit.c:46
    #3 0x7fef8b54dfaf in neato_init_node_edge /home/magjac/graphviz/lib/neatogen/neatoinit.c:125
    #4 0x7fef8b54f843 in neato_init_graph /home/magjac/graphviz/lib/neatogen/neatoinit.c:620
    #5 0x7fef8b551e06 in neato_layout /home/magjac/graphviz/lib/neatogen/neatoinit.c:1438
    #6 0x7fef93950bfe in gvLayoutJobs /home/magjac/graphviz/lib/gvc/gvlayout.c:85
    #7 0x7fef9395b2e2 in gvLayout /home/magjac/graphviz/lib/gvc/gvc.c:65
    #8 0x55ec144a6114 in main /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:38
    #9 0x7fef9355db96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #10 0x55ec144a5e59 in _start (/home/magjac/graphviz/a.exe+0xe59)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /home/magjac/graphviz/lib/cgraph/rec.c:42 in aggetrec
==19175==ABORTING
```

The problem can be seen for all OSs in [this pipeline](https://gitlab.com/magjac/graphviz/-/pipelines/180140052)

https://gitlab.com/graphviz/graphviz/-/merge_requests/1527 does not solve the problem as can be seen in [this pipeline].(https://gitlab.com/magjac/graphviz/-/pipelines/180166113)."
1748,"2.49.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1242,"8.0.2","{lib/neatogen/voronoi.h,lib/glcomp/glcomptexture.h}","{lib/sfdpgen/uniform_stress.h,lib/neatogen/voronoi.h,lib/sfdpgen/uniform_stress.c,lib/glcomp/glcomptexture.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1713,"7.0.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1713,"6.0.2","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1748,"7.0.4","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
45,"2.47.2","{lib/gvc/gvio.h}","{lib/gvc/gvio.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1880,"7.0.5","{lib/common/boxes.h}","{lib/common/boxes.h}","## Steps to reproduce
```
dot -Tpng -oout.png graph.dot
```

graph.dot contents:
```
digraph {
    tooltip="" ""
    graph [style=""rounded, filled"", splines=ortho, fontname=""Helvetica"", tooltip="" ""]
    edge [penwidth=1.5, tooltip="" ""]
    node [shape=box, style=""rounded, filled"", fontname=""Helvetica"", tooltip="" ""]
    
    subgraph cluster_node0 {
        id=node0
        label=""Stage 1 [-]""
        fillcolor=""#e8f3e1""
        
        class=""z0""
        
        4564909 [label=""Action 1"", id=""node4564909"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#e6f3e6"", class=""z1""]
        4564911 [label=""Action 2"", id=""node4564911"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#efdcf4"", class=""z1""]
        4564913 [label=""Action 3"", id=""node4564913"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#f9ffe3"", class=""z1""]
        subgraph cluster_node4564915 {
            id=node4564915
            label=""Action 4 [-]""
            fillcolor=""#e6f6f3""
            
            class=""z1""
            
            4564918 [label=""Subaction 1"", id=""node4564918"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#fbe3fa"", class=""z2""]
            4564920 [label=""Subaction 2"", id=""node4564920"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#efe4e2"", class=""z2""]
            4564924 [label=""Subaction 3"", id=""node4564924"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#f3f1f4"", class=""z2""]
            4564926 [label=""Subaction 4"", id=""node4564926"", fixedsize=true, width=4.2, height=1, fillcolor=""#f0eef3"", class=""z2""]
            4564929 [label=""Subaction 5"", id=""node4564929"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#ecebe4"", class=""z2""]
            4564930 [label=""Subaction 6"", id=""node4564930"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#e3f3eb"", class=""z2""]
        }
        4564932 [label=""Action 5 [+]"", id=""node4564932"", fixedsize=true, width=4.2, height=0.75, fillcolor=""#f8eee7"", class=""z1""]
        4564952 [label=""Action 6"", id=""node4564952"", fixedsize=true, width=4.2, height=1, fillcolor=""#ecf3f5"", class=""z1""]
    }
    1 [label=""Stage 2 [+]"", id=""node1"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#dfe5e0"", class=""z0""]
    2 [label=""Stage 3 [+]"", id=""node2"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#f6e5ea"", class=""z0""]
    3 [label=""Stage 4 [+]"", id=""node3"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#ebfefc"", class=""z0""]
    4 [label=""Stage 5 [+]"", id=""node4"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#e3f8ee"", class=""z0""]
    5 [label=""Stage 6 [+]"", id=""node5"", fixedsize=true, width=4.2, height=0.5, fillcolor=""#f2f1eb"", class=""z0""]
    
    4564909 -> 4564918 [id=""4564909-4564918""]
    4564909 -> 4564920 [id=""4564909-4564920""]
    4564911 -> 4564918 [id=""4564911-4564918""]
    4564911 -> 4564920 [id=""4564911-4564920""]
    4564913 -> 4564918 [id=""4564913-4564918""]
    4564913 -> 4564920 [id=""4564913-4564920""]
    4564918 -> 4564920 [id=""4564918-4564920""]
    4564918 -> 4564924 [id=""4564918-4564924""]
    4564918 -> 4564932 [id=""4564918-4564932""]
    4564920 -> 4564924 [id=""4564920-4564924""]
    4564924 -> 4564926 [id=""4564924-4564926""]
    4564926 -> 4564932 [id=""4564926-4564932""]
    4564929 -> 4564926 [id=""4564929-4564926""]
    4564930 -> 4564926 [id=""4564930-4564926""]
    4564932 -> 1 [id=""4564932-1""]
    4564932 -> 4564952 [id=""4564932-4564952""]
    4564952 -> 1 [id=""4564952-1""]
    1 -> 2 [id=""1-2""]
    1 -> 4 [id=""1-4""]
    2 -> 3 [id=""2-3""]
    2 -> 4 [id=""2-4""]
    3 -> 5 [id=""3-5""]
    4 -> 5 [id=""4-5""]
}
```
## Expected Behaviour

A generated png with a graph

## Actual Behaviour

An error:
```
newtrap: Trapezoid-table overflow 341
dot: trapezoid.c:84: newtrap: Assertion `0' failed.
Aborted
```

## OS Version

Ubuntu 20.04.1 LTS under WSL 2 in Windows 10 2004

## Graphviz Version

2.43.0 (0)

## Additional info

This dot file is an autogenerated artefact based on other data. The full data (including the segment in the file I provided) renders fine. Removing the spline option makes it render. Removing at least one edge also makes it render without an error."
19,"5.0.1","{}","{cmd/dot/dot_builtins.c}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
2229,"8.0.1","{}","{lib/cgraph/itos.h}","Migrating this from https://gitlab.com/graphviz/graphviz/-/merge_requests/2575#note_907097811:

> I implemented `itos` believing lifetime of an [rvalue](https://en.cppreference.com/w/c/language/value_category) like this to be the extent of the containing expression. However, your question made me delve in to try to find chapter and verse in the C standard to back this up. I realized I'm wrong and I was thinking of the equivalent scenario in C++ (which would involve what they term a [prvalue](https://en.cppreference.com/w/cpp/language/value_category#prvalue)). In C, the situation apparently differs between C99 and C11, for which there is a helpful example https://en.cppreference.com/w/c/language/lifetime.
>
> The tl;dr of this is that use of `itos` like this is unfortunately [undefined behavior](https://en.cppreference.com/w/c/language/behavior) in C99, the mode in which we compile Graphviz. We should probably look at removing `itos` and its uses, which is disappointing as I introduced it aiming to solve a number of `sprintf` problems."
1723,"3.0.0","{}","{lib/mingle/edge_bundling.c,lib/mingle/agglomerative_bundling.c}","One of the things I came across in my recent changes was a `MEMCPY` macro, lib/sfio/sfhdr.h:736-747:

```c
/* note that MEMCPY advances the associated pointers */
#define MEMCPY(to,fr,n) \
	switch(n) \
	{ default : memcpy((void*)to,(void*)fr,n); to += n; fr += n; break; \
	  case  7 : *to++ = *fr++; \
	  case  6 : *to++ = *fr++; \
	  case  5 : *to++ = *fr++; \
	  case  4 : *to++ = *fr++; \
	  case  3 : *to++ = *fr++; \
	  case  2 : *to++ = *fr++; \
	  case  1 : *to++ = *fr++; \
	}
```

Newer GCC has `-Wimplicit-fallthrough` enabled by default which causes all expansions of this macro to spray quite a lot of warning text. It seemed like a nice simple change to add `/* fallthrough */` comments to suppress this. However, modern compilers and libcs are capable of doing the micro-optimization in this macro by themselves, so why not simplify the whole macro I thought:

```diff
diff --git lib/sfio/sfhdr.h lib/sfio/sfhdr.h
index 7ebb4acce..265b69526 100644
--- lib/sfio/sfhdr.h
+++ lib/sfio/sfhdr.h
@@ -735,16 +735,7 @@ extern ""C"" {

 /* note that MEMCPY advances the associated pointers */
 #define MEMCPY(to,fr,n) \
-       switch(n) \
-       { default : memcpy((void*)to,(void*)fr,n); to += n; fr += n; break; \
-         case  7 : *to++ = *fr++; \
-         case  6 : *to++ = *fr++; \
-         case  5 : *to++ = *fr++; \
-         case  4 : *to++ = *fr++; \
-         case  3 : *to++ = *fr++; \
-         case  2 : *to++ = *fr++; \
-         case  1 : *to++ = *fr++; \
-       }
+       do { memcpy((void*)to,(void*)fr,n); to += n; fr += n; } while (0)

     extern Sfextern_t _Sfextern;
     extern Sftab_t _Sftable;
```

However while doing this I noticed what I think is a subtle bug. This macro implicitly assumes its inputs are char pointers. Looking at the first call site I came across, this is not true, lib/gvmap/make_map.c:1895-1899:

```c
      int *grouping2;
      nzok0 = nzok = *nrandom - 1;/* points that are within tolerance of real or artificial points */
      grouping2 = MALLOC(sizeof(int)*(n + *nrandom));
      MEMCPY(grouping2, grouping, sizeof(int)*n);
      grouping = grouping2;
```

The inputs are int pointers here. So, e.g. on x86-64, the `MEMCPY` invocation steps the two pointers forwards by 4 times the numbers of bytes copied. This seems clearly incorrect. Am I misreading something?"
1422,"2.47.0","{lib/ast/sfstr.h}","{lib/ast/sfstr.h}","graphviz-2.40.1/lib/sfio/features/sfio does benchmarking at compile time to decide which version of a function to use.

It does this for 3 functions: memchr memccpy mmap

This creates variations in build results across the openSUSE build workers that vary in type of system and parallel build load.
See https://reproducible-builds.org/ for why this matters.

Would be nice to have a cleaner way of disabling that than the attached patch
[reproducible.patch](/uploads/f172041f98f03b7f2eb2d3901524b3f8/reproducible.patch)"
1785,"2.46.0","{lib/vmalloc/vmopen.c,lib/vmalloc/vmbest.c,windows/include/gvpr/gdefs.h,lib/vmalloc/vmclose.c,lib/fdpgen/fdp.h,lib/vmalloc/vmclear.c,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/fdpgen/comp.h,lib/rbtree/red_black_tree.h,lib/vmalloc/test.c}","{lib/sfio/Sfio_f/_sfeof.c,lib/sfio/Sfio_dc/sfdcfilter.c,lib/sfio/Sfio_f/_sfputl.c,lib/vmalloc/vmclose.c,lib/sfio/sfgetr.c,lib/fdpgen/fdp.h,lib/sfio/Sfio_dc/sfdcunion.c,lib/sfio/Sfio_f/_sfulen.c,lib/sfio/sfmutex.c,lib/sfio/Sfio_f/_sfclrerr.c,lib/sfio/sfgetl.c,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/sfio/Sfio_dc/sfdclzw.c,lib/sfio/sfgetd.c,lib/rbtree/red_black_tree.h,lib/sfio/Sfio_f/_sferror.c,lib/sfio/sfllen.c,lib/sfio/sftell.c,lib/sfio/Sfio_dc/sfdcseekable.c,lib/vmalloc/vmbest.c,windows/include/gdefs.h,lib/sfio/Sfio_f/_sfstacked.c,lib/sfio/sfputl.c,windows/include/exop.h,lib/sfio/sfreserve.c,lib/sfio/sfnotify.c,lib/sfio/Sfio_f/_sfdlen.c,lib/sfio/Sfio_dc/sfdctee.c,lib/sfio/sfdlen.c,lib/sfio/Sfio_f/_sfputd.c,lib/sfio/sfputd.c,lib/vmalloc/vmopen.c,lib/sfio/Sfio_f/_sfllen.c,lib/sfio/Sfio_dc/sfdcsubstream.c,lib/sfio/Sfio_f/_sfputm.c,lib/sfio/sfprints.c,lib/sfio/sfgetu.c,lib/sfio/Sfio_f/_sfputu.c,lib/vmalloc/vmclear.c,lib/sfio/sfpoll.c,lib/sfio/sfclrlock.c,lib/sfio/sfgetm.c,lib/sfio/sfpopen.c,lib/sfio/Sfio_f/_sfvalue.c,lib/sfio/sfset.c,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/sfio/sfstrtod.c,lib/sfio/sfpurge.c,lib/sfio/Sfio_dc/sfdcslow.c,lib/sfio/Sfio_dc/sfdcdos.c,lib/sfio/sfputm.c,lib/sfio/sfputu.c,lib/sfio/sfpool.c,lib/sfio/sfsize.c,lib/fdpgen/comp.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1798,"2.48.0","{cmd/gvmap/country_graph_coloring.h,lib/glcomp/glcomptextpng.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,cmd/gvmap/power.h,cmd/dot/no_builtins.c,tclpkg/tkstubs/tkInt.h,lib/pathplan/solvers.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,cmd/lefty/cs2l/cs2l.h,lib/ortho/ortho.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h}","{cmd/gvmap/country_graph_coloring.h,lib/glcomp/glcomptextpng.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,cmd/gvmap/power.h,cmd/dot/no_builtins.c,tclpkg/tkstubs/tkInt.h,lib/pathplan/solvers.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,cmd/lefty/cs2l/cs2l.h,lib/ortho/ortho.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
2058,"5.0.1","{lib/gvc++/GVRenderData.cpp}","{cmd/dot/dot_builtins.c,lib/gvc++/GVRenderData.cpp,lib/ast/hashkey.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1573,"2.44.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1934,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
799,"8.0.1","{}","{plugin/core/gvrender_core_vml.c}","Ported Issue from Mantis
Original ID: 1511
Reported By: steve roush

SEVERITY: MINOR
Submitted: 2009-01-13 20:34:03

OS: _-_-

VERSION: 2.20.3
## DESCRIPTION

<br>

There are multiple bugs in VML output:
<CD>
- text is positioned in ""px"", not ""pt"" and is incorrect, at least on my monitor.
- edges are drawn as polygons and are filled!  Thus any curved edge is filled.
  </CD>
  <br>

Below is a diff containing fixes.
## STEPS TO REPRODUCE

// dot -Tvml -o demo.html demo.dot

digraph mainmap {
 node [shape=box];

 ""top"" -> ""extra wide middleA"";
 ""top"" -> ""extra wide middleB"";
 ""top"" -> ""bottom"";
 ""extra wide middleA"" -> ""bottom"";
 ""extra wide middleB"" -> ""bottom"";
}
## ADDITIONAL INFORMATION

The reason I use VML is to add animation javascript via simple postprocessing.
"
1940,"2.49.0","{lib/gvc/gvio.h}","{lib/gvc/gvio.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1940,"7.0.4","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1798,"8.0.1","{lib/common/htmllex.h,cmd/gvmap/power.h,lib/sparse/colorutil.h,lib/edgepaint/lab_gamut.h,lib/common/usershape.h,lib/fdpgen/comp.h,lib/sfdpgen/sfdp.h,lib/dotgen/position.c,lib/neatogen/call_tri.h,lib/glcomp/glcomptexture.h,lib/gvc/gvcontext.c}","{plugin/core/gvrender_core_vml.c,plugin/visio/VisioText.cpp,cmd/gvmap/power.h,plugin/visio/VisioGraphic.cpp,lib/sparse/colorutil.h,lib/edgepaint/lab_gamut.h,plugin/visio/VisioGraphic.h,lib/expr/exgram.h,lib/neatogen/call_tri.h,lib/glcomp/glcomptexture.h,plugin/visio/VisioText.h,lib/common/htmllex.h,lib/cgraph/cmpnd.c,plugin/visio/gvrender_visio_vdx.cpp,plugin/visio/VisioRender.cpp,plugin/visio/VisioRender.h,lib/common/usershape.h,lib/sfdpgen/sfdp.h,lib/fdpgen/comp.h,lib/dotgen/position.c,lib/gvc/gvcontext.c,plugin/visio/gvplugin_visio.c}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1242,"2.44.1","{lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/glcomp/glCompTrackBar.h,lib/sfdpgen/layout_similarity.c,lib/neatogen/pca.h,lib/rbtree/red_black_tree.h,lib/fdpgen/comp.h,lib/neatogen/pca.c}","{lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/glcomp/glCompTrackBar.h,lib/sfdpgen/layout_similarity.c,lib/neatogen/pca.h,lib/fdpgen/comp.h,lib/rbtree/red_black_tree.h,lib/neatogen/pca.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1998,"4.0.0","{}","{lib/sfio/sftmp.c,lib/sfio/sfresize.c}","## Steps to reproduce

compared sfio.h within Graphviz to sfio.h from github

## Expected Behaviour

Expected identical (or similar) versions

## Actual Behaviour
github version:   #define SFIO_VERSION    20090915L
Graphviz Version  #define SFIO_VERSION    20010201L

## OS Version

not applicable

## Additional info

Diff of files shows differences.
I have not tried to determine if any Graphviz-related bugs are fixed in the newer version of sfio."
1740,"7.0.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1785,"7.0.3","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1868,"5.0.1","{lib/common/xml.c}","{lib/common/xml.c}","The current code base (608aab7b989cf33b48145e1c78abdd73f598fe44) has four implementations (that I have found so far) of XML string escaping:
* `xml_string` and friends in cmd/tools/gv2gxl.c
* `xml_string` and friends in cmd/smyrna/smyrna_utils.c
* `xml_string` and friends in lib/common/labels.c
* `html_string` and friends in plugin/core/gvrender_core_vml.c

The identical comments surrounding these implementations make it clear they were once copy-pasted from the same source. The lib/common one looks like the original and a comment in Smyrna even explains why this situation exists:

```c
/* many of these functions are available in libcommon.
 * We cannot use those because dependencies cause a great
 * deal of libcommon to be brought in, which complicates
 * and makes possible conflicts as some parts of libcommon
 * rely on not using libcgraph.
 */
```

As far as I'm aware, this situation no longer exists. libcgraph is the only graph library supported and there is no sensible way to use libcommon without libcgraph. However, a naive attempt to undo the Smyrna code duplication fails because:
1. A number of libcommon headers rely on something else being #included prior to them. lib/common/utils.h that contains the libcommon prototype for `xml_string` cannot be #included without other libcommon headers being #included prior to it.
2. A number of libcommon typedefs/prototypes conflict with other ones in Smyrna headers.

The situation is pretty messy and may require diagnosing and undoing the conflicting definitions one-by-one. But I think it's worth doing in service of paring back the number of XML string escaping variants we're maintaining to 1."
1477,"4.0.0","{}","{lib/cgraph/agxbuf.c}","Sometimes it might be convenient to just add graphviz as a subdirectory and manually build it in your cmakelists, however, it looks like currently it's prevented by the use of `CMAKE_SOURCE_DIR` in a few places (which would link to the topmost CMakeLists.txt), when it should've been `CMAKE_CURRENT_SOURCE_DIR` (so relative paths would be correct). Maybe there are other issues, I haven't investigated further."
1457,"2.46.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
2173,"7.0.5","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
2050,"2.47.2","{}","{cmd/smyrna/md5.h,cmd/smyrna/md5.c}","cmd/smyrna contains a full MD5 implementation, which is largely unused. Check sums are calculated in a couple of places but never read. There are also check sum fields that are never read or written.

This should all be removed, both the computation of these check sums, as well as the MD5 implementation itself."
2153,"4.0.0","{cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/libfilereq/SF.h}","{cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/libfilereq/SF.h}","## Steps to reproduce

./configure ...
make
make install ...

## Expected Behaviour

Now that lefty is disabled by default, lefty should not be compiled and none of its associated files shoule be installed.

## Actual Behaviour

During ./configure:
```
  lefty:         
```
After installation, as compared to my 2.46.0 that had lefty enabled, I now have
* bin/lefty -- not installed
* share/graphviz/lefty/ -- fewer files but still some
* pdf/leftyfguide.pdf -- still installed
* share/man/man1/lefty.1 -- still installed

## OS Version

OS X 10.13

## Graphviz Version

2.49.3

## Additional info

It looks like cmd/lefty/Makefile.am does an incomplete job of wrapping its pieces with ```WITH_LEFTY```. Would it be easier to apply that control to a ```SUBDIRS+=lefty``` in cmd/Makefile.am rather than within the deeper levels?

The leftyguide comes from doc/Makefile.am, where there is no ```WITH_LEFTY``` control."
2153,"5.0.0","{cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/libfilereq/SF.h}","{cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/libfilereq/SF.h}","## Steps to reproduce

./configure ...
make
make install ...

## Expected Behaviour

Now that lefty is disabled by default, lefty should not be compiled and none of its associated files shoule be installed.

## Actual Behaviour

During ./configure:
```
  lefty:         
```
After installation, as compared to my 2.46.0 that had lefty enabled, I now have
* bin/lefty -- not installed
* share/graphviz/lefty/ -- fewer files but still some
* pdf/leftyfguide.pdf -- still installed
* share/man/man1/lefty.1 -- still installed

## OS Version

OS X 10.13

## Graphviz Version

2.49.3

## Additional info

It looks like cmd/lefty/Makefile.am does an incomplete job of wrapping its pieces with ```WITH_LEFTY```. Would it be easier to apply that control to a ```SUBDIRS+=lefty``` in cmd/Makefile.am rather than within the deeper levels?

The leftyguide comes from doc/Makefile.am, where there is no ```WITH_LEFTY``` control."
1852,"2.49.2","{}","{lib/spine/spine.c}","
In https://gitlab.com/graphviz/graphviz/-/merge_requests/1592 and https://gitlab.com/graphviz/graphviz/-/merge_requests/1608 many tools were adapted to GNU getopt. See e.g. https://gitlab.com/graphviz/graphviz/-/merge_requests/1592/diffs?commit_id=2c6420be0dfc252b7db4207accf40af2170c50e8 or https://gitlab.com/graphviz/graphviz/-/merge_requests/1608/diffs?commit_id=81852ca7b3eea614752c8d38230562a9027efe89.

macOS however, does not use GNU getopt, but BSD getopt where the `optopt` variable behaves slightly differently and the code prior the the changes mentioned above is the correct one. Therefore, the code needs to be different depending on which OS it it running on.

The tools that are currently failing the tools test on macOS are:
* bcomps
* ccomps
* cluster
* dijkstra
* edgepaint
* gc
* gvcolor
* gvmap
* gvpack
* mm2gv
* nop
* sccmap
* tred

All of them may not have been working on macOS before, but at least some of them did.

This problem should be fixed before the next stable release.

## Steps to reproduce

E.g. `bcomps -?`

## Expected Behaviour

Show usage and exit status zero.

## Actual Behaviour

Output:
```
bcomps: option -? unrecognized
Usage: bcomps [-stvx?] [-o<out template>] <files>
  -o - output file template
  -s - don't print components
  -t - emit block-cutpoint tree
  -v - verbose
  -x - external
  -? - print usage
If no files are specified, stdin is used
```
Exit status 1.

## OS Version

macOS Catalina Version 10.15.7

## Graphviz Version

dot - graphviz version 2.44.2~dev.20201016.1439 (20201016.1439)

Home-built from aa165722db3b556213622727d45bb08d95d3bac7."
1740,"6.0.2","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1950,"5.0.1","{lib/cgraph/itos.h}","{cmd/dotty/mswin32/dotty.c,cmd/lefty/ws/x11/gpcanvas.c,cmd/lefty/ws/gtk/gcanvas.c,cmd/lefty/internal.c,cmd/lefty/ws/mswin32/gpcanvas.c,cmd/lefty/aix_mods/exec.c,cmd/lefty/g.c,cmd/lefty/dot2l/dot2l.c,cmd/lefty/dot2l/dotlex.c,cmd/lefty/lefty.c,cmd/lefty/str.c,cmd/lefty/ws/x11/gcanvas.c,cmd/lefty/exec.c,cmd/lneato/mswin32/lneato.c,cmd/lefty/ws/mswin32/gcanvas.c,cmd/lefty/ws/x11/gbutton.c,lib/cgraph/itos.h,cmd/lefty/common.c,cmd/lefty/gfxview.c,cmd/lefty/os/unix/io.c,cmd/lefty/lex.c}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1457,"7.0.5","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1753,"2.49.1","{lib/circogen/block.c}","{lib/circogen/block.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
1682,"7.0.1","{lib/dotgen/position.c}","{lib/dotgen/position.c}","Hello graphviz team,

As part of our fuzzing efforts at Google, we have identified an issue affecting
graphviz (tested with revision * master e55af3cce23ddcdeefb42b75d115ee23e86e456b).

To reproduce, we are attaching a Dockerfile which compiles the project with
LLVM, taking advantage of the sanitizers that it offers. More information about
how to use the attached Dockerfile can be found here:
https://docs.docker.com/engine/reference/builder/

Instructions:
`unzip artifacts_150610136.zip`
`docker build --build-arg SANITIZER=address --tag=autofuzz-graphviz-150610136 autofuzz_150610136`
`docker run --entrypoint /fuzzing/repro.sh --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc autofuzz-graphviz-150610136 """" /tmp/poc`
`docker run --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc -it autofuzz-graphviz-150610136`

Alternatively, and depending on the bug, you could use gcc, valgrind or other
instrumentation tools to aid in the investigation. The sanitizer error that we
encountered is here:

```
INFO: Seed: 2527279755
/fuzzing/graphviz/parser_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
Executed /tmp/bf492754-0826-45f6-b402-3c40c2322f27 in 1 ms
***
*** NOTE: fuzzing was not performed, you have only
***       executed the target code on a fixed set of inputs.
***
INFO: Seed: 2560428046
/fuzzing/graphviz/render_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
utils.c:175:16: runtime error: signed integer overflow: 1946157056 + 1946157056 cannot be represented in type 'int'
    #0 0x7f1641b0102c in UF_union /fuzzing/graphviz/lib/common/utils.c:175:16
    #1 0x7f164185795a in collapse_rankset /fuzzing/graphviz/lib/dotgen/rank.c:117:6
    #2 0x7f16418560ec in collapse_sets /fuzzing/graphviz/lib/dotgen/rank.c:289:3
    #3 0x7f1641855d14 in dot1_rank /fuzzing/graphviz/lib/dotgen/rank.c:546:5
    #4 0x7f1641855a3f in dot_rank /fuzzing/graphviz/lib/dotgen/rank.c:580:2
    #5 0x7f164183024a in dotLayout /fuzzing/graphviz/lib/dotgen/dotinit.c:311:9
    #6 0x7f164182fb3e in doDot /fuzzing/graphviz/lib/dotgen/dotinit.c:463:2
    #7 0x7f164182fac9 in dot_layout /fuzzing/graphviz/lib/dotgen/dotinit.c:509:22
    #8 0x7f1641a80482 in gvLayoutJobs /fuzzing/graphviz/lib/gvc/gvlayout.c:85:2
    #9 0x7f1641a8daa5 in gvLayout /fuzzing/graphviz/lib/gvc/gvc.c:65:9
    #10 0x4522a2 in LLVMFuzzerTestOneInput /fuzzing/graphviz/./graphviz_render_fuzzer.cc:23:18
    #11 0x4364a3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x4364a3)
    #12 0x428ac3 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x428ac3)
    #13 0x42cfa2 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/fuzzing/graphviz/render_fuzzer+0x42cfa2)
    #14 0x4287db in main (/fuzzing/graphviz/render_fuzzer+0x4287db)
    #15 0x7f1640f4309a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
    #16 0x407c89 in _start (/fuzzing/graphviz/render_fuzzer+0x407c89)
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior utils.c:175:16 in 

```

We will gladly work with you so you can successfully confirm and reproduce this
issue. Do let us know if you have any feedback surrounding the documentation.

Once you have reproduced the issue, we'd appreciate to learn your expected
timeline for an update to be released. With any fix, please attribute the report
to ""Google Autofuzz project"".

We are also pleased to inform you that your project is eligible for inclusion to
the OSS-Fuzz project, which can provide additional continuous fuzzing, and
encourage you to investigate integration options.


Don't hesitate to let us know if you have any questions!

Google AutoFuzz Team
[artifacts_150610136.zip](/uploads/a77494d541fed662376294998e4914a5/artifacts_150610136.zip)"
1521,"4.0.0","{}","{lib/sfio/sftmp.c}","For various reasons, my compiler always performs optimisations, even without -O.

iffe's ""lib"" check is written in such a way that it gets optimised away entirely, thus causing all such checks to succeed, even when the function is actually not available.

Simply removing the ""static"" keyword from the global `i` variable works."
1775,"2.46.0","{lib/cgraph/strcasecmp.h}","{lib/common/strcasecmp.c,lib/common/strncasecmp.c,compat.h}","Graphviz contains three implementations of the function `strcasecmp` and two implementations of the function `strncasecmp`. It looks like these were added as there was no cross-platform alternative at the time.

At the time of writing, every major platform I'm aware of implements `strcasecmp` and `strncasecmp` except Windows. Windows also has this functionality, but under the names `_stricmp` and `_strnicmp`.

I propose we remove these implementations and replace them with a small compatibility header that provides `strcasecmp` and `strncasecmp` on Windows by redirecting to the alternatives. I'm creating this issue to see what others' opinions are. Maybe it would be better to hold off until we move to C99 in December 2020? I don't believe this will make a difference because these two functions are not standardized in C99 but rather in POSIX 2001, but maybe someone has a different opinion."
1798,"2.46.1","{lib/ast/sfstr.h,lib/glcomp/glcomptextpng.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,cmd/lefty/cs2l/cs2l.h,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h,tclpkg/tkstubs/tkInt.h}","{lib/ast/sfstr.h,lib/glcomp/glcomptextpng.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,cmd/lefty/cs2l/cs2l.h,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h,tclpkg/tkstubs/tkInt.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1950,"8.0.1","{lib/sparse/colorutil.h}","{lib/sparse/colorutil.h,lib/cgraph/itos.h}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
2195,"5.0.0","{lib/common/logic.h}","{lib/common/logic.h}","While reviewing !2450, I recalled the Graphviz tree has various `NOTUSED` macros:

```c
#define NOTUSED(x)    (void) (x)
```

This is wrapping the common idiom for squashing warnings for unused parameters. However, it is used inconsistently in the code base. Thus Graphviz developers still need to know and recognize this idiom when they see it.

Should we remove these macros and write `(void)x;` wherever we are ignoring `x`? My thinking is that only two end states make sense: (1) `NOTUSED` used everywhere, or (2) `NOTUSED` used nowhere and removed. Which should we move towards?

CC @magjac, @makelinux

----

Some elaborating discussion for completeness...

There is a GCC extension for squashing such warnings:

```c
void foo(int x __attribute__((unused))) {
}
```

This GNU attribute is also supported by Clang. In C++, there is a much nicer portable way of expressing this by omitting the parameter name:

```cpp
void foo(int) {
}
```

There has been some discussion over the years of bringing attribute syntax to ISO C. C++11 introduced `[[...]]` syntax for attributes and I have some hope this will come to a future version of ISO C. However I am not aware of any plans for this right now.

So a void cast is the most portable way I'm currently aware of for suppressing such warnings in C."
2195,"4.0.0","{lib/common/logic.h}","{lib/common/logic.h}","While reviewing !2450, I recalled the Graphviz tree has various `NOTUSED` macros:

```c
#define NOTUSED(x)    (void) (x)
```

This is wrapping the common idiom for squashing warnings for unused parameters. However, it is used inconsistently in the code base. Thus Graphviz developers still need to know and recognize this idiom when they see it.

Should we remove these macros and write `(void)x;` wherever we are ignoring `x`? My thinking is that only two end states make sense: (1) `NOTUSED` used everywhere, or (2) `NOTUSED` used nowhere and removed. Which should we move towards?

CC @magjac, @makelinux

----

Some elaborating discussion for completeness...

There is a GCC extension for squashing such warnings:

```c
void foo(int x __attribute__((unused))) {
}
```

This GNU attribute is also supported by Clang. In C++, there is a much nicer portable way of expressing this by omitting the parameter name:

```cpp
void foo(int) {
}
```

There has been some discussion over the years of bringing attribute syntax to ISO C. C++11 introduced `[[...]]` syntax for attributes and I have some hope this will come to a future version of ISO C. However I am not aware of any plans for this right now.

So a void cast is the most portable way I'm currently aware of for suppressing such warnings in C."
2178,"3.0.0","{cmd/dotty/mswin32/dotty.c,cmd/mingle/minglemain.cpp,cmd/lneato/mswin32/lneato.c,lib/cgraph/exit.h}","{}","## Steps to reproduce

Run the CI tests on a computer with high load.

## Expected Behaviour

No errors.

## Actual Behaviour

I've seen a few different flavors:
* `AssertionError: osage -? did not show usage. Output was:`
* `Failed: Malformed version string:`
* `AssertionError: patchwork -? did not show usage. Output was:`
* `AssertionError: assert 'Warning: Illegal value might for ALIGN - ignored' in ''`
* `AssertionError: neato -? did not show usage. Output was:`

## OS Version

Windows 10 with MinGW 3.2.0-340.x86_64

## Graphviz Version

Various development versions including 3.0.0~dev.20220111.0459 and 2.50.1~dev.20220109.1142.

## Additional info

This problems are themselves not new. These tests were added in https://gitlab.com/graphviz/graphviz/-/merge_requests/2387 so we haven't been able to see them before that.

Links to failing jobs:

* https://gitlab.com/magjac/graphviz/-/jobs/1955416602
* https://gitlab.com/graphviz/graphviz/-/jobs/1958702924
* https://gitlab.com/graphviz/graphviz/-/jobs/1958233385
* https://gitlab.com/graphviz/graphviz/-/jobs/1958567111
* https://gitlab.com/magjac/graphviz/-/jobs/1959543455
* https://gitlab.com/graphviz/graphviz/-/jobs/1960812195"
19,"7.0.4","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
1748,"5.0.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1521,"2.46.0","{}","{lib/sfio/sfpopen.c,lib/sfio/sfpoll.c}","For various reasons, my compiler always performs optimisations, even without -O.

iffe's ""lib"" check is written in such a way that it gets optimised away entirely, thus causing all such checks to succeed, even when the function is actually not available.

Simply removing the ""static"" keyword from the global `i` variable works."
1852,"2.50.0","{}","{cmd/tools/tred2.c}","
In https://gitlab.com/graphviz/graphviz/-/merge_requests/1592 and https://gitlab.com/graphviz/graphviz/-/merge_requests/1608 many tools were adapted to GNU getopt. See e.g. https://gitlab.com/graphviz/graphviz/-/merge_requests/1592/diffs?commit_id=2c6420be0dfc252b7db4207accf40af2170c50e8 or https://gitlab.com/graphviz/graphviz/-/merge_requests/1608/diffs?commit_id=81852ca7b3eea614752c8d38230562a9027efe89.

macOS however, does not use GNU getopt, but BSD getopt where the `optopt` variable behaves slightly differently and the code prior the the changes mentioned above is the correct one. Therefore, the code needs to be different depending on which OS it it running on.

The tools that are currently failing the tools test on macOS are:
* bcomps
* ccomps
* cluster
* dijkstra
* edgepaint
* gc
* gvcolor
* gvmap
* gvpack
* mm2gv
* nop
* sccmap
* tred

All of them may not have been working on macOS before, but at least some of them did.

This problem should be fixed before the next stable release.

## Steps to reproduce

E.g. `bcomps -?`

## Expected Behaviour

Show usage and exit status zero.

## Actual Behaviour

Output:
```
bcomps: option -? unrecognized
Usage: bcomps [-stvx?] [-o<out template>] <files>
  -o - output file template
  -s - don't print components
  -t - emit block-cutpoint tree
  -v - verbose
  -x - external
  -? - print usage
If no files are specified, stdin is used
```
Exit status 1.

## OS Version

macOS Catalina Version 10.15.7

## Graphviz Version

dot - graphviz version 2.44.2~dev.20201016.1439 (20201016.1439)

Home-built from aa165722db3b556213622727d45bb08d95d3bac7."
1785,"8.0.1","{cmd/gvmap/power.h,lib/fdpgen/comp.h,lib/dotgen/position.c,lib/glcomp/glcomptexture.h,lib/gvc/gvcontext.c}","{plugin/core/gvrender_core_vml.c,plugin/visio/VisioText.cpp,cmd/gvmap/power.h,plugin/visio/VisioGraphic.cpp,plugin/visio/VisioGraphic.h,lib/expr/exgram.h,lib/glcomp/glcomptexture.h,plugin/visio/VisioText.h,lib/cgraph/cmpnd.c,plugin/visio/gvrender_visio_vdx.cpp,plugin/visio/VisioRender.cpp,plugin/visio/VisioRender.h,lib/fdpgen/comp.h,lib/dotgen/position.c,lib/gvc/gvcontext.c,plugin/visio/gvplugin_visio.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1242,"2.46.0","{lib/vmalloc/vmopen.c,lib/vmalloc/vmbest.c,windows/include/gvpr/gdefs.h,lib/vmalloc/vmclose.c,lib/fdpgen/fdp.h,lib/vmalloc/vmclear.c,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/fdpgen/comp.h,lib/rbtree/red_black_tree.h,lib/vmalloc/test.c}","{lib/sfio/Sfio_f/_sfeof.c,lib/sfio/Sfio_dc/sfdcfilter.c,lib/sfio/Sfio_f/_sfputl.c,lib/vmalloc/vmclose.c,lib/sfio/sfgetr.c,lib/fdpgen/fdp.h,lib/sfio/Sfio_dc/sfdcunion.c,lib/sfio/Sfio_f/_sfulen.c,lib/sfio/sfmutex.c,lib/sfio/Sfio_f/_sfclrerr.c,lib/sfio/sfgetl.c,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/sfio/Sfio_dc/sfdclzw.c,lib/sfio/sfgetd.c,lib/rbtree/red_black_tree.h,lib/sfio/Sfio_f/_sferror.c,lib/sfio/sfllen.c,lib/sfio/sftell.c,lib/sfio/Sfio_dc/sfdcseekable.c,lib/vmalloc/vmbest.c,windows/include/gdefs.h,lib/sfio/Sfio_f/_sfstacked.c,lib/sfio/sfputl.c,windows/include/exop.h,lib/sfio/sfreserve.c,lib/sfio/sfnotify.c,lib/sfio/Sfio_f/_sfdlen.c,lib/sfio/Sfio_dc/sfdctee.c,lib/sfio/sfdlen.c,lib/sfio/Sfio_f/_sfputd.c,lib/sfio/sfputd.c,lib/vmalloc/vmopen.c,lib/sfio/Sfio_f/_sfllen.c,lib/sfio/Sfio_dc/sfdcsubstream.c,lib/sfio/Sfio_f/_sfputm.c,lib/sfio/sfprints.c,lib/sfio/sfgetu.c,lib/sfio/Sfio_f/_sfputu.c,lib/vmalloc/vmclear.c,lib/sfio/sfpoll.c,lib/sfio/sfclrlock.c,lib/sfio/sfgetm.c,lib/sfio/sfpopen.c,lib/sfio/Sfio_f/_sfvalue.c,lib/sfio/sfset.c,lib/glcomp/glCompTrackBar.h,lib/neatogen/pca.h,lib/sfio/sfstrtod.c,lib/sfio/sfpurge.c,lib/sfio/Sfio_dc/sfdcslow.c,lib/sfio/Sfio_dc/sfdcdos.c,lib/sfio/sfputm.c,lib/sfio/sfputu.c,lib/sfio/sfpool.c,lib/sfio/sfsize.c,lib/fdpgen/comp.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1753,"7.0.3","{lib/circogen/block.c,lib/neatogen/overlap.c}","{lib/circogen/block.c,lib/neatogen/overlap.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
634,"5.0.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","Ported Issue from Mantis
Original ID: 1932
Reported By: Steve Dodier-Lazaro

SEVERITY: MINOR
Submitted: 2010-08-03 09:21:00

OS: _-_-

VERSION: 2.20.2
## DESCRIPTION

<br>

Hello,
<br>

I'm opening this bug because I noticed libgraph is using char\* pretty much everywhere in it's function signatures, even when const char\* (static strings) are expected.
<br>

This is completely transparent in C, but with a modern C++ compiler, it triggers compilation warnings about const char\* being given to the functions instead of char\* if using static strings.
<br>

Since the functions seem to expect static strings and do not seem to modify them, I think they should use const char\* instead.
<br>

Cordially,
SD.
"
2058,"7.0.4","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1873,"8.0.1","{}","{lib/expr/exgram.h}","Graphviz contains two APIs for in-memory dynamically expanding string buffers:
1. `sfstropen` and friends in lib/ast/sfstr.h
2. `agxbuf` functions in lib/cgraph/agxbuf.h

These are both analogues of [`open_memstream`](https://pubs.opengroup.org/onlinepubs/9699919799/functions/open_memstream.html).

(1) is implemented in terms of `sfnew` and encumbered by a lot of the SFIO implementation details, which are irrelevant for in-memory buffers. In contrast, (2) is about as clean and minimal as it's possible to get for something like this.

I think we should move towards deprecating `sfstropen` and migrate all existing uses to `agxbuf` functionality."
1457,"2.44.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1798,"7.0.3","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/glcomp/glcomptexture.h,lib/neatogen/call_tri.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,cmd/smyrna/glexpose.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,lib/edgepaint/lab_gamut.h,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/neatogen/call_tri.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,cmd/smyrna/glexpose.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,lib/edgepaint/lab_gamut.h,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1544,"7.0.2","{lib/neatogen/overlap.c}","{lib/neatogen/overlap.c}","When building without triangle support, the following function has an invalid signature:
https://gitlab.com/graphviz/graphviz/blob/master/lib/neatogen/overlap.c#L686"
1464,"5.0.1","{}","{cmd/lefty/lefty.c,cmd/lefty/os/unix/io.c}","I got to the Coverity Scan static analysis for graphviz, so sharing. Hopefully it will be useful. I am sorry I did only basic filtering of false positives - so there will be probably still many false positives. But at least [#def27], [#def29], and [#def185] - [#def189] seems suspicious. [graphviz-2.40.1-coverity-scan-results.txt](/uploads/056a54ec8ebb2d47e86a0de38beaf7f5/graphviz-2.40.1-coverity-scan-results.txt)"
1544,"6.0.2","{lib/neatogen/overlap.c}","{lib/neatogen/overlap.c}","When building without triangle support, the following function has an invalid signature:
https://gitlab.com/graphviz/graphviz/blob/master/lib/neatogen/overlap.c#L686"
1836,"7.0.4","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1603,"2.46.0","{lib/vmalloc/vmopen.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmclose.c,lib/vmalloc/vmclear.c,lib/vmalloc/test.c}","{lib/vmalloc/vmstat.c,lib/vmalloc/vmopen.c,lib/vmalloc/vmtrace.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmdebug.c,lib/vmalloc/vmregion.c,lib/vmalloc/vmclose.c,lib/vmalloc/vmclear.c,lib/vmalloc/malloc.c,lib/vmalloc/vmset.c,lib/vmalloc/vmprofile.c,lib/vmalloc/vmsegment.c,lib/vmalloc/vmdisc.c,lib/vmalloc/vmwalk.c,lib/vmalloc/vmlast.c,lib/vmalloc/vmdcheap.c,lib/vmalloc/vmpool.c,lib/vmalloc/vmprivate.c}","On FreeBSD sbrk is required, however arm64 and RISC-V don't implement this. Previously I was able to work around this by defining `_std_malloc`, however since 7beb94c8a2 This has been removed."
1940,"5.0.1","{}","{cmd/dot/dot_builtins.c}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1740,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1868,"2.47.1","{lib/gvc/gvio.h}","{lib/gvc/gvio.h}","The current code base (608aab7b989cf33b48145e1c78abdd73f598fe44) has four implementations (that I have found so far) of XML string escaping:
* `xml_string` and friends in cmd/tools/gv2gxl.c
* `xml_string` and friends in cmd/smyrna/smyrna_utils.c
* `xml_string` and friends in lib/common/labels.c
* `html_string` and friends in plugin/core/gvrender_core_vml.c

The identical comments surrounding these implementations make it clear they were once copy-pasted from the same source. The lib/common one looks like the original and a comment in Smyrna even explains why this situation exists:

```c
/* many of these functions are available in libcommon.
 * We cannot use those because dependencies cause a great
 * deal of libcommon to be brought in, which complicates
 * and makes possible conflicts as some parts of libcommon
 * rely on not using libcgraph.
 */
```

As far as I'm aware, this situation no longer exists. libcgraph is the only graph library supported and there is no sensible way to use libcommon without libcgraph. However, a naive attempt to undo the Smyrna code duplication fails because:
1. A number of libcommon headers rely on something else being #included prior to them. lib/common/utils.h that contains the libcommon prototype for `xml_string` cannot be #included without other libcommon headers being #included prior to it.
2. A number of libcommon typedefs/prototypes conflict with other ones in Smyrna headers.

The situation is pretty messy and may require diagnosing and undoing the conflicting definitions one-by-one. But I think it's worth doing in service of paring back the number of XML string escaping variants we're maintaining to 1."
1785,"2.47.3","{lib/glcomp/glcompimage.c,plugin/core/gvrender_core_map.c,lib/glcomp/glcompimage.h,lib/fdpgen/fdp.h}","{lib/glcomp/glcompimage.c,plugin/core/gvrender_core_map.c,lib/glcomp/glcompimage.h,lib/fdpgen/fdp.h,lib/expr/exrewind.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1940,"7.0.3","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1854,"8.0.2","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
1573,"2.49.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
2102,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1785,"2.50.0","{plugin/poppler/gvloadimage_poppler.c,lib/neatogen/overlap.h,lib/common/textspan.c,plugin/core/gvrender_core_map.c,lib/fdpgen/fdp.h,lib/dotgen/dot.h}","{plugin/poppler/gvloadimage_poppler.c,lib/neatogen/overlap.h,cmd/tools/tred2.c,lib/common/textspan.c,plugin/core/gvrender_core_map.c,lib/fdpgen/fdp.h,lib/dotgen/dot.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1544,"5.0.0","{lib/neatogen/overlap.c}","{lib/neatogen/overlap.c}","When building without triangle support, the following function has an invalid signature:
https://gitlab.com/graphviz/graphviz/blob/master/lib/neatogen/overlap.c#L686"
1544,"4.0.0","{lib/neatogen/overlap.c}","{lib/neatogen/overlap.c}","When building without triangle support, the following function has an invalid signature:
https://gitlab.com/graphviz/graphviz/blob/master/lib/neatogen/overlap.c#L686"
1740,"2.49.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
2178,"7.0.5","{lib/cgraph/test_list.c,lib/cgraph/list.h}","{}","## Steps to reproduce

Run the CI tests on a computer with high load.

## Expected Behaviour

No errors.

## Actual Behaviour

I've seen a few different flavors:
* `AssertionError: osage -? did not show usage. Output was:`
* `Failed: Malformed version string:`
* `AssertionError: patchwork -? did not show usage. Output was:`
* `AssertionError: assert 'Warning: Illegal value might for ALIGN - ignored' in ''`
* `AssertionError: neato -? did not show usage. Output was:`

## OS Version

Windows 10 with MinGW 3.2.0-340.x86_64

## Graphviz Version

Various development versions including 3.0.0~dev.20220111.0459 and 2.50.1~dev.20220109.1142.

## Additional info

This problems are themselves not new. These tests were added in https://gitlab.com/graphviz/graphviz/-/merge_requests/2387 so we haven't been able to see them before that.

Links to failing jobs:

* https://gitlab.com/magjac/graphviz/-/jobs/1955416602
* https://gitlab.com/graphviz/graphviz/-/jobs/1958702924
* https://gitlab.com/graphviz/graphviz/-/jobs/1958233385
* https://gitlab.com/graphviz/graphviz/-/jobs/1958567111
* https://gitlab.com/magjac/graphviz/-/jobs/1959543455
* https://gitlab.com/graphviz/graphviz/-/jobs/1960812195"
1753,"5.0.1","{cmd/dot/dot_builtins.cpp,lib/circogen/block.c,lib/common/xml.c,lib/neatogen/overlap.c,cmd/smyrna/gui/glcompui.c,lib/circogen/edgelist.c}","{lib/circogen/block.c,lib/common/xml.c,lib/neatogen/overlap.c,cmd/smyrna/gui/glcompui.c,lib/circogen/edgelist.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
1798,"5.0.1","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/neatogen/call_tri.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,cmd/smyrna/glexpose.h,lib/circogen/block.h,lib/neatogen/pca.h,cmd/smyrna/gui/glcompui.c,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/gvc/gvplugin_device.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,tclpkg/gv/gv_builtins.c,lib/ortho/partition.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h,lib/circogen/edgelist.c,lib/gvc/gvcontext.c}","{cmd/lefty/ws/x11/gpcanvas.c,cmd/lefty/dot2l/dottrie.c,cmd/lefty/lefty.c,cmd/lefty/ws/gtk/gscroll.c,cmd/lefty/ws/gtk/gpcanvas.c,lib/ast/strcopy.c,lib/circogen/block.c,cmd/lefty/ws/x11/libfilereq/SFDecls.h,lib/circogen/block.h,cmd/lefty/leftyio.h,cmd/smyrna/gui/glcompui.c,cmd/lefty/ws/mswin32/gcommon.c,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,cmd/lefty/ws/x11/gmenu.c,cmd/lefty/ws/gtk/gcanvas.c,cmd/lefty/ws/x11/gcommon.h,cmd/dot/no_builtins.c,cmd/lefty/dot2l/dotlex.c,lib/dotgen/dot.h,cmd/dot/dot_builtins.c,lib/ast/hashkey.h,cmd/lefty/ws/x11/libfilereq/Path.c,lib/gvc/gvplugin_device.h,cmd/lefty/mem.c,cmd/lefty/mem.h,cmd/lefty/ws/gtk/gmenu.c,cmd/lefty/gfxview.h,cmd/lefty/ws/gtk/gbutton.c,cmd/lefty/ws/x11/gcommon.c,cmd/lefty/ws/mswin32/gcommon.h,cmd/lefty/ws/x11/gquery.c,cmd/lefty/gfxview.c,cmd/lefty/ws/x11/libfilereq/SF.h,cmd/lefty/ws/x11/garray.c,cmd/dotty/mswin32/dotty.c,cmd/lefty/ws/mswin32/gquery.c,lib/glcomp/glcomptextpng.h,cmd/lefty/ws/none/gmenu.c,cmd/lefty/ws/mswin32/gtext.c,cmd/lefty/ws/gtk/gview.c,cmd/lefty/code.c,cmd/lefty/dot2l/triefa.h,lib/pathplan/solvers.h,cmd/lefty/ws/none/gcommon.c,cmd/lefty/ws/none/gcommon.h,tclpkg/tcldot/no_builtins.c,cmd/smyrna/glexpose.h,cmd/lefty/ws/x11/libfilereq/Dir.c,cmd/lefty/dot2l/triefa.c,cmd/lefty/ws/x11/glabel.c,lib/neatogen/pca.h,cmd/lefty/os/mswin32/io.c,cmd/lefty/ws/mswin32/gview.c,cmd/lefty/code.h,cmd/lefty/ws/gtk/glabel.c,cmd/lefty/ws/mswin32/gpcanvas.c,cmd/lefty/aix_mods/tbl.c,cmd/lefty/ws/mswin32/resource.h,cmd/lefty/ws/gtk/gtext.c,cmd/lefty/parse.h,plugin/pango/gvgetfontlist.h,cmd/lefty/ws/x11/gcanvas.c,cmd/lneato/mswin32/lneato.c,cmd/lefty/ws/mswin32/gcanvas.c,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,lib/circogen/edgelist.c,cmd/lefty/os/unix/io.c,cmd/lefty/parse.c,cmd/lefty/ws/x11/gview.c,lib/circogen/circpos.h,cmd/lefty/ws/none/gbutton.c,lib/sfdpgen/sfdpinternal.h,cmd/lefty/aix_mods/exec.c,cmd/lefty/g.c,cmd/lefty/tbl.h,cmd/lefty/ws/gtk/garray.c,cmd/lefty/tbl.c,cmd/lefty/g.h,cmd/lefty/ws/x11/gtext.c,cmd/lefty/ws/mswin32/gmenu.c,cmd/lefty/ws/none/gtext.c,lib/neatogen/overlap.h,lib/common/logic.h,cmd/lefty/exec.h,cmd/lefty/ws/gtk/gcommon.h,lib/edgepaint/lab_gamut.c,cmd/lefty/exec.c,cmd/lefty/ws/none/gview.c,lib/neatogen/overlap.c,cmd/lefty/ws/gtk/gcommon.c,cmd/lefty/ws/x11/libfilereq/SFinternal.h,cmd/lefty/ws/mswin32/garray.c,lib/osage/osage.h,cmd/lefty/ws/none/gcanvas.c,cmd/lefty/ws/none/garray.c,cmd/lefty/dot2l/dot2l.c,cmd/lefty/ws/gtk/gquery.c,cmd/lefty/dot2l/dot2l.h,lib/common/htmllex.h,lib/neatogen/closest.h,cmd/lefty/common.h,lib/ortho/partition.h,cmd/lefty/aix_mods/common.h,cmd/lefty/common.c,cmd/lefty/ws/x11/libfilereq/xstat.h,cmd/lefty/ws/none/gquery.c,cmd/lefty/internal.c,cmd/lefty/txtview.c,cmd/lefty/ws/x11/libfilereq/SelFile.c,cmd/lefty/internal.h,lib/neatogen/call_tri.h,cmd/lefty/txtview.h,cmd/lefty/ws/none/glabel.c,cmd/lefty/ws/none/gpcanvas.c,cmd/lefty/cs2l/cs2l.c,lib/neatogen/voronoi.h,cmd/lefty/display.h,cmd/lefty/ws/mswin32/gbutton.c,cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/gbutton.c,cmd/lefty/display.c,cmd/lefty/ws/none/gscroll.c,cmd/lefty/ws/x11/libfilereq/Draw.c,lib/edgepaint/intersection.h,tclpkg/tkstubs/tkInt.h,cmd/lefty/ws/x11/gscroll.c,lib/circogen/circo.h,cmd/lefty/str.c,cmd/lefty/ws/mswin32/gscroll.c,lib/circogen/blockpath.h,cmd/lefty/lex.h,lib/circogen/blocktree.h,cmd/lefty/str.h,lib/gvc/gvcontext.c,cmd/lefty/lex.c,cmd/lefty/ws/mswin32/glabel.c}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
2308,"6.0.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","MSVC seems upset about the definition of `GVLayout`:

```
  GVLayout.cpp
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(50,35): warning C4251: 'GVC::GVLayout::m_gvc': class 'std::shared_ptr<GVC::GVContext>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(29): message : see declaration of 'std::shared_ptr<GVC::GVContext>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(51,38): warning C4251: 'GVC::GVLayout::m_g': class 'std::shared_ptr<CGraph::AGraph>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(30): message : see declaration of 'std::shared_ptr<CGraph::AGraph>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
```"
2102,"2.49.0","{lib/gvc/gvio.h,lib/expr/exparse.h}","{lib/gvc/gvio.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1697,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1843,"2.50.0","{}","{cmd/tools/tred2.c}","## Steps to reproduce

E.g. `edgepaint -Q`

## Expected Behaviour

An error message and exit with non-zero status.

## Actual Behaviour

`option -Q unrecognized - ignored`

The edgepaint program still runs and waits for input from stdin. If some garbage is entered, it (correctly) prints an error message:

```
yada yada
Error: <stdin>: syntax error in line 1 near 'yada'
```
This was just to shown the program is still running.

## OS Version

All OSs, but this was tested on Ubuntu 18.04.

## Graphviz Version

dot - graphviz version 2.44.2~dev.20200928.0851 (20200928.0851)

Built from master at 3dd185241646d10149c86899f3a99beb51fce5d9 with local modifications.

## Additional info

Similar behavior is shown by:
* bcomps
* ccomps
* cluster
* edgepaint
* gc
* gvcolor
* gvmap
* gvmap.sh
* gvpack
* nop
* sccmap
* tred"
1748,"7.0.3","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1850,"2.46.0","{}","{windows/include/builddate.h}","According to @ellson in https://gitlab.com/graphviz/graphviz/-/issues/1839#note_419178199:

>This is all because somebody decided to rename the rpms with a dev string that breaks the rpm version numbering syntax rules.
>
>Now it looks like the package names are graphviz-2.44.2\~dev with a version of 20200926.1616 which breaks all the ""requires rules"" and also broke yum updating.
>
> I suggest the change should be completely reverted. What problem was supposed to be solved by the change?

The new version numbering was introduced with https://gitlab.com/graphviz/graphviz/-/merge_requests/1476.

The background was discussed in https://forum.graphviz.org/t/version-numbering-going-forward/237.

It is not clear to me why the new version numbering causes the above mentioned problems. There was a problem with using `-` that was the original idea, but changing it to `~` seemed to be ok, see https://forum.graphviz.org/t/version-numbering-going-forward/237/16.

It is also not clear to me where I can see the problems mentioned above or how I could test that another solution does not have these problems."
1868,"8.0.1","{}","{plugin/core/gvrender_core_vml.c,plugin/visio/VisioText.cpp}","The current code base (608aab7b989cf33b48145e1c78abdd73f598fe44) has four implementations (that I have found so far) of XML string escaping:
* `xml_string` and friends in cmd/tools/gv2gxl.c
* `xml_string` and friends in cmd/smyrna/smyrna_utils.c
* `xml_string` and friends in lib/common/labels.c
* `html_string` and friends in plugin/core/gvrender_core_vml.c

The identical comments surrounding these implementations make it clear they were once copy-pasted from the same source. The lib/common one looks like the original and a comment in Smyrna even explains why this situation exists:

```c
/* many of these functions are available in libcommon.
 * We cannot use those because dependencies cause a great
 * deal of libcommon to be brought in, which complicates
 * and makes possible conflicts as some parts of libcommon
 * rely on not using libcgraph.
 */
```

As far as I'm aware, this situation no longer exists. libcgraph is the only graph library supported and there is no sensible way to use libcommon without libcgraph. However, a naive attempt to undo the Smyrna code duplication fails because:
1. A number of libcommon headers rely on something else being #included prior to them. lib/common/utils.h that contains the libcommon prototype for `xml_string` cannot be #included without other libcommon headers being #included prior to it.
2. A number of libcommon typedefs/prototypes conflict with other ones in Smyrna headers.

The situation is pretty messy and may require diagnosing and undoing the conflicting definitions one-by-one. But I think it's worth doing in service of paring back the number of XML string escaping variants we're maintaining to 1."
1713,"7.0.5","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1876,"2.49.1","{lib/fdpgen/fdp.h}","{lib/fdpgen/fdp.h}","This issue is spawned from point 3) of https://gitlab.com/graphviz/graphviz/-/issues/592#note_447723339.

## Steps to reproduce

`echo 'graph {a}' | fdp`

## Expected Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	a	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## Actual Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	""%3""	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## OS Version

Ubuntu 20.10.

## Graphviz Version

fdp - graphviz version 2.44.2~dev.20201115.0109 (20201115.0109)

## Additional info

Version 2.44.1 works as expected.

fdp, sfdp, neato & twopi has the same problem, while dot, circo, patchwork & osage works as expected."
1876,"2.47.0","{lib/fdpgen/fdp.h}","{lib/fdpgen/fdp.h}","This issue is spawned from point 3) of https://gitlab.com/graphviz/graphviz/-/issues/592#note_447723339.

## Steps to reproduce

`echo 'graph {a}' | fdp`

## Expected Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	a	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## Actual Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	""%3""	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## OS Version

Ubuntu 20.10.

## Graphviz Version

fdp - graphviz version 2.44.2~dev.20201115.0109 (20201115.0109)

## Additional info

Version 2.44.1 works as expected.

fdp, sfdp, neato & twopi has the same problem, while dot, circo, patchwork & osage works as expected."
1881,"8.0.2","{}","{lib/sfdpgen/uniform_stress.c}","I think we should eventually have at least one CI task that builds an ASan-instrumented version of Graphviz and runs the test suite with this. I had a brief attempt at this, but the toolchains we're using in CI do not seem to have ASan support (maybe we need to install something beyond build-essential?). Even if we can get the build working, I think an ASan instrumented Graphviz currently fails the test suite because of some memory leaks. So we should probably initially run it with leak detection disabled (`ASAN_OPTIONS=detect_leaks=0`) and then ratchet this on once leaks have been fixed."
2204,"5.0.1","{}","{cmd/lefty/os/unix/io.c}","MSVC reports the compilation warning:

```
  utils.c
C:\GitLab-Runner\builds\graphviz\graphviz\lib\common\utils.c(361,13): warning C4013: 'access' undefined; assuming extern returning int [C:\GitLab-Runner\builds\graphviz\graphviz\build\lib\common\common_obj.vcxproj]
```

Backtracking what is going on here, it seems most uses of unistd.h functions in the code base have something like the following stanza:

```c
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#else
#include <ast/compat_unistd.h>
#endif
```

This is not present in lib/common code because lib/common does not depend on lib/ast. Instead it just does nothing (yolo) if `HAVE_UNISTD_H` prevents the inclusion of unistd.h.

So two relevant things to note:
1. unistd.h “shimming” like this is still an ongoing concern, AFAIK. Windows remains a hold out, that refuses to ship unistd.h.
2. lib/ast, (that I've heard variously referred to as “Abstract Software Toolkit” or “Advanced Software Technology” or “AT&T Software Technology”) is not the base of the dependency tree.

Should we move the unistd.h abstraction to cgraph or somewhere else? Should we try to purge platform-specific usage of such functions? Should we just shim unistd.h in windows/include/config.h that's hard coded anyway?"
1740,"5.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
2102,"7.0.0","{lib/expr/exparse.h}","{lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1740,"4.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1940,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1835,"3.0.0","{cmd/mingle/minglemain.cpp,lib/mingle/ink.cpp,lib/mingle/agglomerative_bundling.cpp}","{cmd/mingle/minglemain.c}","The reason is that the [ANN](http://www.cs.umd.edu/~mount/ANN/) library is not installed in the Docker images for Ubuntu or Centos.

At least for Ubuntu 18.04 `libann-dev` is available for install with `apt`, but I haven't found any lib for Centos."
1950,"7.0.3","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
2057,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
2057,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
2180,"5.0.1","{}","{cmd/lneato/mswin32/lneato.c}","## Steps to reproduce

`lneato.exe -V; echo $?`

## Expected Behaviour

Version printed and exit status 0.

## Actual Behaviour

No output and exit status 127.

For Debug builds, this dialog pops up:

![Screenshot_2022-01-16_094837](/uploads/0c5722f43374224fdc949048129aefa4/Screenshot_2022-01-16_094837.png)

## OS Version

Windows 10.

## Graphviz Version

`dot - graphviz version 3.0.0~dev.20220115.2107 (20220115.2107)`

Build on a branch emanating from 0be189b22.

## Additional info

The text in the popup is probably related to this warning:

`C:\GitLab-Runner\builds\magjac\graphviz\cmd\lneato\mswin32\lneato.c(55,36): warning C4476: 'snprintf' : unknown type field character 'N' in format specifier [C:\GitLab-Runner\builds\magjac\graphviz\cmd\lneato\lneato.vcxproj]`

This problem persists after fixing #1934 with !2407.

Printf-debugging shows that the program terminates when [this statement](https://gitlab.com/graphviz/graphviz/-/blob/main/cmd/lneato/mswin32/lneato.c#L55-57) is executed:

```
        snprintf(cmd, sizeof(cmd), ""%s -e \""load('dotty.lefty');""
                 ""dotty.protogt.lserver='neato';dotty.simple('%Ns');\"""", path,
                 pCmdLine);
```"
1775,"2.49.2","{lib/common/utils.h}","{lib/common/utils.h}","Graphviz contains three implementations of the function `strcasecmp` and two implementations of the function `strncasecmp`. It looks like these were added as there was no cross-platform alternative at the time.

At the time of writing, every major platform I'm aware of implements `strcasecmp` and `strncasecmp` except Windows. Windows also has this functionality, but under the names `_stricmp` and `_strnicmp`.

I propose we remove these implementations and replace them with a small compatibility header that provides `strcasecmp` and `strncasecmp` on Windows by redirecting to the alternatives. I'm creating this issue to see what others' opinions are. Maybe it would be better to hold off until we move to C99 in December 2020? I don't believe this will make a difference because these two functions are not standardized in C99 but rather in POSIX 2001, but maybe someone has a different opinion."
1950,"7.0.2","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1785,"5.0.1","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,tclpkg/gv/gv_builtins.c,lib/ortho/partition.h,lib/circogen/blocktree.h,cmd/smyrna/gui/glcompui.c,lib/fdpgen/comp.h,lib/circogen/edgelist.c,lib/gvc/gvcontext.c}","{lib/circogen/circpos.h,lib/sfdpgen/sfdpinternal.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/neatogen/pca.h,lib/circogen/block.h,cmd/smyrna/gui/glcompui.c,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,cmd/dot/dot_builtins.c,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h,lib/circogen/edgelist.c,lib/gvc/gvcontext.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1740,"2.47.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1573,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1800,"2.46.0","{}","{dot.demo/neatopack.c,dot.demo/dot.c,dot.demo/example.c,dot.demo/simple.c}","## Steps to reproduce

1. Compile [dot.demo/neatopack.c](https://gitlab.com/graphviz/graphviz/-/blob/master/dot.demo/neatopack.c) to `a.exe`
1. Run `echo 'graph {a -- b}' | ./a.exe`

## Expected Behaviour

No error.

## Actual Behaviour

* `Segmentation fault (core dumped)` on Linux.
* `STATUS_ACCESS_VIOLATION` on Windows.

## OS Version

All supported OSs in our pipeline, but debug info below from `Ubuntu 18.04`.

## Graphviz Version

Home-built based on commit 4999fb8597c6f798763b8b8f0bf911eef11cf291.

`dot - graphviz version 2.44.2~dev.20200820.1251 (20200820.1251)`

## Additional info

This might not be a bug in Graphviz. It might be a bug in `neatopack.c` or in the way I'm using it.

GDB gives this backtrace:
```

magjac@t440:~/graphviz$ gdb -c core --args a.exe g.dot
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type ""show copying""
and ""show warranty"" for details.
This GDB was configured as ""x86_64-linux-gnu"".
Type ""show configuration"" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type ""help"".
Type ""apropos word"" to search for commands related to ""word""...
Reading symbols from a.exe...done.
[New LWP 18066]
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
Core was generated by `./a.exe'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
174	../sysdeps/x86_64/multiarch/../strcmp.S: No such file or directory.
(gdb) bt
#0  0x00007ff744aa1fea in __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
#1  0x00007ff744735051 in dttree (dt=0x5592f7cd3860, obj=0x7ffdd3771140, type=4) at dttree.c:143
#2  0x00007ff74500ed18 in refsymbind (strdict=0x5592f7cd3860, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:74
#3  0x00007ff74500ede9 in agstrdup (g=0x5592f7ccba90, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:102
#4  0x00007ff74500b94f in aginternalmapinsert (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", id=6) at imap.c:126
#5  0x00007ff74500b532 in agmapnametoid (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", result=0x7ffdd3771288, createflag=0) at id.c:105
#6  0x00007ff7450126a4 in agsubg (g=0x5592f7ccba90, name=0x7ffdd3773350 ""_cc_0"", cflag=1) at subg.c:57
#7  0x00007ff744d58a2e in ccomps (g=0x5592f7ccba90, ncc=0x7ffdd3773408, pfx=0x0) at ccomps.c:326
#8  0x00005592f703cbcf in main (argc=1, argv=0x7ffdd3773528) at /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:33
(gdb) 
```

ASan gives this:
```
ASAN:DEADLYSIGNAL
=================================================================
==19175==ERROR: AddressSanitizer: SEGV on unknown address 0x362e6f732e6c (pc 0x7fef93c124db bp 0x7ffd890ded70 sp 0x7ffd890ded30 T0)
==19175==The signal is caused by a READ memory access.
    #0 0x7fef93c124da in aggetrec /home/magjac/graphviz/lib/cgraph/rec.c:42
    #1 0x7fef93c1268e in agbindrec /home/magjac/graphviz/lib/cgraph/rec.c:95
    #2 0x7fef8b54da6a in neato_init_node /home/magjac/graphviz/lib/neatogen/neatoinit.c:46
    #3 0x7fef8b54dfaf in neato_init_node_edge /home/magjac/graphviz/lib/neatogen/neatoinit.c:125
    #4 0x7fef8b54f843 in neato_init_graph /home/magjac/graphviz/lib/neatogen/neatoinit.c:620
    #5 0x7fef8b551e06 in neato_layout /home/magjac/graphviz/lib/neatogen/neatoinit.c:1438
    #6 0x7fef93950bfe in gvLayoutJobs /home/magjac/graphviz/lib/gvc/gvlayout.c:85
    #7 0x7fef9395b2e2 in gvLayout /home/magjac/graphviz/lib/gvc/gvc.c:65
    #8 0x55ec144a6114 in main /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:38
    #9 0x7fef9355db96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #10 0x55ec144a5e59 in _start (/home/magjac/graphviz/a.exe+0xe59)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /home/magjac/graphviz/lib/cgraph/rec.c:42 in aggetrec
==19175==ABORTING
```

The problem can be seen for all OSs in [this pipeline](https://gitlab.com/magjac/graphviz/-/pipelines/180140052)

https://gitlab.com/graphviz/graphviz/-/merge_requests/1527 does not solve the problem as can be seen in [this pipeline].(https://gitlab.com/magjac/graphviz/-/pipelines/180166113)."
2229,"7.0.4","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","Migrating this from https://gitlab.com/graphviz/graphviz/-/merge_requests/2575#note_907097811:

> I implemented `itos` believing lifetime of an [rvalue](https://en.cppreference.com/w/c/language/value_category) like this to be the extent of the containing expression. However, your question made me delve in to try to find chapter and verse in the C standard to back this up. I realized I'm wrong and I was thinking of the equivalent scenario in C++ (which would involve what they term a [prvalue](https://en.cppreference.com/w/cpp/language/value_category#prvalue)). In C, the situation apparently differs between C99 and C11, for which there is a helpful example https://en.cppreference.com/w/c/language/lifetime.
>
> The tl;dr of this is that use of `itos` like this is unfortunately [undefined behavior](https://en.cppreference.com/w/c/language/behavior) in C99, the mode in which we compile Graphviz. We should probably look at removing `itos` and its uses, which is disappointing as I introduced it aiming to solve a number of `sprintf` problems."
1573,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1748,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1875,"8.0.1","{}","{plugin/core/gvrender_core_vml.c}","As noted by @smattr in https://gitlab.com/graphviz/graphviz/-/merge_requests/1663#note_447682225, a `return NULL` statement is missing at https://gitlab.com/graphviz/graphviz/-/blob/master/cmd/tools/mmio.c#L469.

The consequences of this is currently unknown."
1697,"2.49.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
45,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1785,"2.49.2","{cmd/gvmap/country_graph_coloring.h,lib/rbtree/misc.c,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/fdpgen/fdp.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/pca.h,lib/circogen/block.h,tclpkg/gv/gv_builtins.c,lib/ortho/partition.h,lib/fdpgen/comp.h}","{lib/spine/spine.c,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,cmd/smyrna/viewportcamera.h,lib/spine/spinehdr.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/fdpgen/fdp.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/spine/union_find.c,lib/neatogen/pca.h,lib/circogen/block.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/spine/subset.c,lib/fdpgen/comp.h,lib/spine/quad.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1868,"2.49.0","{lib/gvc/gvio.h}","{lib/gvc/gvio.h}","The current code base (608aab7b989cf33b48145e1c78abdd73f598fe44) has four implementations (that I have found so far) of XML string escaping:
* `xml_string` and friends in cmd/tools/gv2gxl.c
* `xml_string` and friends in cmd/smyrna/smyrna_utils.c
* `xml_string` and friends in lib/common/labels.c
* `html_string` and friends in plugin/core/gvrender_core_vml.c

The identical comments surrounding these implementations make it clear they were once copy-pasted from the same source. The lib/common one looks like the original and a comment in Smyrna even explains why this situation exists:

```c
/* many of these functions are available in libcommon.
 * We cannot use those because dependencies cause a great
 * deal of libcommon to be brought in, which complicates
 * and makes possible conflicts as some parts of libcommon
 * rely on not using libcgraph.
 */
```

As far as I'm aware, this situation no longer exists. libcgraph is the only graph library supported and there is no sensible way to use libcommon without libcgraph. However, a naive attempt to undo the Smyrna code duplication fails because:
1. A number of libcommon headers rely on something else being #included prior to them. lib/common/utils.h that contains the libcommon prototype for `xml_string` cannot be #included without other libcommon headers being #included prior to it.
2. A number of libcommon typedefs/prototypes conflict with other ones in Smyrna headers.

The situation is pretty messy and may require diagnosing and undoing the conflicting definitions one-by-one. But I think it's worth doing in service of paring back the number of XML string escaping variants we're maintaining to 1."
1852,"2.46.0","{}","{windows/getopt/getopt.h,windows/getopt/getopt.c}","
In https://gitlab.com/graphviz/graphviz/-/merge_requests/1592 and https://gitlab.com/graphviz/graphviz/-/merge_requests/1608 many tools were adapted to GNU getopt. See e.g. https://gitlab.com/graphviz/graphviz/-/merge_requests/1592/diffs?commit_id=2c6420be0dfc252b7db4207accf40af2170c50e8 or https://gitlab.com/graphviz/graphviz/-/merge_requests/1608/diffs?commit_id=81852ca7b3eea614752c8d38230562a9027efe89.

macOS however, does not use GNU getopt, but BSD getopt where the `optopt` variable behaves slightly differently and the code prior the the changes mentioned above is the correct one. Therefore, the code needs to be different depending on which OS it it running on.

The tools that are currently failing the tools test on macOS are:
* bcomps
* ccomps
* cluster
* dijkstra
* edgepaint
* gc
* gvcolor
* gvmap
* gvpack
* mm2gv
* nop
* sccmap
* tred

All of them may not have been working on macOS before, but at least some of them did.

This problem should be fixed before the next stable release.

## Steps to reproduce

E.g. `bcomps -?`

## Expected Behaviour

Show usage and exit status zero.

## Actual Behaviour

Output:
```
bcomps: option -? unrecognized
Usage: bcomps [-stvx?] [-o<out template>] <files>
  -o - output file template
  -s - don't print components
  -t - emit block-cutpoint tree
  -v - verbose
  -x - external
  -? - print usage
If no files are specified, stdin is used
```
Exit status 1.

## OS Version

macOS Catalina Version 10.15.7

## Graphviz Version

dot - graphviz version 2.44.2~dev.20201016.1439 (20201016.1439)

Home-built from aa165722db3b556213622727d45bb08d95d3bac7."
1798,"7.1.0","{lib/neatogen/overlap.h,lib/circogen/blockpath.h,lib/common/usershape.h,lib/sfdpgen/sfdp.h,lib/dotgen/position.c,lib/neatogen/call_tri.h}","{lib/neatogen/overlap.h,lib/circogen/blockpath.h,lib/common/usershape.h,lib/sfdpgen/sfdp.h,lib/dotgen/position.c,lib/neatogen/call_tri.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1242,"2.50.0","{plugin/poppler/gvloadimage_poppler.c,lib/neatogen/overlap.h,lib/common/textspan.c,plugin/core/gvrender_core_map.c,lib/fdpgen/fdp.h,lib/dotgen/dot.h}","{plugin/poppler/gvloadimage_poppler.c,lib/neatogen/overlap.h,cmd/tools/tred2.c,lib/common/textspan.c,plugin/core/gvrender_core_map.c,lib/fdpgen/fdp.h,lib/dotgen/dot.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1713,"2.49.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1950,"6.0.2","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1791,"2.46.0","{}","{windows/include/builddate.h}","## Steps to reproduce

Look in [this Windows CMake CI build log](https://gitlab.com/magjac/graphviz/-/jobs/678123414).

## Expected Behaviour

CPack should produce a file whose name contains the current VERSION, i.e. I expect to find a log entry saying:

`CPack: - package: C:/GitLab-Runner/builds/magjac/graphviz/build/Graphviz-2.44.2~dev.20200810.0719-win64.exe generated.`

## Actual Behaviour

The version part of the filename is 0.1.1:

`CPack: - package: C:/GitLab-Runner/builds/magjac/graphviz/build/Graphviz-0.1.1-win64.exe generated.`

## OS Version

Windows 10.

## Graphviz Version

* Expected: 2.44.2~dev.20200810.0719
* Actual: 0.0.1

## Additional info

If installing using e.g. https://www2.graphviz.org/Packages/development/windows/10/cmake/Release/x64/graphviz-install--win64.exe, Graphviz is installed under /c/Program Files/Graphviz 0.1.1, but the built-in version is still correct:
```
$ which dot
/c/Program Files/Graphviz 0.1.1/bin/dot

magja@DESKTOP-GSDBC95 MINGW64 ~
$ dot -V

dot - graphviz version 2.44.2~dev.20200811.0113 (20200811.0113)
```

This bug was introduced in https://gitlab.com/graphviz/graphviz/-/merge_requests/1476/diffs?commit_id=51a96c5e182f509eef2e7fe2c550109816c4bed9.

It turns out that the version used by CPack comes from `GRAPHVIZ_VERSION_MAJOR`, `GRAPHVIZ_VERSION_MINOR` & `GRAPHVIZ_VERSION_PATCH`. This can be seen [here](https://gitlab.com/magjac/graphviz/-/blob/master/cmake/package_info.cmake#L2). These variables were incorrectly removed by this commit."
1820,"5.0.1","{}","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c,cmd/lefty/lefty.c}","The version of `getopt` in [windows/getopt](https://gitlab.com/graphviz/graphviz/-/tree/master/windows/getopt) is outdated. It's incompatible with the version that the Linux autotools builds use. The fix for https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 in commit https://gitlab.com/graphviz/graphviz/-/merge_requests/1561/diffs?commit_id=997e12cf45ddfb44d1019c05f05bf12b53bd7322 shows this incompatibility.

Also, this outdated version is used by the CMake builds, regardless of which operating system you're on. I discovered this the hard way by an accidental (details provided on a need-to-know basis :flushed: ) removal of `windows/getopt` in [this Ubuntu CMake job](https://gitlab.com/magjac/graphviz/-/jobs/729861596).

My plan right now is to:

1. Remove `windows/getopt`
1. Add `getopt` using `vcpkg` to the [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) submodule
1. Adapt the CMake builds to:
    1. Use the vcpkg version on Windows
    1. Use the native/Docker image version on Linux and hope that this also works on macOS
1. Adapt the MSBuild builds to use the vcpkg version

The current libraries in [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) has unclear origins, but I read in [this issue](https://github.com/ellson/MOTHBALLED-graphviz/issues/1218#issuecomment-323947968) that many probably comes from https://windows.php.net/downloads/.

My plan is to add a new `vcpkg` top level directory to [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) so that libraries can be installed there directly without the need to figure out which file to put where in the old structure. In future, we can replace other outdated packages in the old structure with new ones installed with `vcpkg`.

**I would very much like to hear your comments on this and the above.**

As a reference, these are the `getopt` files that are installed with vcpkg:

```
~/vcpkg/vcpkg-export-20200910-082739$ find . -type f
./.vcpkg-root
./installed/vcpkg/info/getopt-win32_0.1_x86-windows.list
./installed/vcpkg/info/getopt_0_x86-windows.list
./installed/x86-windows/bin/getopt.dll
./installed/x86-windows/bin/getopt.pdb
./installed/x86-windows/debug/bin/getopt.dll
./installed/x86-windows/debug/bin/getopt.pdb
./installed/x86-windows/debug/lib/getopt.lib
./installed/x86-windows/include/getopt.h
./installed/x86-windows/lib/getopt.lib
./installed/x86-windows/share/getopt/vcpkg_abi_info.txt
./installed/x86-windows/share/getopt-win32/copyright
./installed/x86-windows/share/getopt-win32/vcpkg_abi_info.txt
./scripts/buildsystems/msbuild/applocal.ps1
./scripts/buildsystems/msbuild/vcpkg-general.xml
./scripts/buildsystems/msbuild/vcpkg.props
./scripts/buildsystems/msbuild/vcpkg.targets
./scripts/buildsystems/vcpkg.cmake
./scripts/cmake/vcpkg_get_windows_sdk.cmake
```"
2178,"2.47.2","{lib/cgraph/sprint.h,lib/cgraph/sprint.c,lib/cgraph/test_sprint.c}","{}","## Steps to reproduce

Run the CI tests on a computer with high load.

## Expected Behaviour

No errors.

## Actual Behaviour

I've seen a few different flavors:
* `AssertionError: osage -? did not show usage. Output was:`
* `Failed: Malformed version string:`
* `AssertionError: patchwork -? did not show usage. Output was:`
* `AssertionError: assert 'Warning: Illegal value might for ALIGN - ignored' in ''`
* `AssertionError: neato -? did not show usage. Output was:`

## OS Version

Windows 10 with MinGW 3.2.0-340.x86_64

## Graphviz Version

Various development versions including 3.0.0~dev.20220111.0459 and 2.50.1~dev.20220109.1142.

## Additional info

This problems are themselves not new. These tests were added in https://gitlab.com/graphviz/graphviz/-/merge_requests/2387 so we haven't been able to see them before that.

Links to failing jobs:

* https://gitlab.com/magjac/graphviz/-/jobs/1955416602
* https://gitlab.com/graphviz/graphviz/-/jobs/1958702924
* https://gitlab.com/graphviz/graphviz/-/jobs/1958233385
* https://gitlab.com/graphviz/graphviz/-/jobs/1958567111
* https://gitlab.com/magjac/graphviz/-/jobs/1959543455
* https://gitlab.com/graphviz/graphviz/-/jobs/1960812195"
1836,"7.0.3","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1242,"2.47.3","{lib/glcomp/glcompimage.c,plugin/core/gvrender_core_map.c,lib/glcomp/glcompimage.h,lib/fdpgen/fdp.h}","{lib/glcomp/glcompimage.c,plugin/core/gvrender_core_map.c,lib/glcomp/glcompimage.h,lib/fdpgen/fdp.h,lib/expr/exrewind.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1775,"8.0.1","{}","{plugin/core/gvrender_core_vml.c}","Graphviz contains three implementations of the function `strcasecmp` and two implementations of the function `strncasecmp`. It looks like these were added as there was no cross-platform alternative at the time.

At the time of writing, every major platform I'm aware of implements `strcasecmp` and `strncasecmp` except Windows. Windows also has this functionality, but under the names `_stricmp` and `_strnicmp`.

I propose we remove these implementations and replace them with a small compatibility header that provides `strcasecmp` and `strncasecmp` on Windows by redirecting to the alternatives. I'm creating this issue to see what others' opinions are. Maybe it would be better to hold off until we move to C99 in December 2020? I don't believe this will make a difference because these two functions are not standardized in C99 but rather in POSIX 2001, but maybe someone has a different opinion."
1843,"5.0.1","{}","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c,cmd/lefty/lefty.c}","## Steps to reproduce

E.g. `edgepaint -Q`

## Expected Behaviour

An error message and exit with non-zero status.

## Actual Behaviour

`option -Q unrecognized - ignored`

The edgepaint program still runs and waits for input from stdin. If some garbage is entered, it (correctly) prints an error message:

```
yada yada
Error: <stdin>: syntax error in line 1 near 'yada'
```
This was just to shown the program is still running.

## OS Version

All OSs, but this was tested on Ubuntu 18.04.

## Graphviz Version

dot - graphviz version 2.44.2~dev.20200928.0851 (20200928.0851)

Built from master at 3dd185241646d10149c86899f3a99beb51fce5d9 with local modifications.

## Additional info

Similar behavior is shown by:
* bcomps
* ccomps
* cluster
* edgepaint
* gc
* gvcolor
* gvmap
* gvmap.sh
* gvpack
* nop
* sccmap
* tred"
1798,"7.0.4","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/glcomp/glcomptexture.h,lib/neatogen/call_tri.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,cmd/smyrna/glexpose.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,lib/edgepaint/lab_gamut.h,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/glcomp/glcomptexture.h,lib/neatogen/call_tri.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,cmd/smyrna/glexpose.h,lib/neatogen/overlap.c,lib/neatogen/pca.h,lib/circogen/block.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,lib/edgepaint/lab_gamut.h,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1800,"7.0.4","{lib/common/boxes.h}","{}","## Steps to reproduce

1. Compile [dot.demo/neatopack.c](https://gitlab.com/graphviz/graphviz/-/blob/master/dot.demo/neatopack.c) to `a.exe`
1. Run `echo 'graph {a -- b}' | ./a.exe`

## Expected Behaviour

No error.

## Actual Behaviour

* `Segmentation fault (core dumped)` on Linux.
* `STATUS_ACCESS_VIOLATION` on Windows.

## OS Version

All supported OSs in our pipeline, but debug info below from `Ubuntu 18.04`.

## Graphviz Version

Home-built based on commit 4999fb8597c6f798763b8b8f0bf911eef11cf291.

`dot - graphviz version 2.44.2~dev.20200820.1251 (20200820.1251)`

## Additional info

This might not be a bug in Graphviz. It might be a bug in `neatopack.c` or in the way I'm using it.

GDB gives this backtrace:
```

magjac@t440:~/graphviz$ gdb -c core --args a.exe g.dot
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type ""show copying""
and ""show warranty"" for details.
This GDB was configured as ""x86_64-linux-gnu"".
Type ""show configuration"" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type ""help"".
Type ""apropos word"" to search for commands related to ""word""...
Reading symbols from a.exe...done.
[New LWP 18066]
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
Core was generated by `./a.exe'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
174	../sysdeps/x86_64/multiarch/../strcmp.S: No such file or directory.
(gdb) bt
#0  0x00007ff744aa1fea in __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
#1  0x00007ff744735051 in dttree (dt=0x5592f7cd3860, obj=0x7ffdd3771140, type=4) at dttree.c:143
#2  0x00007ff74500ed18 in refsymbind (strdict=0x5592f7cd3860, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:74
#3  0x00007ff74500ede9 in agstrdup (g=0x5592f7ccba90, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:102
#4  0x00007ff74500b94f in aginternalmapinsert (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", id=6) at imap.c:126
#5  0x00007ff74500b532 in agmapnametoid (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", result=0x7ffdd3771288, createflag=0) at id.c:105
#6  0x00007ff7450126a4 in agsubg (g=0x5592f7ccba90, name=0x7ffdd3773350 ""_cc_0"", cflag=1) at subg.c:57
#7  0x00007ff744d58a2e in ccomps (g=0x5592f7ccba90, ncc=0x7ffdd3773408, pfx=0x0) at ccomps.c:326
#8  0x00005592f703cbcf in main (argc=1, argv=0x7ffdd3773528) at /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:33
(gdb) 
```

ASan gives this:
```
ASAN:DEADLYSIGNAL
=================================================================
==19175==ERROR: AddressSanitizer: SEGV on unknown address 0x362e6f732e6c (pc 0x7fef93c124db bp 0x7ffd890ded70 sp 0x7ffd890ded30 T0)
==19175==The signal is caused by a READ memory access.
    #0 0x7fef93c124da in aggetrec /home/magjac/graphviz/lib/cgraph/rec.c:42
    #1 0x7fef93c1268e in agbindrec /home/magjac/graphviz/lib/cgraph/rec.c:95
    #2 0x7fef8b54da6a in neato_init_node /home/magjac/graphviz/lib/neatogen/neatoinit.c:46
    #3 0x7fef8b54dfaf in neato_init_node_edge /home/magjac/graphviz/lib/neatogen/neatoinit.c:125
    #4 0x7fef8b54f843 in neato_init_graph /home/magjac/graphviz/lib/neatogen/neatoinit.c:620
    #5 0x7fef8b551e06 in neato_layout /home/magjac/graphviz/lib/neatogen/neatoinit.c:1438
    #6 0x7fef93950bfe in gvLayoutJobs /home/magjac/graphviz/lib/gvc/gvlayout.c:85
    #7 0x7fef9395b2e2 in gvLayout /home/magjac/graphviz/lib/gvc/gvc.c:65
    #8 0x55ec144a6114 in main /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:38
    #9 0x7fef9355db96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #10 0x55ec144a5e59 in _start (/home/magjac/graphviz/a.exe+0xe59)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /home/magjac/graphviz/lib/cgraph/rec.c:42 in aggetrec
==19175==ABORTING
```

The problem can be seen for all OSs in [this pipeline](https://gitlab.com/magjac/graphviz/-/pipelines/180140052)

https://gitlab.com/graphviz/graphviz/-/merge_requests/1527 does not solve the problem as can be seen in [this pipeline].(https://gitlab.com/magjac/graphviz/-/pipelines/180166113)."
1753,"7.0.4","{lib/circogen/block.c,lib/neatogen/overlap.c}","{lib/circogen/block.c,lib/neatogen/overlap.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
1742,"2.49.0","{lib/rbtree/misc.c}","{lib/rbtree/misc.c}","lib/rbtree uses `setjmp`/`longjmp` to implement exception-style handling of allocation failures. Of the three call sites of `setjmp`, two return immediately. The remaining one in `RBTreeCreate` looks like this (lib/rbtree/red_black_tree.c:38-47):

```c
38   rb_red_blk_tree* newTree = NULL;
39   rb_red_blk_node* temp;
40
41   if (setjmp(rb_jbuf)) {
42     if (newTree) {
43       if (newTree->nil) free (newTree->nil);
44       free (newTree);
45     }
46     return NULL;
47   }
```

As far back as C89, the standard has the following wording:

> All accessible objects have values as of the time `longjmp` was called, except that the values of objects of automatic storage duration that are local to the function containing the invocation of the corresponding `setjmp` macro that do not have volatile-qualified type and have been changed between the `setjmp` invocation and `longjmp` call are indeterminate.

I have noticed recent versions of GCC (~9 onwards) taking advantage of this clause. I would not be surprised if an optimizing compilation removes the calls to `free` in this block, or even removes the `setjmp` entirely by reasoning backwards that no matching `longjmp` can occur because it would lead to indeterminate reads. Older GCC should warn about this with `-Wclobbered` and newer GCC with `-Wmaybe-unitialized`. I think we should proactively refactor this before someone files a cryptic issue stemming from a corrupted `longjmp`.

We could address this by marking `newTree` `volatile`. However the use of this mechanism is limited enough that I think we should just refactor rbtree to use conventional return codes instead of exception-style."
2195,"3.0.0","{lib/common/logic.h}","{lib/common/logic.h}","While reviewing !2450, I recalled the Graphviz tree has various `NOTUSED` macros:

```c
#define NOTUSED(x)    (void) (x)
```

This is wrapping the common idiom for squashing warnings for unused parameters. However, it is used inconsistently in the code base. Thus Graphviz developers still need to know and recognize this idiom when they see it.

Should we remove these macros and write `(void)x;` wherever we are ignoring `x`? My thinking is that only two end states make sense: (1) `NOTUSED` used everywhere, or (2) `NOTUSED` used nowhere and removed. Which should we move towards?

CC @magjac, @makelinux

----

Some elaborating discussion for completeness...

There is a GCC extension for squashing such warnings:

```c
void foo(int x __attribute__((unused))) {
}
```

This GNU attribute is also supported by Clang. In C++, there is a much nicer portable way of expressing this by omitting the parameter name:

```cpp
void foo(int) {
}
```

There has been some discussion over the years of bringing attribute syntax to ISO C. C++11 introduced `[[...]]` syntax for attributes and I have some hope this will come to a future version of ISO C. However I am not aware of any plans for this right now.

So a void cast is the most portable way I'm currently aware of for suppressing such warnings in C."
1798,"2.47.2","{lib/common/htmllex.h,lib/ast/sfstr.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/gvc/gvio.h,lib/edgepaint/lab_gamut.c,lib/ortho/ortho.h,lib/ortho/partition.h,lib/edgepaint/intersection.h}","{lib/inkpot/inkpot_value.h,lib/expr/exlexname.c,lib/inkpot/inkpot_scheme.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/gvc/gvio.h,cmd/smyrna/md5.h,lib/ast/pathbin.c,lib/inkpot/inkpot_scheme.c,lib/edgepaint/intersection.h,lib/inkpot/inkpot_xlate.c,lib/ast/sfstr.h,lib/common/htmllex.h,lib/inkpot/inkpot.h,lib/edgepaint/lab_gamut.c,lib/inkpot/inkpot.c,lib/inkpot/inkpot_xlate.h,lib/ortho/ortho.h,lib/ortho/partition.h,cmd/smyrna/md5.c,lib/inkpot/inkpot_value.c}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
2058,"7.0.3","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
2178,"4.0.0","{}","{lib/cgraph/sprint.h,lib/cgraph/sprint.c,plugin/glitz/gvdevice_glitz.c,cmd/tools/gvpack.c,lib/cgraph/test_sprint.c}","## Steps to reproduce

Run the CI tests on a computer with high load.

## Expected Behaviour

No errors.

## Actual Behaviour

I've seen a few different flavors:
* `AssertionError: osage -? did not show usage. Output was:`
* `Failed: Malformed version string:`
* `AssertionError: patchwork -? did not show usage. Output was:`
* `AssertionError: assert 'Warning: Illegal value might for ALIGN - ignored' in ''`
* `AssertionError: neato -? did not show usage. Output was:`

## OS Version

Windows 10 with MinGW 3.2.0-340.x86_64

## Graphviz Version

Various development versions including 3.0.0~dev.20220111.0459 and 2.50.1~dev.20220109.1142.

## Additional info

This problems are themselves not new. These tests were added in https://gitlab.com/graphviz/graphviz/-/merge_requests/2387 so we haven't been able to see them before that.

Links to failing jobs:

* https://gitlab.com/magjac/graphviz/-/jobs/1955416602
* https://gitlab.com/graphviz/graphviz/-/jobs/1958702924
* https://gitlab.com/graphviz/graphviz/-/jobs/1958233385
* https://gitlab.com/graphviz/graphviz/-/jobs/1958567111
* https://gitlab.com/magjac/graphviz/-/jobs/1959543455
* https://gitlab.com/graphviz/graphviz/-/jobs/1960812195"
45,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
2153,"3.0.0","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c}","{}","## Steps to reproduce

./configure ...
make
make install ...

## Expected Behaviour

Now that lefty is disabled by default, lefty should not be compiled and none of its associated files shoule be installed.

## Actual Behaviour

During ./configure:
```
  lefty:         
```
After installation, as compared to my 2.46.0 that had lefty enabled, I now have
* bin/lefty -- not installed
* share/graphviz/lefty/ -- fewer files but still some
* pdf/leftyfguide.pdf -- still installed
* share/man/man1/lefty.1 -- still installed

## OS Version

OS X 10.13

## Graphviz Version

2.49.3

## Additional info

It looks like cmd/lefty/Makefile.am does an incomplete job of wrapping its pieces with ```WITH_LEFTY```. Would it be easier to apply that control to a ```SUBDIRS+=lefty``` in cmd/Makefile.am rather than within the deeper levels?

The leftyguide comes from doc/Makefile.am, where there is no ```WITH_LEFTY``` control."
1713,"5.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1457,"2.49.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1713,"4.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
205,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
19,"7.0.3","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
2101,"2.49.0","{lib/gvpr/gdefs.h}","{windows/cmd/gvpr/gdefs.h,windows/include/gvpr/gdefs.h}","## Steps to reproduce

I updated graphviz (first time since 6 months).  
gvpr was added to build in between, and there the CMakeLists.txt in lib/gvpr 
```
# Generate gdefs.h from sources
if (WIN32)
    set (MKDEFS_EXECUTABLE ""${CMAKE_CFG_INTDIR}/mkdefs"")
else()
    set (MKDEFS_EXECUTABLE ""./mkdefs"")
endif()
add_custom_command(
    OUTPUT gdefs.h
    MAIN_DEPENDENCY gprdata
    DEPENDS mkdefs
    COMMAND ${MKDEFS_EXECUTABLE} gdefs.h < ${TOP_SOURCE_DIR}/lib/gvpr/gprdata
)
```

this creates during cmake a script called: `Script-119F8DF11A775838BE6D69EF.sh`

```
#!/bin/sh
set -e
if test ""$CONFIGURATION"" = ""Debug""; then :
  cd /Users/klauskneupner/xcode/graphviz/_build/lib/gvpr
  ./mkdefs gdefs.h < /Users/klauskneupner/xcode/graphviz/lib/gvpr/gprdata
fi
if test ""$CONFIGURATION"" = ""Release""; then :
  cd /Users/klauskneupner/xcode/graphviz/_build/lib/gvpr
  ./mkdefs gdefs.h < /Users/klauskneupner/xcode/graphviz/lib/gvpr/gprdata
fi
if test ""$CONFIGURATION"" = ""MinSizeRel""; then :
  cd /Users/klauskneupner/xcode/graphviz/_build/lib/gvpr
  ./mkdefs gdefs.h < /Users/klauskneupner/xcode/graphviz/lib/gvpr/gprdata
fi
if test ""$CONFIGURATION"" = ""RelWithDebInfo""; then :
  cd /Users/klauskneupner/xcode/graphviz/_build/lib/gvpr
  ./mkdefs gdefs.h < /Users/klauskneupner/xcode/graphviz/lib/gvpr/gprdata
fi
```

the mkdefs file is located like this:
![directory structure](/uploads/80bdb5c001767c01d3459c7e06c2c8cf/Untitled_7.png)

Run a cmake on macOS but it doesn't build.

## Expected Behaviour

No problems during build.

## Actual Behaviour

```
PhaseScriptExecution Generate\ lib/gvpr/gdefs.h /Users/userName/xcode/graphviz/_build/lib/gvpr/Graphviz.build/Release/gvpr.build/Script-119F8DF11A775838BE6D69EF.sh (in target 'gvpr' from project 'Graphviz')
    cd /Users/userName/xcode/graphviz
    /bin/sh -c /Users/userName/xcode/graphviz/_build/lib/gvpr/Graphviz.build/Release/gvpr.build/Script-119F8DF11A775838BE6D69EF.sh
/Users/userName/xcode/graphviz/_build/lib/gvpr/Graphviz.build/Release/gvpr.build/Script-119F8DF11A775838BE6D69EF.sh: line 9: ./mkdefs: No such file or directory
Command PhaseScriptExecution failed with a nonzero exit code

** BUILD FAILED **


The following build commands failed:
	PhaseScriptExecution Generate\ lib/gvpr/gdefs.h /Users/userName/xcode/graphviz/_build/lib/gvpr/Graphviz.build/Release/gvpr.build/Script-119F8DF11A775838BE6D69EF.sh
```

no real surprise, `mkdefs` is not in current directory, but in a subdirectory, named after the configuration (debug or release).  

## OS Version

macOS 11.4

## Graphviz Version

updated 9th July from main directory. 

## Additional info

Fill in with anything else that might be important."
2058,"2.49.2","{lib/ortho/ortho.h,lib/common/utils.h,lib/gvc++/GVRenderData.cpp}","{lib/ortho/ortho.h,lib/common/utils.h,lib/gvc++/GVRenderData.cpp}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
2160,"8.0.1","{}","{lib/expr/exgram.h}","`plugin/ming/gvrender_ming.c` outputs Shockwave Flash files, using the `ming` library: http://www.libming.org/.

This format's pretty dead, with Adobe giving up support: https://www.adobe.com/au/products/flashplayer/end-of-life.html

And the output format isn't documented on https://graphviz.org/docs/outputs/.

I propose we remove this code; perhaps through a deprecation period (maybe flagging it off in a release? then removing it next release?)"
205,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
1785,"7.1.0","{lib/neatogen/overlap.h,lib/circogen/blockpath.h,lib/dotgen/position.c}","{lib/neatogen/overlap.h,lib/circogen/blockpath.h,lib/dotgen/position.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
2096,"4.0.0","{lib/ortho/ortho.h}","{lib/ortho/ortho.h}","## Steps to reproduce

Build Graphviz using CMake with AddressSanitizer enabled.

Run e.g. the test case in https://gitlab.com/magjac/graphviz/-/blob/add-cpp-test-suite/tests/test_simple.cpp

## Expected Behaviour

No error.

## Actual Behaviour

```
==204644==ERROR: AddressSanitizer: odr-violation (0x7fccf296eca0):
  [1] size=4 'odb_flags' ../lib/ortho/ortho.c:44:5
  [2] size=4 'odb_flags' ../lib/ortho/ortho.c:44:5
These globals were registered at these points:
  [1]:
    #0 0x7fccf2b13938 in __asan_register_globals ../../../../src/libsanitizer/asan/asan_globals.cpp:341
    #1 0x7fccf25db597 in _sub_I_00099_1 (/home/magjac/graphviz/build/plugin/dot_layout/libgvplugin_dot_layout.so.6+0x3b0597)
    #2 0x7fccf34dc96d  (/lib64/ld-linux-x86-64.so.2+0x1196d)

  [2]:
    #0 0x7fccf2b13938 in __asan_register_globals ../../../../src/libsanitizer/asan/asan_globals.cpp:341
    #1 0x7fccf1c8d999 in _sub_I_00099_1 (/home/magjac/graphviz/build/plugin/neato_layout/libgvplugin_neato_layout.so.6+0x5a8999)
    #2 0x7fccf34dc96d  (/lib64/ld-linux-x86-64.so.2+0x1196d)

==204644==HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_odr_violation=0
SUMMARY: AddressSanitizer: odr-violation: global 'odb_flags' at ../lib/ortho/ortho.c:44:5
==204644==ABORTING
```

## OS Version

Ubuntu 21.04.

## Graphviz Version

dot - graphviz version 2.47.4~dev.20210706.0621 (20210706.0621)

## Additional info

The reason for this problem is that the `lib/ortho` object files are not included in the `gvc` library when built with CMake, which has the effect that they end up both in libgvplugin_dot_layout.so and in libgvplugin_neato_layout.so which causes the ASan ODR violation.

When built with autotools, the `gvc` library correctly contains those object files and the problem does not arise."
1457,"7.0.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
2096,"5.0.0","{lib/ortho/ortho.h}","{lib/ortho/ortho.h}","## Steps to reproduce

Build Graphviz using CMake with AddressSanitizer enabled.

Run e.g. the test case in https://gitlab.com/magjac/graphviz/-/blob/add-cpp-test-suite/tests/test_simple.cpp

## Expected Behaviour

No error.

## Actual Behaviour

```
==204644==ERROR: AddressSanitizer: odr-violation (0x7fccf296eca0):
  [1] size=4 'odb_flags' ../lib/ortho/ortho.c:44:5
  [2] size=4 'odb_flags' ../lib/ortho/ortho.c:44:5
These globals were registered at these points:
  [1]:
    #0 0x7fccf2b13938 in __asan_register_globals ../../../../src/libsanitizer/asan/asan_globals.cpp:341
    #1 0x7fccf25db597 in _sub_I_00099_1 (/home/magjac/graphviz/build/plugin/dot_layout/libgvplugin_dot_layout.so.6+0x3b0597)
    #2 0x7fccf34dc96d  (/lib64/ld-linux-x86-64.so.2+0x1196d)

  [2]:
    #0 0x7fccf2b13938 in __asan_register_globals ../../../../src/libsanitizer/asan/asan_globals.cpp:341
    #1 0x7fccf1c8d999 in _sub_I_00099_1 (/home/magjac/graphviz/build/plugin/neato_layout/libgvplugin_neato_layout.so.6+0x5a8999)
    #2 0x7fccf34dc96d  (/lib64/ld-linux-x86-64.so.2+0x1196d)

==204644==HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_odr_violation=0
SUMMARY: AddressSanitizer: odr-violation: global 'odb_flags' at ../lib/ortho/ortho.c:44:5
==204644==ABORTING
```

## OS Version

Ubuntu 21.04.

## Graphviz Version

dot - graphviz version 2.47.4~dev.20210706.0621 (20210706.0621)

## Additional info

The reason for this problem is that the `lib/ortho` object files are not included in the `gvc` library when built with CMake, which has the effect that they end up both in libgvplugin_dot_layout.so and in libgvplugin_neato_layout.so which causes the ASan ODR violation.

When built with autotools, the `gvc` library correctly contains those object files and the problem does not arise."
1457,"6.0.2","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1422,"4.0.0","{}","{lib/sfio/sftmp.c}","graphviz-2.40.1/lib/sfio/features/sfio does benchmarking at compile time to decide which version of a function to use.

It does this for 3 functions: memchr memccpy mmap

This creates variations in build results across the openSUSE build workers that vary in type of system and parallel build load.
See https://reproducible-builds.org/ for why this matters.

Would be nice to have a cleaner way of disabling that than the attached patch
[reproducible.patch](/uploads/f172041f98f03b7f2eb2d3901524b3f8/reproducible.patch)"
1740,"7.0.5","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
19,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
1740,"5.0.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
2173,"6.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
2229,"5.0.1","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","Migrating this from https://gitlab.com/graphviz/graphviz/-/merge_requests/2575#note_907097811:

> I implemented `itos` believing lifetime of an [rvalue](https://en.cppreference.com/w/c/language/value_category) like this to be the extent of the containing expression. However, your question made me delve in to try to find chapter and verse in the C standard to back this up. I realized I'm wrong and I was thinking of the equivalent scenario in C++ (which would involve what they term a [prvalue](https://en.cppreference.com/w/cpp/language/value_category#prvalue)). In C, the situation apparently differs between C99 and C11, for which there is a helpful example https://en.cppreference.com/w/c/language/lifetime.
>
> The tl;dr of this is that use of `itos` like this is unfortunately [undefined behavior](https://en.cppreference.com/w/c/language/behavior) in C99, the mode in which we compile Graphviz. We should probably look at removing `itos` and its uses, which is disappointing as I introduced it aiming to solve a number of `sprintf` problems."
1242,"2.49.2","{cmd/gvmap/country_graph_coloring.h,lib/rbtree/misc.c,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/fdpgen/fdp.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/pca.h,lib/circogen/block.h,tclpkg/gv/gv_builtins.c,lib/ortho/partition.h,lib/fdpgen/comp.h}","{lib/spine/spine.c,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,cmd/smyrna/viewportcamera.h,lib/spine/spinehdr.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/fdpgen/fdp.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/spine/union_find.c,lib/neatogen/pca.h,lib/circogen/block.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/spine/subset.c,lib/fdpgen/comp.h,lib/spine/quad.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1785,"7.0.4","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/block.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
634,"2.49.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","Ported Issue from Mantis
Original ID: 1932
Reported By: Steve Dodier-Lazaro

SEVERITY: MINOR
Submitted: 2010-08-03 09:21:00

OS: _-_-

VERSION: 2.20.2
## DESCRIPTION

<br>

Hello,
<br>

I'm opening this bug because I noticed libgraph is using char\* pretty much everywhere in it's function signatures, even when const char\* (static strings) are expected.
<br>

This is completely transparent in C, but with a modern C++ compiler, it triggers compilation warnings about const char\* being given to the functions instead of char\* if using static strings.
<br>

Since the functions seem to expect static strings and do not seem to modify them, I think they should use const char\* instead.
<br>

Cordially,
SD.
"
1775,"2.50.0","{lib/common/textspan.c}","{lib/common/textspan.c}","Graphviz contains three implementations of the function `strcasecmp` and two implementations of the function `strncasecmp`. It looks like these were added as there was no cross-platform alternative at the time.

At the time of writing, every major platform I'm aware of implements `strcasecmp` and `strncasecmp` except Windows. Windows also has this functionality, but under the names `_stricmp` and `_strnicmp`.

I propose we remove these implementations and replace them with a small compatibility header that provides `strcasecmp` and `strncasecmp` on Windows by redirecting to the alternatives. I'm creating this issue to see what others' opinions are. Maybe it would be better to hold off until we move to C99 in December 2020? I don't believe this will make a difference because these two functions are not standardized in C99 but rather in POSIX 2001, but maybe someone has a different opinion."
1843,"2.49.2","{}","{lib/spine/spine.c}","## Steps to reproduce

E.g. `edgepaint -Q`

## Expected Behaviour

An error message and exit with non-zero status.

## Actual Behaviour

`option -Q unrecognized - ignored`

The edgepaint program still runs and waits for input from stdin. If some garbage is entered, it (correctly) prints an error message:

```
yada yada
Error: <stdin>: syntax error in line 1 near 'yada'
```
This was just to shown the program is still running.

## OS Version

All OSs, but this was tested on Ubuntu 18.04.

## Graphviz Version

dot - graphviz version 2.44.2~dev.20200928.0851 (20200928.0851)

Built from master at 3dd185241646d10149c86899f3a99beb51fce5d9 with local modifications.

## Additional info

Similar behavior is shown by:
* bcomps
* ccomps
* cluster
* edgepaint
* gc
* gvcolor
* gvmap
* gvmap.sh
* gvpack
* nop
* sccmap
* tred"
2058,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
45,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
2178,"2.49.2","{lib/common/xml.c}","{}","## Steps to reproduce

Run the CI tests on a computer with high load.

## Expected Behaviour

No errors.

## Actual Behaviour

I've seen a few different flavors:
* `AssertionError: osage -? did not show usage. Output was:`
* `Failed: Malformed version string:`
* `AssertionError: patchwork -? did not show usage. Output was:`
* `AssertionError: assert 'Warning: Illegal value might for ALIGN - ignored' in ''`
* `AssertionError: neato -? did not show usage. Output was:`

## OS Version

Windows 10 with MinGW 3.2.0-340.x86_64

## Graphviz Version

Various development versions including 3.0.0~dev.20220111.0459 and 2.50.1~dev.20220109.1142.

## Additional info

This problems are themselves not new. These tests were added in https://gitlab.com/graphviz/graphviz/-/merge_requests/2387 so we haven't been able to see them before that.

Links to failing jobs:

* https://gitlab.com/magjac/graphviz/-/jobs/1955416602
* https://gitlab.com/graphviz/graphviz/-/jobs/1958702924
* https://gitlab.com/graphviz/graphviz/-/jobs/1958233385
* https://gitlab.com/graphviz/graphviz/-/jobs/1958567111
* https://gitlab.com/magjac/graphviz/-/jobs/1959543455
* https://gitlab.com/graphviz/graphviz/-/jobs/1960812195"
1242,"2.49.3","{lib/circogen/block.c,cmd/gvmap/power.h,lib/circogen/block.h,lib/fdpgen/fdp.h,cmd/tools/convert.h}","{lib/circogen/block.c,cmd/gvmap/power.h,lib/circogen/block.h,lib/fdpgen/fdp.h,cmd/tools/convert.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1785,"7.0.5","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/sparse/IntStack.c,lib/glcomp/glcomptexture.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
634,"2.49.0","{lib/gvc++/GVContext.h,lib/gvc++/GVRenderData.h,lib/cgraph++/AGraph.h,lib/gvc++/GVContext.cpp,lib/gvc++/GVLayout.h,lib/cgraph++/AGraph.cpp,lib/gvc++/GVLayout.cpp,lib/gvc++/GVRenderData.cpp}","{}","Ported Issue from Mantis
Original ID: 1932
Reported By: Steve Dodier-Lazaro

SEVERITY: MINOR
Submitted: 2010-08-03 09:21:00

OS: _-_-

VERSION: 2.20.2
## DESCRIPTION

<br>

Hello,
<br>

I'm opening this bug because I noticed libgraph is using char\* pretty much everywhere in it's function signatures, even when const char\* (static strings) are expected.
<br>

This is completely transparent in C, but with a modern C++ compiler, it triggers compilation warnings about const char\* being given to the functions instead of char\* if using static strings.
<br>

Since the functions seem to expect static strings and do not seem to modify them, I think they should use const char\* instead.
<br>

Cordially,
SD.
"
1521,"2.47.2","{lib/ast/sfstr.h}","{lib/ast/sfstr.h}","For various reasons, my compiler always performs optimisations, even without -O.

iffe's ""lib"" check is written in such a way that it gets optimised away entirely, thus causing all such checks to succeed, even when the function is actually not available.

Simply removing the ""static"" keyword from the global `i` variable works."
2102,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
2173,"7.0.3","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
2131,"2.50.0","{lib/common/xml.c}","{lib/common/xml.c}","This is quite strange, but the CMake build system contains the following:

```
# Aliases to the gml2gv executable (not including '.exe' suffix)
list(APPEND gml2gv_aliases gv2gml)
```

This seems to have the effect of the installed `gv2gml` being a copy of `gml2gv`. I say this is ""quite strange"" because neither the Autotools nor the MSBuild build systems consider these programs to be aliases. Even the main source files for these two programs, gv2gml.c and gml2gv.c, are distinct files."
1775,"2.47.2","{}","{lib/inkpot/data/xcolors.c}","Graphviz contains three implementations of the function `strcasecmp` and two implementations of the function `strncasecmp`. It looks like these were added as there was no cross-platform alternative at the time.

At the time of writing, every major platform I'm aware of implements `strcasecmp` and `strncasecmp` except Windows. Windows also has this functionality, but under the names `_stricmp` and `_strnicmp`.

I propose we remove these implementations and replace them with a small compatibility header that provides `strcasecmp` and `strncasecmp` on Windows by redirecting to the alternatives. I'm creating this issue to see what others' opinions are. Maybe it would be better to hold off until we move to C99 in December 2020? I don't believe this will make a difference because these two functions are not standardized in C99 but rather in POSIX 2001, but maybe someone has a different opinion."
2229,"5.0.0","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","Migrating this from https://gitlab.com/graphviz/graphviz/-/merge_requests/2575#note_907097811:

> I implemented `itos` believing lifetime of an [rvalue](https://en.cppreference.com/w/c/language/value_category) like this to be the extent of the containing expression. However, your question made me delve in to try to find chapter and verse in the C standard to back this up. I realized I'm wrong and I was thinking of the equivalent scenario in C++ (which would involve what they term a [prvalue](https://en.cppreference.com/w/cpp/language/value_category#prvalue)). In C, the situation apparently differs between C99 and C11, for which there is a helpful example https://en.cppreference.com/w/c/language/lifetime.
>
> The tl;dr of this is that use of `itos` like this is unfortunately [undefined behavior](https://en.cppreference.com/w/c/language/behavior) in C99, the mode in which we compile Graphviz. We should probably look at removing `itos` and its uses, which is disappointing as I introduced it aiming to solve a number of `sprintf` problems."
2229,"4.0.0","{lib/cgraph/itos.h}","{lib/cgraph/test_itos.c,lib/cgraph/itos.h}","Migrating this from https://gitlab.com/graphviz/graphviz/-/merge_requests/2575#note_907097811:

> I implemented `itos` believing lifetime of an [rvalue](https://en.cppreference.com/w/c/language/value_category) like this to be the extent of the containing expression. However, your question made me delve in to try to find chapter and verse in the C standard to back this up. I realized I'm wrong and I was thinking of the equivalent scenario in C++ (which would involve what they term a [prvalue](https://en.cppreference.com/w/cpp/language/value_category#prvalue)). In C, the situation apparently differs between C99 and C11, for which there is a helpful example https://en.cppreference.com/w/c/language/lifetime.
>
> The tl;dr of this is that use of `itos` like this is unfortunately [undefined behavior](https://en.cppreference.com/w/c/language/behavior) in C99, the mode in which we compile Graphviz. We should probably look at removing `itos` and its uses, which is disappointing as I introduced it aiming to solve a number of `sprintf` problems."
2179,"2.50.0","{lib/common/textspan_lut.c,lib/common/textspan.c,lib/common/textspan_lut.h,lib/common/xml.c}","{lib/common/textspan.c,lib/common/xml.c}","Recently, the GraphViz version I use on some builder for my project was updated, and many of my tests started failing because of some new warning occasionally emitted by `dot`.    The message is `Warning: no hard-coded metrics for 'Lato'`, where `Lato` is an installed TTF font I use.  But the strange part is that the message was not always emitted for all graphs using Lato.  After some investigation, it seems to be triggered by labels containing empty lines.

## Steps to reproduce

```
% cat foo.dot
digraph """" {
  0 -> 1 [fontname=""Lato"",label=<<br/>1>]
}
% dot -Tsvg foo.dot >/dev/null
Warning: no hard-coded metrics for 'Lato'.  Falling back to 'Times' metrics
% cat bar.dot
digraph """" {
  0 -> 1 [fontname=""Lato"",label=< <br/>1>]
}
% dot -Tsvg bar.dot >/dev/null
```

The difference between these two files is only the space in the label.  Adding the space removes the warning.

Also note that if I add `-v`, it appears the font `Lato` is resolved differently depending on whether the label starts with an empty line or not:

```
% dot -v -Tsvg foo.dot >/dev/null 2>foo.stderr
% dot -v -Tsvg bar.dot >/dev/null 2>bar.stderr
% diff foo.stderr bar.stderr 
26,27c26
< Warning: no hard-coded metrics for 'Lato'.  Falling back to 'Times' metrics
< fontname: ""Lato"" resolved to: [internal hard-coded]
---
> fontname: ""Lato"" resolved to: (PangoCairoFcFont) ""Lato, Regular"" /usr/share/fonts/TTF/Lato-Regular.ttf
```

## Expected Behaviour

I would expect no warning, and the font resolved to `Lato-Regular.ttf` in both cases.


## OS Version

This was discovered using `graphviz 2.50.0-2` on Arch Linux.

## Graphviz Version

```
% dot -v
dot - graphviz version 2.50.0 (0)
libdir = ""/usr/lib/graphviz""
Activated plugin library: libgvplugin_dot_layout.so.6
Using layout: dot:dot_layout
Activated plugin library: libgvplugin_core.so.6
Using render: dot:core
Using device: dot:dot:core
The plugin configuration file:
        /usr/lib/graphviz/config6
                was successfully loaded.
    render      :  cairo dot dot_json fig gd json json0 map mp pic pov ps svg tk visio vml vrml xdot xdot_json
    layout      :  circo dot fdp neato nop nop1 nop2 osage patchwork sfdp twopi
    textlayout  :  textlayout
    device      :  canon cmap cmapx cmapx_np dot dot_json eps fig gd gd2 gif gv imap imap_np ismap jpe jpeg jpg json json0 mp pdf pic plain plain-ext png pov ps ps2 svg svgz tk vdx vml vmlz vrml wbmp webp x11 xdot xdot1.2 xdot1.4 xdot_json xlib
    loadimage   :  (lib) eps gd gd2 gif jpe jpeg jpg png ps svg webp xbm
```"
1740,"7.0.4","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
2102,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1854,"7.0.1","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
1798,"2.49.2","{lib/glcomp/glcomptextpng.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,lib/fdpgen/fdp.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,cmd/lefty/cs2l/cs2l.h,cmd/smyrna/glexpose.h,lib/ortho/ortho.h,lib/neatogen/pca.h,lib/circogen/block.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,tclpkg/tkstubs/tkInt.h,lib/common/htmllex.h,lib/neatogen/closest.h,cmd/smyrna/hotkeymap.h,tclpkg/gv/gv_builtins.c,lib/ortho/partition.h,lib/common/utils.h,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h}","{lib/glcomp/glcomptextpng.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,lib/fdpgen/fdp.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,cmd/lefty/cs2l/cs2l.h,cmd/smyrna/glexpose.h,lib/ortho/ortho.h,lib/neatogen/pca.h,lib/circogen/block.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,tclpkg/tkstubs/tkInt.h,lib/common/htmllex.h,lib/neatogen/closest.h,cmd/smyrna/hotkeymap.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/common/utils.h,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1457,"7.0.3","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1457,"2.47.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1875,"3.0.0","{}","{lib/mingle/edge_bundling.c,lib/mingle/agglomerative_bundling.c,lib/mingle/ink.c}","As noted by @smattr in https://gitlab.com/graphviz/graphviz/-/merge_requests/1663#note_447682225, a `return NULL` statement is missing at https://gitlab.com/graphviz/graphviz/-/blob/master/cmd/tools/mmio.c#L469.

The consequences of this is currently unknown."
975,"2.46.0","{lib/vmalloc/vmbest.c}","{lib/vmalloc/vmstat.c,lib/vmalloc/vmtrace.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmdebug.c,lib/vmalloc/vmregion.c,lib/vmalloc/malloc.c,lib/vmalloc/vmset.c,lib/vmalloc/vmprofile.c,lib/vmalloc/vmsegment.c,lib/vmalloc/vmdisc.c,lib/vmalloc/vmwalk.c,lib/vmalloc/vmlast.c,lib/vmalloc/vmpool.c}","Ported Issue from Mantis
Original ID: 769
Reported By: Sami Farin

SEVERITY: MAJOR
Submitted: 2007-08-25 16:40:27

OS: X86-LINUX-FC8

VERSION: 2.14.1
## DESCRIPTION

<br>

Does not compile.
I have gcc-4.1.2-19 and glibc-2.6-4 on IA32 Fedora.
<CD>
make[3]: Entering directory `/usr/src/redhat/BUILD/graphviz-2.14.1/lib/vmalloc'
/bin/sh ../../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I../..  -I../../lib/ast -I../../lib/sfio   -O2 -g -march=i386 -mcpu=i686 -ffast-math -Wno-unknown-pragmas -Wstrict-prototypes -Wpointer-arith -Wall -ffast-math -c -o malloc.lo malloc.c
 gcc -DHAVE_CONFIG_H -I. -I../.. -I../../lib/ast -I../../lib/sfio -O2 -g -march=i386 -mcpu=i686 -ffast-math -Wno-unknown-pragmas -Wstrict-prototypes -Wpointer-arith -Wall -ffast-math -c malloc.c  -fPIC -DPIC -o .libs/malloc.o
malloc.c: In function 'mallopt':
malloc.c:368: warning: unused parameter 'cmd'
malloc.c:368: warning: unused parameter 'value'
malloc.c: At top level:
malloc.c:408: error: return type is an incomplete type
malloc.c: In function 'mstats':
malloc.c:410: error: storage size of 'ms' isn't known
malloc.c:421: warning: 'return' with a value, in function returning void
malloc.c:410: warning: unused variable 'ms'
make[3]: *** [malloc.lo] Error 1
make[3]: Leaving directory`/usr/src/redhat/BUILD/graphviz-2.14.1/lib/vmalloc'
make[2]: **\* [all-recursive] Error 1
make[2]: Leaving directory `/usr/src/redhat/BUILD/graphviz-2.14.1/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory`/usr/src/redhat/BUILD/graphviz-2.14.1'
make: **\* [all] Error 2
</CD>
## ADDITIONAL INFORMATION

Offending file at
http://safari.iki.fi/graphviz-malloc.i
"
2106,"2.49.0","{lib/vmalloc/vmalloc.c}","{}","## Steps to reproduce

Happens sporadically in CI.

## Expected Behaviour

`choco install` should succeed without any error.

## Actual Behaviour

```
Error retrieving packages from source 'https://chocolatey.org/api/v2/':
 The remote server returned an error: (403) Forbidden.
```

## OS Version

Windows, through GitLab's shared windows runners.

## Graphviz Version

e6c943d2115835abfdd6cd501caa8759e6442395

## Additional info

The problem persists for later CI runs on Windows.

Failing pipeline: https://gitlab.com/Biswa96/graphviz/-/pipelines/344367669.

More info about the root problem can be found in https://gitlab.com/graphviz/graphviz/-/merge_requests/2079#note_638109861.

/cc @smattr @markhnsn @Biswa96"
1950,"3.0.0","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c,lib/sparse/colorutil.h}","{lib/sparse/colorutil.h}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
2173,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h,plugin/visio/gvplugin_visio.c}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
1798,"2.50.0","{lib/circogen/circo.h,plugin/poppler/gvloadimage_poppler.c,lib/neatogen/overlap.h,lib/common/textspan.c,plugin/core/gvrender_core_map.c,cmd/smyrna/gui/frmobjectui.h,lib/sparse/colorutil.h,lib/edgepaint/intersection.h,lib/fdpgen/fdp.h,lib/dotgen/dot.h,lib/sfdpgen/sfdp.h}","{lib/circogen/circo.h,plugin/poppler/gvloadimage_poppler.c,lib/neatogen/overlap.h,cmd/tools/tred2.c,lib/common/textspan.c,plugin/core/gvrender_core_map.c,cmd/smyrna/gui/frmobjectui.h,lib/sparse/colorutil.h,lib/edgepaint/intersection.h,lib/fdpgen/fdp.h,lib/sfdpgen/sfdp.h,lib/dotgen/dot.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
19,"6.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
1823,"5.0.1","{}","{cmd/lefty/os/unix/io.c}","I don't have a good understanding of what lefty is trying to achieve, so please bear with me as I poorly explain this issue.

Lefty contains something like a syscall table in cmd/left/internal.c, `Ifuncs`. It looks like it's trying to implement some kind of platform abstraction akin to an OS personality. One of these syscalls is named ""openio"" which is implemented in `Iopenio`. If you follow through a few calls, you'll eventually arrive at `ptyopen` which initially caught my attention because it was mentioned in the following Coverity warnings on #1464:

```
Error: RESOURCE_LEAK (CWE-772): [#def39]
graphviz-2.40.1/cmd/lefty/os/unix/io.c:362: open_fn: Returning handle opened by ""dup"".
graphviz-2.40.1/cmd/lefty/os/unix/io.c:362: leaked_handle: Failing to save or close handle opened by ""dup(fd[1])"" leaks it.
#  360|           panic2 (POS, ""ptyopen"", ""cannot fork"");
#  361|       case 0:
#  362|->         close (fd[0]), close (0), dup (fd[1]);
#  363|           close (1), dup (fd[1]), close (fd[1]);
#  364|           execl (shell, shbname, ""-c"", cmd, NULL);

Error: RESOURCE_LEAK (CWE-772): [#def40]
graphviz-2.40.1/cmd/lefty/os/unix/io.c:363: open_fn: Returning handle opened by ""dup"".
graphviz-2.40.1/cmd/lefty/os/unix/io.c:363: leaked_handle: Failing to save or close handle opened by ""dup(fd[1])"" leaks it.
#  361|       case 0:
#  362|           close (fd[0]), close (0), dup (fd[1]);
#  363|->         close (1), dup (fd[1]), close (fd[1]);
#  364|           execl (shell, shbname, ""-c"", cmd, NULL);
#  365|           panic2 (POS, ""ptyopen"", ""child cannot exec: %s\n"", cmd);

Error: RESOURCE_LEAK (CWE-772): [#def41]
graphviz-2.40.1/cmd/lefty/os/unix/io.c:429: open_fn: Returning handle opened by ""dup"".
graphviz-2.40.1/cmd/lefty/os/unix/io.c:429: leaked_handle: Failing to save or close handle opened by ""dup(p1[1])"" leaks it.
#  427|                   panic2 (POS, ""pipeopen"", ""child cannot exec: %s\n"", cmd2);
#  428|               }
#  429|->         close (1), dup (p1[1]), close (p1[1]);
#  430|           close (0), dup (p2[0]), close (p2[0]);
#  431|           execl (shell, shbname, ""-c"", cmd, NULL);

Error: RESOURCE_LEAK (CWE-772): [#def42]
graphviz-2.40.1/cmd/lefty/os/unix/io.c:430: open_fn: Returning handle opened by ""dup"".
graphviz-2.40.1/cmd/lefty/os/unix/io.c:430: leaked_handle: Failing to save or close handle opened by ""dup(p2[0])"" leaks it.
#  428|               }
#  429|           close (1), dup (p1[1]), close (p1[1]);
#  430|->         close (0), dup (p2[0]), close (p2[0]);
#  431|           execl (shell, shbname, ""-c"", cmd, NULL);
#  432|           panic2 (POS, ""pipeopen"", ""child cannot exec: %s\n"", cmd);
```

At first glance, I was inclined to agree with Coverity. In fact, these calls to `dup` look useless. The return value — which is the entire point of `dup` — is ignored. Then I realized what's happening here is that the calling code is relying on the low numbered file descriptor it has just closed to be immediately reused in the `dup` call. E.g. it's assuming `close(0), dup(...)` will return `0`. The whole thing is further obfuscated by unnecessary use of the comma operator.

I'm opening this as an issue rather than simply fixing it because we have some decisions to make as to which level of abstraction we solve this at. At a coarse grained level as I see it, from lowest to highest:

1. Fix in minimal number of characters: replace this dance with `dup2`.
2. +1 level: replace the use of `fork` with `posix_spawn` which gives a more structured API for doing such things. Windows compat is maybe affected by this...?
3. +2 levels: replace this with `posix_openpt`. In making this suggestion, I have not actually attempted to grok the precise semantics of this function and am just going off my intuition for what it is doing.
4. +3 levels: remove this lefty ""syscall."" Is it necessary? I do not understand enough to know.
5. +4 levels: remove the lefty syscall table. Maybe whatever it is trying to accomplish is unnecessary or out-of-date.

Open to thoughts and ideas from anyone.

----

Appendix on fork...

For non-C-programmers, the above may be very confusing and it may be thoroughly unobvious what the code in question is trying to do. The code is (IMHO, correctly) not commented much because it is performing a familiar (to C programmers) sequence of operations:

1. Use `pipe` or a cousin to create some uni-directional in-memory FIFOs.
2. Call `fork` to split execution (and the caller's address space). Note that the code after this point is running *twice*, once in the ""child"" an once in the ""parent.""
3. In the child, use `dup` (or in more modern code, `dup2`) to replace your own `stdin`, `stdout` and `stderr` with ends of the previously created FIFOs. The intent here is that your input and output is communicated to your parent (the original process) not the user's terminal.
4. In both parent and child close the ends of the FIFOs you don't need. E.g. the child does not need the ""write"" end of the `stdin` FIFO and the parent does not need the ""read"" end of the `stdin` FIFO.
5. In the child, call `execve` or a cousin to bootstrap into another program.

AFAIK there have really only been two significant innovations of this idiom since ~80s:

1. While creating the FIFOs, create an extra one and mark this `O_CLOEXEC`. In the child, if `execve` fails, write a byte to this FIFO. In the parent, read from this FIFO as your first step. The parent's read call will block until either (a) the child successfully execs, unblocking the parent's read call and returning an error, or (b) the parent's read call returns with a byte (which you can ignore) indicating the child failed. This trick solves the problem of ""did the child's exec call fail?""
2. `posix_spawn`. This neatly (well, ish) wraps up the idiom in a few ahead-of-time calls that let you indicate more of your intent to libc. The main advantage of this is that it lets libc do optimization tricks, like call `vfork` when available. `posix_spawn` is always preferred to `fork` in modern C.

If you're coming from a Python world, this is what Python's subprocess module is doing under the hood.

This is a bit of a rambling account and I am less familiar with the history than other maintainers, so I would love to be corrected on any of the above if this is inaccurate."
2058,"2.47.2","{lib/cgraph/sprint.h,lib/gvc/gvio.h,lib/ortho/ortho.h}","{lib/gvc/gvio.h,lib/ortho/ortho.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1713,"5.0.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1800,"7.0.5","{lib/common/boxes.h}","{lib/common/boxes.h}","## Steps to reproduce

1. Compile [dot.demo/neatopack.c](https://gitlab.com/graphviz/graphviz/-/blob/master/dot.demo/neatopack.c) to `a.exe`
1. Run `echo 'graph {a -- b}' | ./a.exe`

## Expected Behaviour

No error.

## Actual Behaviour

* `Segmentation fault (core dumped)` on Linux.
* `STATUS_ACCESS_VIOLATION` on Windows.

## OS Version

All supported OSs in our pipeline, but debug info below from `Ubuntu 18.04`.

## Graphviz Version

Home-built based on commit 4999fb8597c6f798763b8b8f0bf911eef11cf291.

`dot - graphviz version 2.44.2~dev.20200820.1251 (20200820.1251)`

## Additional info

This might not be a bug in Graphviz. It might be a bug in `neatopack.c` or in the way I'm using it.

GDB gives this backtrace:
```

magjac@t440:~/graphviz$ gdb -c core --args a.exe g.dot
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type ""show copying""
and ""show warranty"" for details.
This GDB was configured as ""x86_64-linux-gnu"".
Type ""show configuration"" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type ""help"".
Type ""apropos word"" to search for commands related to ""word""...
Reading symbols from a.exe...done.
[New LWP 18066]
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
Core was generated by `./a.exe'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
174	../sysdeps/x86_64/multiarch/../strcmp.S: No such file or directory.
(gdb) bt
#0  0x00007ff744aa1fea in __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
#1  0x00007ff744735051 in dttree (dt=0x5592f7cd3860, obj=0x7ffdd3771140, type=4) at dttree.c:143
#2  0x00007ff74500ed18 in refsymbind (strdict=0x5592f7cd3860, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:74
#3  0x00007ff74500ede9 in agstrdup (g=0x5592f7ccba90, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:102
#4  0x00007ff74500b94f in aginternalmapinsert (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", id=6) at imap.c:126
#5  0x00007ff74500b532 in agmapnametoid (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", result=0x7ffdd3771288, createflag=0) at id.c:105
#6  0x00007ff7450126a4 in agsubg (g=0x5592f7ccba90, name=0x7ffdd3773350 ""_cc_0"", cflag=1) at subg.c:57
#7  0x00007ff744d58a2e in ccomps (g=0x5592f7ccba90, ncc=0x7ffdd3773408, pfx=0x0) at ccomps.c:326
#8  0x00005592f703cbcf in main (argc=1, argv=0x7ffdd3773528) at /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:33
(gdb) 
```

ASan gives this:
```
ASAN:DEADLYSIGNAL
=================================================================
==19175==ERROR: AddressSanitizer: SEGV on unknown address 0x362e6f732e6c (pc 0x7fef93c124db bp 0x7ffd890ded70 sp 0x7ffd890ded30 T0)
==19175==The signal is caused by a READ memory access.
    #0 0x7fef93c124da in aggetrec /home/magjac/graphviz/lib/cgraph/rec.c:42
    #1 0x7fef93c1268e in agbindrec /home/magjac/graphviz/lib/cgraph/rec.c:95
    #2 0x7fef8b54da6a in neato_init_node /home/magjac/graphviz/lib/neatogen/neatoinit.c:46
    #3 0x7fef8b54dfaf in neato_init_node_edge /home/magjac/graphviz/lib/neatogen/neatoinit.c:125
    #4 0x7fef8b54f843 in neato_init_graph /home/magjac/graphviz/lib/neatogen/neatoinit.c:620
    #5 0x7fef8b551e06 in neato_layout /home/magjac/graphviz/lib/neatogen/neatoinit.c:1438
    #6 0x7fef93950bfe in gvLayoutJobs /home/magjac/graphviz/lib/gvc/gvlayout.c:85
    #7 0x7fef9395b2e2 in gvLayout /home/magjac/graphviz/lib/gvc/gvc.c:65
    #8 0x55ec144a6114 in main /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:38
    #9 0x7fef9355db96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #10 0x55ec144a5e59 in _start (/home/magjac/graphviz/a.exe+0xe59)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /home/magjac/graphviz/lib/cgraph/rec.c:42 in aggetrec
==19175==ABORTING
```

The problem can be seen for all OSs in [this pipeline](https://gitlab.com/magjac/graphviz/-/pipelines/180140052)

https://gitlab.com/graphviz/graphviz/-/merge_requests/1527 does not solve the problem as can be seen in [this pipeline].(https://gitlab.com/magjac/graphviz/-/pipelines/180166113)."
1753,"7.0.5","{lib/circogen/block.c}","{lib/circogen/block.c,contrib/prune/generic_list.h,contrib/prune/generic_list.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
1798,"2.47.3","{lib/pathplan/solvers.h,lib/glcomp/glcompimage.c,plugin/core/gvrender_core_map.c,lib/glcomp/glcompimage.h,lib/fdpgen/fdp.h}","{lib/glcomp/glcompimage.c,lib/pathplan/solvers.h,plugin/core/gvrender_core_map.c,lib/glcomp/glcompimage.h,lib/fdpgen/fdp.h,lib/expr/exrewind.c}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1697,"2.49.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1854,"6.0.1","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
1742,"2.49.1","{lib/rbtree/misc.c}","{lib/rbtree/misc.c}","lib/rbtree uses `setjmp`/`longjmp` to implement exception-style handling of allocation failures. Of the three call sites of `setjmp`, two return immediately. The remaining one in `RBTreeCreate` looks like this (lib/rbtree/red_black_tree.c:38-47):

```c
38   rb_red_blk_tree* newTree = NULL;
39   rb_red_blk_node* temp;
40
41   if (setjmp(rb_jbuf)) {
42     if (newTree) {
43       if (newTree->nil) free (newTree->nil);
44       free (newTree);
45     }
46     return NULL;
47   }
```

As far back as C89, the standard has the following wording:

> All accessible objects have values as of the time `longjmp` was called, except that the values of objects of automatic storage duration that are local to the function containing the invocation of the corresponding `setjmp` macro that do not have volatile-qualified type and have been changed between the `setjmp` invocation and `longjmp` call are indeterminate.

I have noticed recent versions of GCC (~9 onwards) taking advantage of this clause. I would not be surprised if an optimizing compilation removes the calls to `free` in this block, or even removes the `setjmp` entirely by reasoning backwards that no matching `longjmp` can occur because it would lead to indeterminate reads. Older GCC should warn about this with `-Wclobbered` and newer GCC with `-Wmaybe-unitialized`. I think we should proactively refactor this before someone files a cryptic issue stemming from a corrupted `longjmp`.

We could address this by marking `newTree` `volatile`. However the use of this mechanism is limited enough that I think we should just refactor rbtree to use conventional return codes instead of exception-style."
2178,"5.0.1","{lib/common/xml.c}","{cmd/lefty/ws/mswin32/gcommon.c,cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c,lib/common/xml.c,cmd/lefty/gfxview.c,cmd/lefty/lefty.c,cmd/lefty/ws/gtk/gview.c,cmd/lefty/ws/x11/gview.c}","## Steps to reproduce

Run the CI tests on a computer with high load.

## Expected Behaviour

No errors.

## Actual Behaviour

I've seen a few different flavors:
* `AssertionError: osage -? did not show usage. Output was:`
* `Failed: Malformed version string:`
* `AssertionError: patchwork -? did not show usage. Output was:`
* `AssertionError: assert 'Warning: Illegal value might for ALIGN - ignored' in ''`
* `AssertionError: neato -? did not show usage. Output was:`

## OS Version

Windows 10 with MinGW 3.2.0-340.x86_64

## Graphviz Version

Various development versions including 3.0.0~dev.20220111.0459 and 2.50.1~dev.20220109.1142.

## Additional info

This problems are themselves not new. These tests were added in https://gitlab.com/graphviz/graphviz/-/merge_requests/2387 so we haven't been able to see them before that.

Links to failing jobs:

* https://gitlab.com/magjac/graphviz/-/jobs/1955416602
* https://gitlab.com/graphviz/graphviz/-/jobs/1958702924
* https://gitlab.com/graphviz/graphviz/-/jobs/1958233385
* https://gitlab.com/graphviz/graphviz/-/jobs/1958567111
* https://gitlab.com/magjac/graphviz/-/jobs/1959543455
* https://gitlab.com/graphviz/graphviz/-/jobs/1960812195"
2058,"6.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1713,"2.49.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1798,"7.0.5","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/glcomp/glcomptexture.h,lib/neatogen/call_tri.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,cmd/smyrna/glexpose.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/common/usershape.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,lib/edgepaint/lab_gamut.h,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/glcomp/glcomptexture.h,lib/neatogen/call_tri.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,cmd/smyrna/glexpose.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/common/usershape.h,lib/sfdpgen/sfdp.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sparse/IntStack.h,lib/edgepaint/intersection.h,lib/edgepaint/lab_gamut.h,lib/dotgen/dot.h,lib/sparse/IntStack.c,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,contrib/prune/generic_list.h,lib/circogen/blockpath.h,lib/circogen/blocktree.h,contrib/prune/generic_list.c,lib/dotgen/position.c}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1544,"7.0.4","{lib/neatogen/overlap.c}","{lib/neatogen/overlap.c}","When building without triangle support, the following function has an invalid signature:
https://gitlab.com/graphviz/graphviz/blob/master/lib/neatogen/overlap.c#L686"
1843,"4.0.0","{}","{cmd/tools/gvpack.c}","## Steps to reproduce

E.g. `edgepaint -Q`

## Expected Behaviour

An error message and exit with non-zero status.

## Actual Behaviour

`option -Q unrecognized - ignored`

The edgepaint program still runs and waits for input from stdin. If some garbage is entered, it (correctly) prints an error message:

```
yada yada
Error: <stdin>: syntax error in line 1 near 'yada'
```
This was just to shown the program is still running.

## OS Version

All OSs, but this was tested on Ubuntu 18.04.

## Graphviz Version

dot - graphviz version 2.44.2~dev.20200928.0851 (20200928.0851)

Built from master at 3dd185241646d10149c86899f3a99beb51fce5d9 with local modifications.

## Additional info

Similar behavior is shown by:
* bcomps
* ccomps
* cluster
* edgepaint
* gc
* gvcolor
* gvmap
* gvmap.sh
* gvpack
* nop
* sccmap
* tred"
1836,"6.0.2","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1820,"4.0.0","{}","{cmd/tools/gvpack.c}","The version of `getopt` in [windows/getopt](https://gitlab.com/graphviz/graphviz/-/tree/master/windows/getopt) is outdated. It's incompatible with the version that the Linux autotools builds use. The fix for https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 in commit https://gitlab.com/graphviz/graphviz/-/merge_requests/1561/diffs?commit_id=997e12cf45ddfb44d1019c05f05bf12b53bd7322 shows this incompatibility.

Also, this outdated version is used by the CMake builds, regardless of which operating system you're on. I discovered this the hard way by an accidental (details provided on a need-to-know basis :flushed: ) removal of `windows/getopt` in [this Ubuntu CMake job](https://gitlab.com/magjac/graphviz/-/jobs/729861596).

My plan right now is to:

1. Remove `windows/getopt`
1. Add `getopt` using `vcpkg` to the [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) submodule
1. Adapt the CMake builds to:
    1. Use the vcpkg version on Windows
    1. Use the native/Docker image version on Linux and hope that this also works on macOS
1. Adapt the MSBuild builds to use the vcpkg version

The current libraries in [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) has unclear origins, but I read in [this issue](https://github.com/ellson/MOTHBALLED-graphviz/issues/1218#issuecomment-323947968) that many probably comes from https://windows.php.net/downloads/.

My plan is to add a new `vcpkg` top level directory to [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) so that libraries can be installed there directly without the need to figure out which file to put where in the old structure. In future, we can replace other outdated packages in the old structure with new ones installed with `vcpkg`.

**I would very much like to hear your comments on this and the above.**

As a reference, these are the `getopt` files that are installed with vcpkg:

```
~/vcpkg/vcpkg-export-20200910-082739$ find . -type f
./.vcpkg-root
./installed/vcpkg/info/getopt-win32_0.1_x86-windows.list
./installed/vcpkg/info/getopt_0_x86-windows.list
./installed/x86-windows/bin/getopt.dll
./installed/x86-windows/bin/getopt.pdb
./installed/x86-windows/debug/bin/getopt.dll
./installed/x86-windows/debug/bin/getopt.pdb
./installed/x86-windows/debug/lib/getopt.lib
./installed/x86-windows/include/getopt.h
./installed/x86-windows/lib/getopt.lib
./installed/x86-windows/share/getopt/vcpkg_abi_info.txt
./installed/x86-windows/share/getopt-win32/copyright
./installed/x86-windows/share/getopt-win32/vcpkg_abi_info.txt
./scripts/buildsystems/msbuild/applocal.ps1
./scripts/buildsystems/msbuild/vcpkg-general.xml
./scripts/buildsystems/msbuild/vcpkg.props
./scripts/buildsystems/msbuild/vcpkg.targets
./scripts/buildsystems/vcpkg.cmake
./scripts/cmake/vcpkg_get_windows_sdk.cmake
```"
1242,"2.47.2","{lib/ast/sfstr.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/edgepaint/lab_gamut.c,lib/ortho/partition.h}","{lib/inkpot/inkpot_xlate.c,lib/expr/exlexname.c,lib/ast/sfstr.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/inkpot/data/xcolors.c,lib/edgepaint/lab_gamut.c,lib/inkpot/inkpot.c,lib/ast/pathbin.c,lib/inkpot/inkpot_scheme.c,lib/ortho/partition.h,lib/inkpot/inkpot_value.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
205,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
1457,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
2131,"2.49.2","{lib/common/xml.c}","{}","This is quite strange, but the CMake build system contains the following:

```
# Aliases to the gml2gv executable (not including '.exe' suffix)
list(APPEND gml2gv_aliases gv2gml)
```

This seems to have the effect of the installed `gv2gml` being a copy of `gml2gv`. I say this is ""quite strange"" because neither the Autotools nor the MSBuild build systems consider these programs to be aliases. Even the main source files for these two programs, gv2gml.c and gml2gv.c, are distinct files."
2178,"2.50.0","{lib/common/xml.c}","{lib/common/xml.c}","## Steps to reproduce

Run the CI tests on a computer with high load.

## Expected Behaviour

No errors.

## Actual Behaviour

I've seen a few different flavors:
* `AssertionError: osage -? did not show usage. Output was:`
* `Failed: Malformed version string:`
* `AssertionError: patchwork -? did not show usage. Output was:`
* `AssertionError: assert 'Warning: Illegal value might for ALIGN - ignored' in ''`
* `AssertionError: neato -? did not show usage. Output was:`

## OS Version

Windows 10 with MinGW 3.2.0-340.x86_64

## Graphviz Version

Various development versions including 3.0.0~dev.20220111.0459 and 2.50.1~dev.20220109.1142.

## Additional info

This problems are themselves not new. These tests were added in https://gitlab.com/graphviz/graphviz/-/merge_requests/2387 so we haven't been able to see them before that.

Links to failing jobs:

* https://gitlab.com/magjac/graphviz/-/jobs/1955416602
* https://gitlab.com/graphviz/graphviz/-/jobs/1958702924
* https://gitlab.com/graphviz/graphviz/-/jobs/1958233385
* https://gitlab.com/graphviz/graphviz/-/jobs/1958567111
* https://gitlab.com/magjac/graphviz/-/jobs/1959543455
* https://gitlab.com/graphviz/graphviz/-/jobs/1960812195"
2046,"2.49.2","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","I want to customize some attributes when generating svg images.for example:
<g id=""CFC72F05-6E77-4772-93C9-0BE9485815E8-02700"" class=""node"" **time=""2021/4/15""** >"
1785,"4.0.0","{plugin/poppler/gvloadimage_poppler.c,lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,plugin/gdk/gvdevice_gdk.c,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h,cmd/tools/convert.h}","{plugin/poppler/gvloadimage_poppler.c,lib/circogen/circpos.h,lib/sfdpgen/sfdpinternal.h,plugin/glitz/gvdevice_glitz.c,plugin/glitz/gvplugin_glitz.c,lib/sfio/sftmp.c,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/sfio/sfresize.c,lib/neatogen/pca.h,lib/circogen/block.h,cmd/tools/gvpack.c,lib/cgraph/agxbuf.c,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,cmd/dot/no_builtins.c,lib/ast/pathgetlink.c,lib/dotgen/dot.h,plugin/gdk/gvdevice_gdk.c,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h,cmd/tools/convert.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
2102,"2.49.1","{lib/expr/exparse.h}","{lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1785,"2.49.3","{lib/circogen/block.c,cmd/gvmap/power.h,lib/circogen/block.h,lib/fdpgen/fdp.h,cmd/tools/convert.h}","{lib/circogen/block.c,cmd/gvmap/power.h,lib/circogen/block.h,lib/fdpgen/fdp.h,cmd/tools/convert.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1573,"2.47.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
2160,"3.0.0","{}","{plugin/ming/gvplugin_ming.c,plugin/ming/gvrender_ming.c}","`plugin/ming/gvrender_ming.c` outputs Shockwave Flash files, using the `ming` library: http://www.libming.org/.

This format's pretty dead, with Adobe giving up support: https://www.adobe.com/au/products/flashplayer/end-of-life.html

And the output format isn't documented on https://graphviz.org/docs/outputs/.

I propose we remove this code; perhaps through a deprecation period (maybe flagging it off in a release? then removing it next release?)"
1836,"3.0.0","{plugin/poppler/gvloadimage_poppler.c}","{plugin/poppler/gvloadimage_poppler.c}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
2229,"7.0.5","{lib/cgraph/itos.h}","{lib/cgraph/itos.h}","Migrating this from https://gitlab.com/graphviz/graphviz/-/merge_requests/2575#note_907097811:

> I implemented `itos` believing lifetime of an [rvalue](https://en.cppreference.com/w/c/language/value_category) like this to be the extent of the containing expression. However, your question made me delve in to try to find chapter and verse in the C standard to back this up. I realized I'm wrong and I was thinking of the equivalent scenario in C++ (which would involve what they term a [prvalue](https://en.cppreference.com/w/cpp/language/value_category#prvalue)). In C, the situation apparently differs between C99 and C11, for which there is a helpful example https://en.cppreference.com/w/c/language/lifetime.
>
> The tl;dr of this is that use of `itos` like this is unfortunately [undefined behavior](https://en.cppreference.com/w/c/language/behavior) in C99, the mode in which we compile Graphviz. We should probably look at removing `itos` and its uses, which is disappointing as I introduced it aiming to solve a number of `sprintf` problems."
1697,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1697,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1242,"7.0.6","{lib/neatogen/overlap.h,lib/neatogen/overlap.c,lib/circogen/blockpath.h,cmd/smyrna/gui/glcompui.c}","{lib/neatogen/overlap.h,lib/circogen/deglist.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/sfdpgen/PriorityQueue.c,cmd/smyrna/gui/glcompui.c,lib/sfdpgen/PriorityQueue.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1785,"5.0.0","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/block.h,tclpkg/gv/gv_builtins.c,lib/ortho/partition.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
2105,"2.49.0","{lib/gvpr/gdefs.h}","{windows/cmd/gvpr/gdefs.h,windows/include/gvpr/gdefs.h}","- graphviz-2.48.0.gz
- ubuntu 16.04.1
- cross-compile 4 arm64 platforms.
- arm-linux-gnu-gcc (sorry, it can not share)

""""""""my script.sh """"""

```
cd ${BUILD_PATH}
if [ ! -f ""${ROOT_PATH}/graphviz/lib/*.so"" ]; then
    rm -rf graphviz
    mkdir -p ${BUILD_PATH}/graphviz/build
    cd graphviz
    tar -zxvf ${SRC_PATH}/graphviz-2.48.0.tar.gz
    cd graphviz-*
    export CFLAGS=""-fstack-protector-all""
    export CXXFLAGS=""-fstack-protector-all"" 
    export LDFLAGS=""-Wl,-z,relro,-z,now,-z,noexecstack""
    ./autogen.sh
    ./configure \
    --datadir=""/usr/bin/automake"" \
    --prefix=${BUILD_PATH}/graphviz/build \
    --host=arm \
    CC=${CROSS_COMPILE}-gcc \
    CXX=${CROSS_COMPILE}-g++ \
    CPP=${CROSS_COMPILE}-cpp \
    --enable-shared=yes \
    --enable-perl=yes \
    --enable-static=no \
    --disable-php \
    --enable-option-checking=yes
    make -j8 && make install 
    export LDFLAGS=""""
    export CFLAGS=""""
    export CXXFLAGS=""""
    rm -rf  ${ROOT_PATH}/graphviz
    mkdir -p ${ROOT_PATH}/graphviz/include
    mkdir -p ${ROOT_PATH}/graphviz/lib
    cp -rf ${BUILD_PATH}/graphviz/build/include/* ${ROOT_PATH}/graphviz/include
    cp -rf ${BUILD_PATH}/graphviz/build/lib/lib* ${ROOT_PATH}/graphviz/lib/
fi 
```


- try to build from source code 4 arm64 paltforms, but meet errors. can U help me?

Errors: 
```
make[3]: Leaving directory '/home/abc/tmpbuild/graphviz/graphviz-2.48.0/lib/osage'
Making all in gvpr
make[3]: Entering directory '/home/abc/tmpbuild/graphviz/graphviz-2.48.0/lib/gvpr'
/opt/hisi-linux/x86-arm/arm-himix200-linux/host_bin/arm-linux-gnu-gcc ./mkdefs.c -o mkdefs
./mkdefs gdefs.h < ../../lib/gvpr/gprdata
/lib/ld-linux.so.3: No such file or directory
Makefile:1082: recipe for target 'gdefs.h' failed
make[3]: *** [gdefs.h] Error 255
make[3]: Leaving directory '/home/abc/tmpbuild/graphviz/graphviz-2.48.0/lib/gvpr'
Makefile:589: recipe for target 'all-recursive' failed
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory '/home/abc/tmpbuild/graphviz/graphviz-2.48.0/lib'
Makefile:832: recipe for target 'all-recursive' failed
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory '/home/abc/tmpbuild/graphviz/graphviz-2.48.0'
Makefile:640: recipe for target 'all' failed
make: *** [all] Error 2
```"
2058,"3.0.0","{lib/pathplan/pathgeom.h}","{lib/pathplan/pathgeom.h,lib/pack/ptest.c}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1806,"2.46.0","{lib/expr/exop.h}","{}","Creating an issue to more accurately track a discussion stemming out of !1523...

Several of the steps that generate lexers/parsers using Flex/Bison run a subsequent `sed` step to find-and-replace ""yy"" with a custom prefix. The purpose of this is to avoid symbol clashes between different generated parsers.

These `sed` steps are both fragile and over-eager (they end up replacing ""yy"" in comments etc), but they are also not necessary. At the time this code was written there was probably no other convenient way of accomplishing this. But today Flex provides [`%option prefix`](https://www.cs.virginia.edu/~cr4bd/flex-manual/Code_002dLevel-And-API-Options.html) and Bison provides [`%define api.prefix`](https://www.gnu.org/software/bison/manual/html_node/Multiple-Parsers.html) for this purpose. Moving to these would make the build more robust, remove some unnecessary intermediate files, and take us one step towards dropping `sed` as a build dependency.

Quoting my last comment from !1523:

> I attempted this and it results in quite a nice clean up: https://gitlab.com/smattr/graphviz/-/commits/064bf64e-752b-45fc-8da7-e66050fbe8b5. However, [the Windows builds fail CI](https://storage.googleapis.com/gitlab-gprd-artifacts/a4/90/a490598b42559b4746fbf724494aea3ddbf245afc71b53f49640ff8d9d53116f/2020_08_25/701692276/770923734/job.log?response-content-type=text%2Fplain%3B%20charset%3Dutf-8&response-content-disposition=inline&GoogleAccessId=gitlab-object-storage-prd@gitlab-production.iam.gserviceaccount.com&Signature=qHFyA2rslJZA63P%2FR6G34aKlFGDhqtPK24qXkOWI1fgI21RHVEz7%2FNNdg7WP%0AyXiflBcqQWrdMj80i%2FWa07RzrBxQhoSZOCBRRSAPYNn8IS8VMz7rZ4RJc3NN%0AJ34PtmsfQyNGo6YiHLz3S4EK3nf1hBV%2Fcd1zRg%2BQOwtS1GjbXJQsMuVl%2FllN%0AQYLhH6LwsI%2F28b0KREOPDLW1gPlkDImDQAQoUjmnUqsRX%2BUxYBs%2F6SqYxHgK%0AOeig%2Fhx853uR4LJEBXpTPThSTHTlyq%2FdMjPkBwokwivAT2dXqqLSpAEqbGMu%0AGYsiHF5PXnjNuGu%2FF%2B1jgQ7xk%2BvxAWQpDVK%2B0E4GRw%3D%3D&Expires=1598324058):
>
> ```
> Generating Code...
>      Creating library C:/GitLab-Runner/builds/smattr/graphviz/build/lib/cdt/Debug/cdt.lib and object C:/GitLab-Runner/builds/smattr/graphviz/build/lib/cdt/Debug/cdt.exp
>   cdt.vcxproj -> C:\GitLab-Runner\builds\smattr\graphviz\build\lib\cdt\Debug\cdt.dll
>   [BISON][Grammar] Building parser with bison 2.7
>   grammar.y:14.20-24: error: syntax error, unexpected {...}
> C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(231,5): error MSB6006: ""cmd.exe"" exited with code 1. [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\cgraph\cgraph.vcxproj]
> ```
>
> This confuses me because this feature was introduced in Bison 2.6 and the version of Bison we're using there claims to be 2.7. The [Bison docs](https://www.gnu.org/software/bison/manual/bison.html) indicate there have been no relevant changes to this feature since its introduction. @magjac do you have any guesses at what's going on here?"
1950,"2.47.1","{}","{plugin/core/gvrender_core_dia.c,lib/common/diagen.c,lib/common/picgen.c}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1543,"2.49.0","{lib/gvc/gvcontext.c}","{lib/gvc/gvcontext.c}","Hey!

First I would to say you thanks you for this amazing library.

However, I found a big memory leak when I tried to use gvContext to render a graph on a file.
```c
==18682==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 3543 byte(s) in 1 object(s) allocated from:
    #0 0x7f26c1c28389 in __interceptor_malloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86
    #1 0x7f26c196199d in gmalloc (/usr/lib/libgvc.so.6+0x3799d)

Indirect leak of 143538 byte(s) in 2287 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c191bcee in agalloc (/usr/lib/libcgraph.so.6+0x9cee)

Indirect leak of 2952 byte(s) in 41 object(s) allocated from:
    #0 0x7f26c1c28389 in __interceptor_malloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86
    #1 0x7f26c190cc1c in dtopen (/usr/lib/libcdt.so.5+0x2c1c)

Indirect leak of 2224 byte(s) in 50 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c191bcee in agalloc (/usr/lib/libcgraph.so.6+0x9cee)
    #2 0x60800000019f  (<unknown module>)

Indirect leak of 168 byte(s) in 4 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c191bcee in agalloc (/usr/lib/libcgraph.so.6+0x9cee)
    #2 0x5592a8991e89 in test /home/test.c:12

Indirect leak of 136 byte(s) in 1 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c1919cd8 in agopen (/usr/lib/libcgraph.so.6+0x7cd8)
    #2 0x5592a898eb2e in test /home/test.c:136
    #3 0x42724145345064  (<unknown module>)

Indirect leak of 112 byte(s) in 1 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c1919be9 in agopen (/usr/lib/libcgraph.so.6+0x7be9)

Indirect leak of 112 byte(s) in 2 object(s) allocated from:
    #0 0x7f26c1c28801 in __interceptor_realloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:105
    #1 0x7f26c191bc95  (/usr/lib/libcgraph.so.6+0x9c95)

SUMMARY: AddressSanitizer: 152785 byte(s) leaked in 2387 allocation(s).
```

with only the following code
```c
GVC_t *gvc;
gvc = gvContext();
gvFreeContext(gvc);
```

- os : Linux manjaro-i3 4.19.45-1-MANJARO May 22 17:16:41 UTC 2019 x86_64 GNU/Linux
- graphviz version: 2.40.1-15 

Did I do something wrong ?
... or does this library really leak?

Thank you in advance for your answer."
2204,"4.0.0","{windows/include/unistd/unistd.h}","{windows/include/unistd.h,lib/ast/compat_unistd.h}","MSVC reports the compilation warning:

```
  utils.c
C:\GitLab-Runner\builds\graphviz\graphviz\lib\common\utils.c(361,13): warning C4013: 'access' undefined; assuming extern returning int [C:\GitLab-Runner\builds\graphviz\graphviz\build\lib\common\common_obj.vcxproj]
```

Backtracking what is going on here, it seems most uses of unistd.h functions in the code base have something like the following stanza:

```c
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#else
#include <ast/compat_unistd.h>
#endif
```

This is not present in lib/common code because lib/common does not depend on lib/ast. Instead it just does nothing (yolo) if `HAVE_UNISTD_H` prevents the inclusion of unistd.h.

So two relevant things to note:
1. unistd.h “shimming” like this is still an ongoing concern, AFAIK. Windows remains a hold out, that refuses to ship unistd.h.
2. lib/ast, (that I've heard variously referred to as “Abstract Software Toolkit” or “Advanced Software Technology” or “AT&T Software Technology”) is not the base of the dependency tree.

Should we move the unistd.h abstraction to cgraph or somewhere else? Should we try to purge platform-specific usage of such functions? Should we just shim unistd.h in windows/include/config.h that's hard coded anyway?"
1477,"8.0.1","{}","{lib/cgraph/cmpnd.c}","Sometimes it might be convenient to just add graphviz as a subdirectory and manually build it in your cmakelists, however, it looks like currently it's prevented by the use of `CMAKE_SOURCE_DIR` in a few places (which would link to the topmost CMakeLists.txt), when it should've been `CMAKE_CURRENT_SOURCE_DIR` (so relative paths would be correct). Maybe there are other issues, I haven't investigated further."
1713,"7.0.4","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1748,"6.0.2","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1801,"2.46.1","{lib/ast/sfstr.h}","{lib/ast/sfstr.h}","Related to #1742 and as discussed on #1800, there are further uses of `setjmp` errors paths that access non-volatile local variables with the expectation that they are preserved across a call to `longjmp`. Unfortunately this property is not true.

Rather than trying to audit this and annotate every accessed variable with `volatile`, I propose we simply remove this exception-style control flow. I have not yet assessed how hard this is to do."
1748,"7.0.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1573,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1798,"4.0.0","{plugin/poppler/gvloadimage_poppler.c,lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/common/logic.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,cmd/lefty/cs2l/cs2l.h,cmd/smyrna/glexpose.h,lib/ortho/ortho.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/common/usershape.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,cmd/gvedit/mainwindow.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,plugin/gdk/gvdevice_gdk.c,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/pathplan/pathgeom.h,lib/circogen/blockpath.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h,cmd/tools/convert.h}","{plugin/poppler/gvloadimage_poppler.c,lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,plugin/glitz/gvdevice_glitz.c,plugin/glitz/gvplugin_glitz.c,lib/sfio/sftmp.c,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/common/logic.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,cmd/lefty/cs2l/cs2l.h,cmd/smyrna/glexpose.h,lib/neatogen/overlap.c,lib/ortho/ortho.h,lib/sfio/sfresize.c,lib/neatogen/pca.h,lib/circogen/block.h,cmd/tools/gvpack.c,lib/common/usershape.h,lib/cgraph/agxbuf.c,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,cmd/gvedit/mainwindow.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,lib/ast/pathgetlink.c,lib/dotgen/dot.h,plugin/gdk/gvdevice_gdk.c,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/pathplan/pathgeom.h,lib/ast/compat_unistd.h,lib/circogen/blockpath.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h,cmd/tools/convert.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1798,"5.0.0","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/common/logic.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,cmd/lefty/cs2l/cs2l.h,cmd/smyrna/glexpose.h,lib/neatogen/overlap.c,lib/ortho/ortho.h,lib/neatogen/pca.h,lib/circogen/block.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/pathplan/pathgeom.h,lib/circogen/blockpath.h,tclpkg/gv/gv_builtins.c,lib/ortho/partition.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h}","{lib/circogen/circpos.h,lib/glcomp/glcomptextpng.h,lib/sfdpgen/sfdpinternal.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/pathplan/solvers.h,lib/common/logic.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,cmd/lefty/cs2l/cs2l.h,cmd/smyrna/glexpose.h,lib/ortho/ortho.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/osage/osage.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,tclpkg/tkstubs/tkInt.h,lib/circogen/circo.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/neatogen/closest.h,lib/pathplan/pathgeom.h,lib/circogen/blockpath.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1753,"5.0.0","{lib/cgraph/strview.h,lib/circogen/block.c,lib/neatogen/overlap.c}","{lib/circogen/block.c,lib/neatogen/overlap.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
1753,"4.0.0","{cmd/tools/gvpack.cpp,lib/circogen/block.c,lib/neatogen/overlap.c}","{lib/circogen/block.c,lib/neatogen/overlap.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
1740,"2.49.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1544,"5.0.1","{lib/neatogen/overlap.c}","{lib/neatogen/overlap.c}","When building without triangle support, the following function has an invalid signature:
https://gitlab.com/graphviz/graphviz/blob/master/lib/neatogen/overlap.c#L686"
2057,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
1940,"6.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1785,"2.47.2","{lib/ast/sfstr.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/edgepaint/lab_gamut.c,lib/ortho/partition.h}","{lib/inkpot/inkpot_xlate.c,lib/expr/exlexname.c,lib/ast/sfstr.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/inkpot/data/xcolors.c,lib/edgepaint/lab_gamut.c,lib/inkpot/inkpot.c,lib/ast/pathbin.c,lib/inkpot/inkpot_scheme.c,lib/ortho/partition.h,lib/inkpot/inkpot_value.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1697,"7.0.3","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1868,"2.49.2","{lib/common/xml.c,lib/common/utils.h}","{lib/common/utils.h}","The current code base (608aab7b989cf33b48145e1c78abdd73f598fe44) has four implementations (that I have found so far) of XML string escaping:
* `xml_string` and friends in cmd/tools/gv2gxl.c
* `xml_string` and friends in cmd/smyrna/smyrna_utils.c
* `xml_string` and friends in lib/common/labels.c
* `html_string` and friends in plugin/core/gvrender_core_vml.c

The identical comments surrounding these implementations make it clear they were once copy-pasted from the same source. The lib/common one looks like the original and a comment in Smyrna even explains why this situation exists:

```c
/* many of these functions are available in libcommon.
 * We cannot use those because dependencies cause a great
 * deal of libcommon to be brought in, which complicates
 * and makes possible conflicts as some parts of libcommon
 * rely on not using libcgraph.
 */
```

As far as I'm aware, this situation no longer exists. libcgraph is the only graph library supported and there is no sensible way to use libcommon without libcgraph. However, a naive attempt to undo the Smyrna code duplication fails because:
1. A number of libcommon headers rely on something else being #included prior to them. lib/common/utils.h that contains the libcommon prototype for `xml_string` cannot be #included without other libcommon headers being #included prior to it.
2. A number of libcommon typedefs/prototypes conflict with other ones in Smyrna headers.

The situation is pretty messy and may require diagnosing and undoing the conflicting definitions one-by-one. But I think it's worth doing in service of paring back the number of XML string escaping variants we're maintaining to 1."
1785,"2.49.0","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/ast/pathgetlink.c,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,lib/gvc/gvcontext.c}","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/vmalloc/vmbest.c,lib/sfdpgen/sfdpinternal.h,lib/vmalloc/vmhdr.h,cmd/dot/no_builtins.c,lib/ast/pathgetlink.c,lib/ast/pathexists.c,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,lib/gvc/gvcontext.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1846,"2.49.0","{lib/gvc/gvio.h}","{lib/gvc/gvio.h}","The API exposed by lib/gvc/gvio.h includes a function `gvfwrite`:

```c
extern size_t gvwrite (GVJ_t * job, const char *s, size_t len);
extern size_t gvfwrite (const void *ptr, size_t size, size_t nmemb, FILE *stream);
extern int gvferror (FILE *stream);
extern int gvputc(GVJ_t * job, int c);
extern int gvputs(GVJ_t * job, const char *s);
extern int gvflush (GVJ_t * job);
extern void gvprintf(GVJ_t * job, const char *format, ...);
extern void gvprintdouble(GVJ_t * job, double num);
extern void gvprintpointf(GVJ_t * job, pointf p);
extern void gvprintpointflist(GVJ_t * job, pointf *p, int n);
```

The prototype for it already looks a little out of place, as it doesn't take a `GVJ_t`. Its implementation ignores the `size` argument and contains an assertion that looks like a typo:

```c
size_t gvfwrite (const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    size = sizeof(char);
    assert(size);
    return gvwrite((GVJ_t*)stream, ptr, nmemb);
}
```

I guess maybe this function is provided for users who need a fwrite-alike function pointer to pass to something else. But this isn't going to work because of the way it ignores `size`. Nothing in the Graphviz tree uses this, so it's just a matter of whether we consider this useful or harmful to users. Obviously removing it would be an API break."
1573,"2.47.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1697,"7.0.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1697,"6.0.2","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1573,"7.0.3","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1573,"7.0.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
2179,"5.0.1","{lib/common/xml.c}","{lib/common/xml.c}","Recently, the GraphViz version I use on some builder for my project was updated, and many of my tests started failing because of some new warning occasionally emitted by `dot`.    The message is `Warning: no hard-coded metrics for 'Lato'`, where `Lato` is an installed TTF font I use.  But the strange part is that the message was not always emitted for all graphs using Lato.  After some investigation, it seems to be triggered by labels containing empty lines.

## Steps to reproduce

```
% cat foo.dot
digraph """" {
  0 -> 1 [fontname=""Lato"",label=<<br/>1>]
}
% dot -Tsvg foo.dot >/dev/null
Warning: no hard-coded metrics for 'Lato'.  Falling back to 'Times' metrics
% cat bar.dot
digraph """" {
  0 -> 1 [fontname=""Lato"",label=< <br/>1>]
}
% dot -Tsvg bar.dot >/dev/null
```

The difference between these two files is only the space in the label.  Adding the space removes the warning.

Also note that if I add `-v`, it appears the font `Lato` is resolved differently depending on whether the label starts with an empty line or not:

```
% dot -v -Tsvg foo.dot >/dev/null 2>foo.stderr
% dot -v -Tsvg bar.dot >/dev/null 2>bar.stderr
% diff foo.stderr bar.stderr 
26,27c26
< Warning: no hard-coded metrics for 'Lato'.  Falling back to 'Times' metrics
< fontname: ""Lato"" resolved to: [internal hard-coded]
---
> fontname: ""Lato"" resolved to: (PangoCairoFcFont) ""Lato, Regular"" /usr/share/fonts/TTF/Lato-Regular.ttf
```

## Expected Behaviour

I would expect no warning, and the font resolved to `Lato-Regular.ttf` in both cases.


## OS Version

This was discovered using `graphviz 2.50.0-2` on Arch Linux.

## Graphviz Version

```
% dot -v
dot - graphviz version 2.50.0 (0)
libdir = ""/usr/lib/graphviz""
Activated plugin library: libgvplugin_dot_layout.so.6
Using layout: dot:dot_layout
Activated plugin library: libgvplugin_core.so.6
Using render: dot:core
Using device: dot:dot:core
The plugin configuration file:
        /usr/lib/graphviz/config6
                was successfully loaded.
    render      :  cairo dot dot_json fig gd json json0 map mp pic pov ps svg tk visio vml vrml xdot xdot_json
    layout      :  circo dot fdp neato nop nop1 nop2 osage patchwork sfdp twopi
    textlayout  :  textlayout
    device      :  canon cmap cmapx cmapx_np dot dot_json eps fig gd gd2 gif gv imap imap_np ismap jpe jpeg jpg json json0 mp pdf pic plain plain-ext png pov ps ps2 svg svgz tk vdx vml vmlz vrml wbmp webp x11 xdot xdot1.2 xdot1.4 xdot_json xlib
    loadimage   :  (lib) eps gd gd2 gif jpe jpeg jpg png ps svg webp xbm
```"
1242,"7.0.5","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/sparse/IntStack.c,lib/glcomp/glcomptexture.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1748,"2.48.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
2057,"7.0.3","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
1276,"2.50.0","{lib/common/xml.c}","{lib/common/xml.c}","*Created by: caber*

https://github.com/ellson/graphviz/blob/8f8c435c7c7ed3750816fa39c39b56ab0cc6a86f/cmd/tools/gv2gml.c#L232
Doesn't escape qoutes, emits malformed gml for proper dot file, without error.
PoC:
digraph test {
x  [label=<""Label"">]; //  emits: label """"Label"""" should emit: label ""\\""Label\\""""
}

"
1854,"6.0.2","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
2102,"7.0.2","{lib/expr/exparse.h}","{lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
2102,"6.0.2","{lib/edgepaint/lab_gamut.h,lib/expr/exparse.h}","{lib/edgepaint/lab_gamut.h,lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1934,"7.0.5","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
1950,"2.47.2","{lib/cgraph/sprint.h,lib/cgraph/sprint.c,lib/cgraph/itos.h,lib/cgraph/test_sprint.c}","{lib/inkpot/data/xcolors.c,lib/inkpot/inkpot_scheme.c}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
1573,"6.0.2","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
2153,"2.50.0","{}","{cmd/tools/tred2.c}","## Steps to reproduce

./configure ...
make
make install ...

## Expected Behaviour

Now that lefty is disabled by default, lefty should not be compiled and none of its associated files shoule be installed.

## Actual Behaviour

During ./configure:
```
  lefty:         
```
After installation, as compared to my 2.46.0 that had lefty enabled, I now have
* bin/lefty -- not installed
* share/graphviz/lefty/ -- fewer files but still some
* pdf/leftyfguide.pdf -- still installed
* share/man/man1/lefty.1 -- still installed

## OS Version

OS X 10.13

## Graphviz Version

2.49.3

## Additional info

It looks like cmd/lefty/Makefile.am does an incomplete job of wrapping its pieces with ```WITH_LEFTY```. Would it be easier to apply that control to a ```SUBDIRS+=lefty``` in cmd/Makefile.am rather than within the deeper levels?

The leftyguide comes from doc/Makefile.am, where there is no ```WITH_LEFTY``` control."
1820,"2.49.2","{}","{lib/spine/spine.c}","The version of `getopt` in [windows/getopt](https://gitlab.com/graphviz/graphviz/-/tree/master/windows/getopt) is outdated. It's incompatible with the version that the Linux autotools builds use. The fix for https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 in commit https://gitlab.com/graphviz/graphviz/-/merge_requests/1561/diffs?commit_id=997e12cf45ddfb44d1019c05f05bf12b53bd7322 shows this incompatibility.

Also, this outdated version is used by the CMake builds, regardless of which operating system you're on. I discovered this the hard way by an accidental (details provided on a need-to-know basis :flushed: ) removal of `windows/getopt` in [this Ubuntu CMake job](https://gitlab.com/magjac/graphviz/-/jobs/729861596).

My plan right now is to:

1. Remove `windows/getopt`
1. Add `getopt` using `vcpkg` to the [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) submodule
1. Adapt the CMake builds to:
    1. Use the vcpkg version on Windows
    1. Use the native/Docker image version on Linux and hope that this also works on macOS
1. Adapt the MSBuild builds to use the vcpkg version

The current libraries in [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) has unclear origins, but I read in [this issue](https://github.com/ellson/MOTHBALLED-graphviz/issues/1218#issuecomment-323947968) that many probably comes from https://windows.php.net/downloads/.

My plan is to add a new `vcpkg` top level directory to [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) so that libraries can be installed there directly without the need to figure out which file to put where in the old structure. In future, we can replace other outdated packages in the old structure with new ones installed with `vcpkg`.

**I would very much like to hear your comments on this and the above.**

As a reference, these are the `getopt` files that are installed with vcpkg:

```
~/vcpkg/vcpkg-export-20200910-082739$ find . -type f
./.vcpkg-root
./installed/vcpkg/info/getopt-win32_0.1_x86-windows.list
./installed/vcpkg/info/getopt_0_x86-windows.list
./installed/x86-windows/bin/getopt.dll
./installed/x86-windows/bin/getopt.pdb
./installed/x86-windows/debug/bin/getopt.dll
./installed/x86-windows/debug/bin/getopt.pdb
./installed/x86-windows/debug/lib/getopt.lib
./installed/x86-windows/include/getopt.h
./installed/x86-windows/lib/getopt.lib
./installed/x86-windows/share/getopt/vcpkg_abi_info.txt
./installed/x86-windows/share/getopt-win32/copyright
./installed/x86-windows/share/getopt-win32/vcpkg_abi_info.txt
./scripts/buildsystems/msbuild/applocal.ps1
./scripts/buildsystems/msbuild/vcpkg-general.xml
./scripts/buildsystems/msbuild/vcpkg.props
./scripts/buildsystems/msbuild/vcpkg.targets
./scripts/buildsystems/vcpkg.cmake
./scripts/cmake/vcpkg_get_windows_sdk.cmake
```"
1876,"2.49.3","{lib/fdpgen/fdp.h}","{lib/fdpgen/fdp.h}","This issue is spawned from point 3) of https://gitlab.com/graphviz/graphviz/-/issues/592#note_447723339.

## Steps to reproduce

`echo 'graph {a}' | fdp`

## Expected Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	a	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## Actual Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	""%3""	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## OS Version

Ubuntu 20.10.

## Graphviz Version

fdp - graphviz version 2.44.2~dev.20201115.0109 (20201115.0109)

## Additional info

Version 2.44.1 works as expected.

fdp, sfdp, neato & twopi has the same problem, while dot, circo, patchwork & osage works as expected."
1573,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
2096,"2.48.0","{lib/ortho/ortho.h}","{lib/ortho/ortho.h}","## Steps to reproduce

Build Graphviz using CMake with AddressSanitizer enabled.

Run e.g. the test case in https://gitlab.com/magjac/graphviz/-/blob/add-cpp-test-suite/tests/test_simple.cpp

## Expected Behaviour

No error.

## Actual Behaviour

```
==204644==ERROR: AddressSanitizer: odr-violation (0x7fccf296eca0):
  [1] size=4 'odb_flags' ../lib/ortho/ortho.c:44:5
  [2] size=4 'odb_flags' ../lib/ortho/ortho.c:44:5
These globals were registered at these points:
  [1]:
    #0 0x7fccf2b13938 in __asan_register_globals ../../../../src/libsanitizer/asan/asan_globals.cpp:341
    #1 0x7fccf25db597 in _sub_I_00099_1 (/home/magjac/graphviz/build/plugin/dot_layout/libgvplugin_dot_layout.so.6+0x3b0597)
    #2 0x7fccf34dc96d  (/lib64/ld-linux-x86-64.so.2+0x1196d)

  [2]:
    #0 0x7fccf2b13938 in __asan_register_globals ../../../../src/libsanitizer/asan/asan_globals.cpp:341
    #1 0x7fccf1c8d999 in _sub_I_00099_1 (/home/magjac/graphviz/build/plugin/neato_layout/libgvplugin_neato_layout.so.6+0x5a8999)
    #2 0x7fccf34dc96d  (/lib64/ld-linux-x86-64.so.2+0x1196d)

==204644==HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_odr_violation=0
SUMMARY: AddressSanitizer: odr-violation: global 'odb_flags' at ../lib/ortho/ortho.c:44:5
==204644==ABORTING
```

## OS Version

Ubuntu 21.04.

## Graphviz Version

dot - graphviz version 2.47.4~dev.20210706.0621 (20210706.0621)

## Additional info

The reason for this problem is that the `lib/ortho` object files are not included in the `gvc` library when built with CMake, which has the effect that they end up both in libgvplugin_dot_layout.so and in libgvplugin_neato_layout.so which causes the ASan ODR violation.

When built with autotools, the `gvc` library correctly contains those object files and the problem does not arise."
1748,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1276,"2.49.2","{lib/common/xml.c}","{}","*Created by: caber*

https://github.com/ellson/graphviz/blob/8f8c435c7c7ed3750816fa39c39b56ab0cc6a86f/cmd/tools/gv2gml.c#L232
Doesn't escape qoutes, emits malformed gml for proper dot file, without error.
PoC:
digraph test {
x  [label=<""Label"">]; //  emits: label """"Label"""" should emit: label ""\\""Label\\""""
}

"
1748,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
2102,"2.49.2","{lib/common/utils.h,lib/expr/exparse.h}","{lib/common/utils.h,lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1820,"2.50.0","{}","{cmd/tools/tred2.c}","The version of `getopt` in [windows/getopt](https://gitlab.com/graphviz/graphviz/-/tree/master/windows/getopt) is outdated. It's incompatible with the version that the Linux autotools builds use. The fix for https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 in commit https://gitlab.com/graphviz/graphviz/-/merge_requests/1561/diffs?commit_id=997e12cf45ddfb44d1019c05f05bf12b53bd7322 shows this incompatibility.

Also, this outdated version is used by the CMake builds, regardless of which operating system you're on. I discovered this the hard way by an accidental (details provided on a need-to-know basis :flushed: ) removal of `windows/getopt` in [this Ubuntu CMake job](https://gitlab.com/magjac/graphviz/-/jobs/729861596).

My plan right now is to:

1. Remove `windows/getopt`
1. Add `getopt` using `vcpkg` to the [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) submodule
1. Adapt the CMake builds to:
    1. Use the vcpkg version on Windows
    1. Use the native/Docker image version on Linux and hope that this also works on macOS
1. Adapt the MSBuild builds to use the vcpkg version

The current libraries in [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) has unclear origins, but I read in [this issue](https://github.com/ellson/MOTHBALLED-graphviz/issues/1218#issuecomment-323947968) that many probably comes from https://windows.php.net/downloads/.

My plan is to add a new `vcpkg` top level directory to [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) so that libraries can be installed there directly without the need to figure out which file to put where in the old structure. In future, we can replace other outdated packages in the old structure with new ones installed with `vcpkg`.

**I would very much like to hear your comments on this and the above.**

As a reference, these are the `getopt` files that are installed with vcpkg:

```
~/vcpkg/vcpkg-export-20200910-082739$ find . -type f
./.vcpkg-root
./installed/vcpkg/info/getopt-win32_0.1_x86-windows.list
./installed/vcpkg/info/getopt_0_x86-windows.list
./installed/x86-windows/bin/getopt.dll
./installed/x86-windows/bin/getopt.pdb
./installed/x86-windows/debug/bin/getopt.dll
./installed/x86-windows/debug/bin/getopt.pdb
./installed/x86-windows/debug/lib/getopt.lib
./installed/x86-windows/include/getopt.h
./installed/x86-windows/lib/getopt.lib
./installed/x86-windows/share/getopt/vcpkg_abi_info.txt
./installed/x86-windows/share/getopt-win32/copyright
./installed/x86-windows/share/getopt-win32/vcpkg_abi_info.txt
./scripts/buildsystems/msbuild/applocal.ps1
./scripts/buildsystems/msbuild/vcpkg-general.xml
./scripts/buildsystems/msbuild/vcpkg.props
./scripts/buildsystems/msbuild/vcpkg.targets
./scripts/buildsystems/vcpkg.cmake
./scripts/cmake/vcpkg_get_windows_sdk.cmake
```"
1424,"2.46.0","{lib/vmalloc/vmbest.c}","{lib/vmalloc/vmstat.c,lib/vmalloc/vmtrace.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmdebug.c,lib/vmalloc/vmregion.c,lib/vmalloc/malloc.c,lib/vmalloc/vmset.c,lib/vmalloc/vmprofile.c,lib/vmalloc/vmsegment.c,lib/vmalloc/vmdisc.c,lib/vmalloc/vmwalk.c,lib/vmalloc/vmlast.c,lib/vmalloc/vmpool.c}","hi
I am trying to install graphviz with the command:
brew isntall graphviz

Here's the error I get:

==> ./configure --prefix=/home/wjs/.linuxbrew/Cellar/graphviz/2.40.1 --without-qt --with-quartz --disable-php --disable-swig --without-pangocairo --without-freetype2 --without-x --without-rsvg
==> make install

> Last 15 lines from /home/wangjingsong/.cache/Homebrew/Logs/graphviz/02.make:
> malloc.c:331:15: error: return type is an incomplete type
>  struct mstats mstats(void)
>                ^
> malloc.c: In function 'mstats':
> malloc.c:334:19: error: storage size of 'ms' isn't known
>      struct mstats ms;
>                    ^
> make[3]: *** [malloc.lo] Error 1
> make[3]: *** Waiting for unfinished jobs....
> make[3]: Leaving directory `/tmp/graphviz-20180912-12028-15brl3t/graphviz-2.40.1/lib/vmalloc'
> make[2]: *** [install-recursive] Error 1
> make[2]: Leaving directory `/tmp/graphviz-20180912-12028-15brl3t/graphviz-2.40.1/lib'
> make[1]: *** [install-recursive] Error 1
> make[1]: Leaving directory `/tmp/graphviz-20180912-12028-15brl3t/graphviz-2.40.1'
> make: *** [install] Error 2"
1740,"2.49.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1748,"2.46.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1697,"5.0.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1868,"2.50.0","{lib/common/xml.c,plugin/core/gvrender_core_map.c}","{lib/common/xml.c,plugin/core/gvrender_core_map.c}","The current code base (608aab7b989cf33b48145e1c78abdd73f598fe44) has four implementations (that I have found so far) of XML string escaping:
* `xml_string` and friends in cmd/tools/gv2gxl.c
* `xml_string` and friends in cmd/smyrna/smyrna_utils.c
* `xml_string` and friends in lib/common/labels.c
* `html_string` and friends in plugin/core/gvrender_core_vml.c

The identical comments surrounding these implementations make it clear they were once copy-pasted from the same source. The lib/common one looks like the original and a comment in Smyrna even explains why this situation exists:

```c
/* many of these functions are available in libcommon.
 * We cannot use those because dependencies cause a great
 * deal of libcommon to be brought in, which complicates
 * and makes possible conflicts as some parts of libcommon
 * rely on not using libcgraph.
 */
```

As far as I'm aware, this situation no longer exists. libcgraph is the only graph library supported and there is no sensible way to use libcommon without libcgraph. However, a naive attempt to undo the Smyrna code duplication fails because:
1. A number of libcommon headers rely on something else being #included prior to them. lib/common/utils.h that contains the libcommon prototype for `xml_string` cannot be #included without other libcommon headers being #included prior to it.
2. A number of libcommon typedefs/prototypes conflict with other ones in Smyrna headers.

The situation is pretty messy and may require diagnosing and undoing the conflicting definitions one-by-one. But I think it's worth doing in service of paring back the number of XML string escaping variants we're maintaining to 1."
1852,"4.0.0","{}","{cmd/tools/gvpack.c}","
In https://gitlab.com/graphviz/graphviz/-/merge_requests/1592 and https://gitlab.com/graphviz/graphviz/-/merge_requests/1608 many tools were adapted to GNU getopt. See e.g. https://gitlab.com/graphviz/graphviz/-/merge_requests/1592/diffs?commit_id=2c6420be0dfc252b7db4207accf40af2170c50e8 or https://gitlab.com/graphviz/graphviz/-/merge_requests/1608/diffs?commit_id=81852ca7b3eea614752c8d38230562a9027efe89.

macOS however, does not use GNU getopt, but BSD getopt where the `optopt` variable behaves slightly differently and the code prior the the changes mentioned above is the correct one. Therefore, the code needs to be different depending on which OS it it running on.

The tools that are currently failing the tools test on macOS are:
* bcomps
* ccomps
* cluster
* dijkstra
* edgepaint
* gc
* gvcolor
* gvmap
* gvpack
* mm2gv
* nop
* sccmap
* tred

All of them may not have been working on macOS before, but at least some of them did.

This problem should be fixed before the next stable release.

## Steps to reproduce

E.g. `bcomps -?`

## Expected Behaviour

Show usage and exit status zero.

## Actual Behaviour

Output:
```
bcomps: option -? unrecognized
Usage: bcomps [-stvx?] [-o<out template>] <files>
  -o - output file template
  -s - don't print components
  -t - emit block-cutpoint tree
  -v - verbose
  -x - external
  -? - print usage
If no files are specified, stdin is used
```
Exit status 1.

## OS Version

macOS Catalina Version 10.15.7

## Graphviz Version

dot - graphviz version 2.44.2~dev.20201016.1439 (20201016.1439)

Home-built from aa165722db3b556213622727d45bb08d95d3bac7."
1422,"2.46.1","{lib/ast/sfstr.h}","{lib/ast/sfstr.h}","graphviz-2.40.1/lib/sfio/features/sfio does benchmarking at compile time to decide which version of a function to use.

It does this for 3 functions: memchr memccpy mmap

This creates variations in build results across the openSUSE build workers that vary in type of system and parallel build load.
See https://reproducible-builds.org/ for why this matters.

Would be nice to have a cleaner way of disabling that than the attached patch
[reproducible.patch](/uploads/f172041f98f03b7f2eb2d3901524b3f8/reproducible.patch)"
1573,"2.49.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1785,"2.47.1","{lib/neatogen/closest.h,lib/ast/strcopy.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,tclpkg/gv/gv_builtins.c,cmd/dot/no_builtins.c,lib/fdpgen/comp.h}","{lib/common/hpglgen.c,lib/ast/strcopy.c,plugin/core/gvrender_core_mif.c,tclpkg/tcldot/no_builtins.c,lib/common/vtxgen.c,lib/glcomp/glCompTrackBar.h,cmd/smyrna/btree.c,lib/neatogen/pca.h,plugin/core/gvrender_core_hpgl.c,lib/glcomp/glCompTrackBar.c,cmd/smyrna/btree.h,plugin/core/gvrender_core_dia.c,lib/common/mifgen.c,lib/sfio/sfexit.c,lib/common/diagen.c,lib/common/picgen.c,cmd/dot/no_builtins.c,cmd/tools/gvpack_builtins.c,plugin/core/gvrender_core_vtx.c,lib/common/mpgen.c,cmd/smyrna/topviewdata.h,lib/neatogen/closest.h,lib/glcomp/glcomptext.c,cmd/smyrna/filter.c,lib/sfdpgen/layout_similarity.c,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,lib/glcomp/glcomptext.h,lib/circogen/stack.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1940,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1242,"2.49.0","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/ast/pathgetlink.c,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,lib/gvc/gvcontext.c}","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/vmalloc/vmbest.c,lib/sfdpgen/sfdpinternal.h,lib/vmalloc/vmhdr.h,cmd/dot/no_builtins.c,lib/ast/pathgetlink.c,lib/ast/pathexists.c,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,lib/gvc/gvcontext.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1868,"2.47.3","{plugin/core/gvrender_core_map.c}","{plugin/core/gvrender_core_map.c}","The current code base (608aab7b989cf33b48145e1c78abdd73f598fe44) has four implementations (that I have found so far) of XML string escaping:
* `xml_string` and friends in cmd/tools/gv2gxl.c
* `xml_string` and friends in cmd/smyrna/smyrna_utils.c
* `xml_string` and friends in lib/common/labels.c
* `html_string` and friends in plugin/core/gvrender_core_vml.c

The identical comments surrounding these implementations make it clear they were once copy-pasted from the same source. The lib/common one looks like the original and a comment in Smyrna even explains why this situation exists:

```c
/* many of these functions are available in libcommon.
 * We cannot use those because dependencies cause a great
 * deal of libcommon to be brought in, which complicates
 * and makes possible conflicts as some parts of libcommon
 * rely on not using libcgraph.
 */
```

As far as I'm aware, this situation no longer exists. libcgraph is the only graph library supported and there is no sensible way to use libcommon without libcgraph. However, a naive attempt to undo the Smyrna code duplication fails because:
1. A number of libcommon headers rely on something else being #included prior to them. lib/common/utils.h that contains the libcommon prototype for `xml_string` cannot be #included without other libcommon headers being #included prior to it.
2. A number of libcommon typedefs/prototypes conflict with other ones in Smyrna headers.

The situation is pretty messy and may require diagnosing and undoing the conflicting definitions one-by-one. But I think it's worth doing in service of paring back the number of XML string escaping variants we're maintaining to 1."
1940,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
2057,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
1757,"2.46.0","{lib/vmalloc/vmopen.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmclose.c,lib/vmalloc/vmclear.c,lib/vmalloc/test.c}","{lib/vmalloc/vmstat.c,lib/vmalloc/vmopen.c,lib/vmalloc/vmtrace.c,lib/vmalloc/vmbest.c,lib/vmalloc/vmdebug.c,lib/vmalloc/vmregion.c,lib/vmalloc/vmclose.c,lib/vmalloc/vmclear.c,lib/vmalloc/malloc.c,lib/vmalloc/vmset.c,lib/vmalloc/vmprofile.c,lib/vmalloc/vmsegment.c,lib/vmalloc/vmdisc.c,lib/vmalloc/vmwalk.c,lib/vmalloc/vmlast.c,lib/vmalloc/vmdcheap.c,lib/vmalloc/vmpool.c,lib/vmalloc/vmprivate.c}","## Steps to reproduce

simply run `gvpr` with musl-libc, segfault, 2.44.1

## Additional info

It seems that the stub vmalloc from lib/vmalloc/malloc.c overrides the musl-libc `malloc`(linker and loader things). So `malloc` in gvpr always return NULL.

And everything works if I add `-Dcray` to CFLAGS/CXXFLAGS to disable those stubs in lib/vmalloc/{malloc.c,vmbest.c}. You can check my working building sciprts [here](https://github.com/xhebox/noname-linux/blob/master/ports/graphviz/Pkgfile)."
2118,"2.49.2","{plugin/core/ps.h}","{}",""
45,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1785,"7.0.6","{lib/neatogen/overlap.h,lib/neatogen/overlap.c,lib/circogen/blockpath.h,cmd/smyrna/gui/glcompui.c}","{lib/neatogen/overlap.h,lib/circogen/deglist.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/sfdpgen/PriorityQueue.c,cmd/smyrna/gui/glcompui.c,lib/sfdpgen/PriorityQueue.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1682,"7.1.0","{lib/dotgen/position.c}","{lib/dotgen/position.c}","Hello graphviz team,

As part of our fuzzing efforts at Google, we have identified an issue affecting
graphviz (tested with revision * master e55af3cce23ddcdeefb42b75d115ee23e86e456b).

To reproduce, we are attaching a Dockerfile which compiles the project with
LLVM, taking advantage of the sanitizers that it offers. More information about
how to use the attached Dockerfile can be found here:
https://docs.docker.com/engine/reference/builder/

Instructions:
`unzip artifacts_150610136.zip`
`docker build --build-arg SANITIZER=address --tag=autofuzz-graphviz-150610136 autofuzz_150610136`
`docker run --entrypoint /fuzzing/repro.sh --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc autofuzz-graphviz-150610136 """" /tmp/poc`
`docker run --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc -it autofuzz-graphviz-150610136`

Alternatively, and depending on the bug, you could use gcc, valgrind or other
instrumentation tools to aid in the investigation. The sanitizer error that we
encountered is here:

```
INFO: Seed: 2527279755
/fuzzing/graphviz/parser_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
Executed /tmp/bf492754-0826-45f6-b402-3c40c2322f27 in 1 ms
***
*** NOTE: fuzzing was not performed, you have only
***       executed the target code on a fixed set of inputs.
***
INFO: Seed: 2560428046
/fuzzing/graphviz/render_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
utils.c:175:16: runtime error: signed integer overflow: 1946157056 + 1946157056 cannot be represented in type 'int'
    #0 0x7f1641b0102c in UF_union /fuzzing/graphviz/lib/common/utils.c:175:16
    #1 0x7f164185795a in collapse_rankset /fuzzing/graphviz/lib/dotgen/rank.c:117:6
    #2 0x7f16418560ec in collapse_sets /fuzzing/graphviz/lib/dotgen/rank.c:289:3
    #3 0x7f1641855d14 in dot1_rank /fuzzing/graphviz/lib/dotgen/rank.c:546:5
    #4 0x7f1641855a3f in dot_rank /fuzzing/graphviz/lib/dotgen/rank.c:580:2
    #5 0x7f164183024a in dotLayout /fuzzing/graphviz/lib/dotgen/dotinit.c:311:9
    #6 0x7f164182fb3e in doDot /fuzzing/graphviz/lib/dotgen/dotinit.c:463:2
    #7 0x7f164182fac9 in dot_layout /fuzzing/graphviz/lib/dotgen/dotinit.c:509:22
    #8 0x7f1641a80482 in gvLayoutJobs /fuzzing/graphviz/lib/gvc/gvlayout.c:85:2
    #9 0x7f1641a8daa5 in gvLayout /fuzzing/graphviz/lib/gvc/gvc.c:65:9
    #10 0x4522a2 in LLVMFuzzerTestOneInput /fuzzing/graphviz/./graphviz_render_fuzzer.cc:23:18
    #11 0x4364a3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x4364a3)
    #12 0x428ac3 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x428ac3)
    #13 0x42cfa2 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/fuzzing/graphviz/render_fuzzer+0x42cfa2)
    #14 0x4287db in main (/fuzzing/graphviz/render_fuzzer+0x4287db)
    #15 0x7f1640f4309a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
    #16 0x407c89 in _start (/fuzzing/graphviz/render_fuzzer+0x407c89)
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior utils.c:175:16 in 

```

We will gladly work with you so you can successfully confirm and reproduce this
issue. Do let us know if you have any feedback surrounding the documentation.

Once you have reproduced the issue, we'd appreciate to learn your expected
timeline for an update to be released. With any fix, please attribute the report
to ""Google Autofuzz project"".

We are also pleased to inform you that your project is eligible for inclusion to
the OSS-Fuzz project, which can provide additional continuous fuzzing, and
encourage you to investigate integration options.


Don't hesitate to let us know if you have any questions!

Google AutoFuzz Team
[artifacts_150610136.zip](/uploads/a77494d541fed662376294998e4914a5/artifacts_150610136.zip)"
1242,"5.0.0","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/block.h,tclpkg/gv/gv_builtins.c,lib/ortho/partition.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1242,"4.0.0","{plugin/poppler/gvloadimage_poppler.c,lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,plugin/gdk/gvdevice_gdk.c,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h,cmd/tools/convert.h}","{plugin/poppler/gvloadimage_poppler.c,lib/circogen/circpos.h,lib/sfdpgen/sfdpinternal.h,plugin/glitz/gvdevice_glitz.c,plugin/glitz/gvplugin_glitz.c,lib/sfio/sftmp.c,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/sfio/sfresize.c,lib/neatogen/pca.h,lib/circogen/block.h,cmd/tools/gvpack.c,lib/cgraph/agxbuf.c,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,cmd/dot/no_builtins.c,lib/ast/pathgetlink.c,lib/dotgen/dot.h,plugin/gdk/gvdevice_gdk.c,lib/neatogen/closest.h,lib/circogen/blockpath.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/circogen/blocktree.h,lib/fdpgen/comp.h,cmd/tools/convert.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1832,"2.48.0","{}","{lib/vpsc/remove_rectangle_overlap.cpp}","I thought we should have a proper issue to track progress on this, even if we can't start until December 2020.

Context:

https://forum.graphviz.org/t/c-c-standards/133/3"
1775,"2.47.1","{}","{lib/common/mifgen.c,plugin/core/gvrender_core_mif.c,lib/common/vtxgen.c,plugin/core/gvrender_core_hpgl.c,plugin/core/gvrender_core_vtx.c}","Graphviz contains three implementations of the function `strcasecmp` and two implementations of the function `strncasecmp`. It looks like these were added as there was no cross-platform alternative at the time.

At the time of writing, every major platform I'm aware of implements `strcasecmp` and `strncasecmp` except Windows. Windows also has this functionality, but under the names `_stricmp` and `_strnicmp`.

I propose we remove these implementations and replace them with a small compatibility header that provides `strcasecmp` and `strncasecmp` on Windows by redirecting to the alternatives. I'm creating this issue to see what others' opinions are. Maybe it would be better to hold off until we move to C99 in December 2020? I don't believe this will make a difference because these two functions are not standardized in C99 but rather in POSIX 2001, but maybe someone has a different opinion."
1543,"8.0.1","{lib/gvc/gvcontext.c}","{lib/gvc/gvcontext.c}","Hey!

First I would to say you thanks you for this amazing library.

However, I found a big memory leak when I tried to use gvContext to render a graph on a file.
```c
==18682==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 3543 byte(s) in 1 object(s) allocated from:
    #0 0x7f26c1c28389 in __interceptor_malloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86
    #1 0x7f26c196199d in gmalloc (/usr/lib/libgvc.so.6+0x3799d)

Indirect leak of 143538 byte(s) in 2287 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c191bcee in agalloc (/usr/lib/libcgraph.so.6+0x9cee)

Indirect leak of 2952 byte(s) in 41 object(s) allocated from:
    #0 0x7f26c1c28389 in __interceptor_malloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86
    #1 0x7f26c190cc1c in dtopen (/usr/lib/libcdt.so.5+0x2c1c)

Indirect leak of 2224 byte(s) in 50 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c191bcee in agalloc (/usr/lib/libcgraph.so.6+0x9cee)
    #2 0x60800000019f  (<unknown module>)

Indirect leak of 168 byte(s) in 4 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c191bcee in agalloc (/usr/lib/libcgraph.so.6+0x9cee)
    #2 0x5592a8991e89 in test /home/test.c:12

Indirect leak of 136 byte(s) in 1 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c1919cd8 in agopen (/usr/lib/libcgraph.so.6+0x7cd8)
    #2 0x5592a898eb2e in test /home/test.c:136
    #3 0x42724145345064  (<unknown module>)

Indirect leak of 112 byte(s) in 1 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c1919be9 in agopen (/usr/lib/libcgraph.so.6+0x7be9)

Indirect leak of 112 byte(s) in 2 object(s) allocated from:
    #0 0x7f26c1c28801 in __interceptor_realloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:105
    #1 0x7f26c191bc95  (/usr/lib/libcgraph.so.6+0x9c95)

SUMMARY: AddressSanitizer: 152785 byte(s) leaked in 2387 allocation(s).
```

with only the following code
```c
GVC_t *gvc;
gvc = gvContext();
gvFreeContext(gvc);
```

- os : Linux manjaro-i3 4.19.45-1-MANJARO May 22 17:16:41 UTC 2019 x86_64 GNU/Linux
- graphviz version: 2.40.1-15 

Did I do something wrong ?
... or does this library really leak?

Thank you in advance for your answer."
1798,"2.49.1","{lib/glcomp/glcomptextpng.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,lib/fdpgen/fdp.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,cmd/lefty/cs2l/cs2l.h,lib/neatogen/pca.h,lib/circogen/block.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,tclpkg/tkstubs/tkInt.h,lib/common/htmllex.h,lib/neatogen/closest.h,cmd/smyrna/hotkeymap.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h}","{lib/glcomp/glcomptextpng.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/sfdpgen/sfdpinternal.h,lib/fdpgen/fdp.h,lib/pathplan/solvers.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,tclpkg/tcldot/no_builtins.c,cmd/lefty/cs2l/cs2l.h,lib/circogen/block.h,lib/neatogen/pca.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,tclpkg/tkstubs/tkInt.h,lib/common/htmllex.h,lib/neatogen/closest.h,cmd/smyrna/hotkeymap.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
205,"7.0.3","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
1603,"2.49.0","{}","{lib/vmalloc/vmbest.c,lib/vmalloc/vmhdr.h}","On FreeBSD sbrk is required, however arm64 and RISC-V don't implement this. Previously I was able to work around this by defining `_std_malloc`, however since 7beb94c8a2 This has been removed."
1682,"7.0.4","{lib/dotgen/position.c}","{lib/dotgen/position.c}","Hello graphviz team,

As part of our fuzzing efforts at Google, we have identified an issue affecting
graphviz (tested with revision * master e55af3cce23ddcdeefb42b75d115ee23e86e456b).

To reproduce, we are attaching a Dockerfile which compiles the project with
LLVM, taking advantage of the sanitizers that it offers. More information about
how to use the attached Dockerfile can be found here:
https://docs.docker.com/engine/reference/builder/

Instructions:
`unzip artifacts_150610136.zip`
`docker build --build-arg SANITIZER=address --tag=autofuzz-graphviz-150610136 autofuzz_150610136`
`docker run --entrypoint /fuzzing/repro.sh --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc autofuzz-graphviz-150610136 """" /tmp/poc`
`docker run --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc -it autofuzz-graphviz-150610136`

Alternatively, and depending on the bug, you could use gcc, valgrind or other
instrumentation tools to aid in the investigation. The sanitizer error that we
encountered is here:

```
INFO: Seed: 2527279755
/fuzzing/graphviz/parser_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
Executed /tmp/bf492754-0826-45f6-b402-3c40c2322f27 in 1 ms
***
*** NOTE: fuzzing was not performed, you have only
***       executed the target code on a fixed set of inputs.
***
INFO: Seed: 2560428046
/fuzzing/graphviz/render_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
utils.c:175:16: runtime error: signed integer overflow: 1946157056 + 1946157056 cannot be represented in type 'int'
    #0 0x7f1641b0102c in UF_union /fuzzing/graphviz/lib/common/utils.c:175:16
    #1 0x7f164185795a in collapse_rankset /fuzzing/graphviz/lib/dotgen/rank.c:117:6
    #2 0x7f16418560ec in collapse_sets /fuzzing/graphviz/lib/dotgen/rank.c:289:3
    #3 0x7f1641855d14 in dot1_rank /fuzzing/graphviz/lib/dotgen/rank.c:546:5
    #4 0x7f1641855a3f in dot_rank /fuzzing/graphviz/lib/dotgen/rank.c:580:2
    #5 0x7f164183024a in dotLayout /fuzzing/graphviz/lib/dotgen/dotinit.c:311:9
    #6 0x7f164182fb3e in doDot /fuzzing/graphviz/lib/dotgen/dotinit.c:463:2
    #7 0x7f164182fac9 in dot_layout /fuzzing/graphviz/lib/dotgen/dotinit.c:509:22
    #8 0x7f1641a80482 in gvLayoutJobs /fuzzing/graphviz/lib/gvc/gvlayout.c:85:2
    #9 0x7f1641a8daa5 in gvLayout /fuzzing/graphviz/lib/gvc/gvc.c:65:9
    #10 0x4522a2 in LLVMFuzzerTestOneInput /fuzzing/graphviz/./graphviz_render_fuzzer.cc:23:18
    #11 0x4364a3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x4364a3)
    #12 0x428ac3 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x428ac3)
    #13 0x42cfa2 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/fuzzing/graphviz/render_fuzzer+0x42cfa2)
    #14 0x4287db in main (/fuzzing/graphviz/render_fuzzer+0x4287db)
    #15 0x7f1640f4309a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
    #16 0x407c89 in _start (/fuzzing/graphviz/render_fuzzer+0x407c89)
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior utils.c:175:16 in 

```

We will gladly work with you so you can successfully confirm and reproduce this
issue. Do let us know if you have any feedback surrounding the documentation.

Once you have reproduced the issue, we'd appreciate to learn your expected
timeline for an update to be released. With any fix, please attribute the report
to ""Google Autofuzz project"".

We are also pleased to inform you that your project is eligible for inclusion to
the OSS-Fuzz project, which can provide additional continuous fuzzing, and
encourage you to investigate integration options.


Don't hesitate to let us know if you have any questions!

Google AutoFuzz Team
[artifacts_150610136.zip](/uploads/a77494d541fed662376294998e4914a5/artifacts_150610136.zip)"
1457,"2.47.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
2173,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
1971,"3.0.0","{}","{cmd/mingle/minglemain.c}","cmd/edgepaint/edgepaintmain.c has code like the following:

```c
static void usage (char* cmd, int eval){
  fprintf(stderr, ""Usage: %s <options> gv file with 2D coordinates.\n"", cmd);
  fprintf(stderr, ""Find a color assignment of the edges, such that edges that cross at small angle have as different as posible.\n"");
  fprintf(stderr, ""Options are: \n"");
…
  fprintf(stderr, "" -random_seed=s   : random seed to use. s must be an integer. If s is negative, we do -s iterations with different seeds and pick the best.\n"");
…
  while ((c = getopt(argc, argv, "":vc:a:s:r:l:o:?"")) != -1) {
    switch (c) {
    case 's':
      *check_edges_with_same_endpoint = 1;
      break;
    case 'r':
      if (strncmp(optarg,""andom_seed="", 11) == 0){
  if (sscanf(optarg+11, ""%d"", seed) != 1){
    fprintf(stderr,""-random_seed option must be a positive integer.\n"");
    usage(cmd, 1);
  }
      }
      break;
```

A couple of things to say about this:
1. Passing something like `-rabbit` is a no-op (not rejected, but also doesn't do anything). Unclear if this is intentional.
2. When specifying a non-integer to `-random_seed` the error message contradicts the usage text.

The above is one example of a problematic argument, but every command line parameter to edgepaint has some variant of this situation.

I think this should really not be hand rolling its own (incorrect) implementation of `getopt_long`. We should just call a standard library that provides this (libc on anything non-Windows, and the existing getopt we depend on on Windows)."
2058,"2.49.0","{lib/gvc++/GVContext.h,lib/gvc++/GVRenderData.h,lib/cgraph++/AGraph.h,lib/gvc++/GVLayout.h,lib/gvc++/GVContext.cpp,lib/gvc/gvio.h,lib/cgraph++/AGraph.cpp,lib/gvc++/GVLayout.cpp,lib/gvc++/GVRenderData.cpp}","{lib/gvc/gvio.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1934,"4.0.0","{}","{cmd/tools/gvpack.c}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
19,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
975,"5.0.1","{}","{cmd/lefty/common.h,cmd/lefty/aix_mods/common.h}","Ported Issue from Mantis
Original ID: 769
Reported By: Sami Farin

SEVERITY: MAJOR
Submitted: 2007-08-25 16:40:27

OS: X86-LINUX-FC8

VERSION: 2.14.1
## DESCRIPTION

<br>

Does not compile.
I have gcc-4.1.2-19 and glibc-2.6-4 on IA32 Fedora.
<CD>
make[3]: Entering directory `/usr/src/redhat/BUILD/graphviz-2.14.1/lib/vmalloc'
/bin/sh ../../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I../..  -I../../lib/ast -I../../lib/sfio   -O2 -g -march=i386 -mcpu=i686 -ffast-math -Wno-unknown-pragmas -Wstrict-prototypes -Wpointer-arith -Wall -ffast-math -c -o malloc.lo malloc.c
 gcc -DHAVE_CONFIG_H -I. -I../.. -I../../lib/ast -I../../lib/sfio -O2 -g -march=i386 -mcpu=i686 -ffast-math -Wno-unknown-pragmas -Wstrict-prototypes -Wpointer-arith -Wall -ffast-math -c malloc.c  -fPIC -DPIC -o .libs/malloc.o
malloc.c: In function 'mallopt':
malloc.c:368: warning: unused parameter 'cmd'
malloc.c:368: warning: unused parameter 'value'
malloc.c: At top level:
malloc.c:408: error: return type is an incomplete type
malloc.c: In function 'mstats':
malloc.c:410: error: storage size of 'ms' isn't known
malloc.c:421: warning: 'return' with a value, in function returning void
malloc.c:410: warning: unused variable 'ms'
make[3]: *** [malloc.lo] Error 1
make[3]: Leaving directory`/usr/src/redhat/BUILD/graphviz-2.14.1/lib/vmalloc'
make[2]: **\* [all-recursive] Error 1
make[2]: Leaving directory `/usr/src/redhat/BUILD/graphviz-2.14.1/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory`/usr/src/redhat/BUILD/graphviz-2.14.1'
make: **\* [all] Error 2
</CD>
## ADDITIONAL INFORMATION

Offending file at
http://safari.iki.fi/graphviz-malloc.i
"
19,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
1549,"2.44.1","{}","{lib/agutil/nodeq.c,lib/agraph/node.c,lib/agutil/dynattr.c,lib/agraph/tester.c,lib/agraph/flatten.c,lib/agraph/pend.c,lib/agraph/imap.c,lib/agraph/obj.c,lib/agraph/id.c,lib/agraph/main.c,lib/agutil/agutil.h,lib/agraph/attr.c,lib/agraph/edge.c,lib/agraph/io.c,lib/agraph/aghdr.h,lib/agraph/refstr.c,lib/agraph/graph.c,lib/agraph/subg.c,lib/agraph/rec.c,lib/agraph/utils.c,lib/agraph/dotdge.c,lib/agraph/mem.c,lib/agraph/write.c,lib/agraph/cmpnd.c,lib/agraph/apply.c,lib/agraph/agraph.h,lib/agraph/agerror.c}","Hi all,

In the source code, there are two graph packages:

* lib/agraph
* lib/cgraph

Looks like cgraph is documented [here](https://graphviz.gitlab.io/_pages/pdf/cgraph.pdf) (there are many types defined there that start with `ag` though).

Anyway, what's the differnce between `lib/agraph` and `lib/cgraph` though? Are there any docs for Agraph too?"
1854,"3.0.0","{cmd/dotty/mswin32/dotty.c,cmd/mingle/minglemain.cpp,cmd/lneato/mswin32/lneato.c,lib/mingle/ink.cpp,lib/mingle/agglomerative_bundling.cpp}","{}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
1457,"2.49.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1713,"2.49.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
45,"7.0.3","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
2058,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
2338,"8.0.1","{lib/dotgen/position.c}","{lib/dotgen/position.c}","When building with LTO enabled, the compiler notices:

```
[ 84%] Linking C executable gvpr
/tmp/tmp.0FKCznWrdj/graphviz/lib/gvpr/../sfio/sfio.h:174:29: warning: type of ‘sfstderr’ does not match original declaration [-Wlto-type-mismatch]
  174 |     SFIO_API extern Sfio_t *sfstderr;
      |                             ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:34:9: note: ‘sfstderr’ was previously declared here
   34 | Sfio_t *sfstderr = &_Sfstderr;
      |         ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:34:9: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
/tmp/tmp.0FKCznWrdj/graphviz/lib/gvpr/../sfio/sfio.h:172:29: warning: type of ‘sfstdin’ does not match original declaration [-Wlto-type-mismatch]
  172 |     SFIO_API extern Sfio_t *sfstdin;
      |                             ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:32:9: note: ‘sfstdin’ was previously declared here
   32 | Sfio_t *sfstdin = &_Sfstdin;
      |         ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:32:9: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
/tmp/tmp.0FKCznWrdj/graphviz/lib/gvpr/../sfio/sfio.h:173:29: warning: type of ‘sfstdout’ does not match original declaration [-Wlto-type-mismatch]
  173 |     SFIO_API extern Sfio_t *sfstdout;
      |                             ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:33:9: note: ‘sfstdout’ was previously declared here
   33 | Sfio_t *sfstdout = &_Sfstdout;
      |         ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:33:9: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
```

This is sort of analogous to a violation of C++’s One Definition Rule (ODR). What’s happening is that the definition of the underlying struct of the typedef `Sfio_t`, `_sfio_s`, is seen twice, once with `_SFIO_PRIVATE` defined and once without. So different parts of the compilation see a different struct behind `Sfio_t`. Normally the compiler is blind to this because the differences occur between translation units. But LTO allows it to see across this boundary.

The risk of a problem here is relatively low (most `Sfio_t` usage is by pointer only), but we should probably address this for the sake of avoiding future miscompilations as compiler optimizations become more aggressive."
2058,"6.0.1","{lib/edgepaint/lab_gamut.h,lib/gvc++/GVRenderData.cpp}","{lib/edgepaint/lab_gamut.h,lib/gvc++/GVRenderData.cpp}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1753,"7.0.6","{lib/neatogen/overlap.c,cmd/smyrna/gui/glcompui.c}","{lib/circogen/deglist.c,lib/neatogen/overlap.c,cmd/smyrna/gui/glcompui.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
1697,"2.49.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1798,"2.47.0","{lib/ast/sfstr.h,lib/fdpgen/fdp.h}","{lib/ast/sfstr.h,lib/ast/strton.c,lib/fdpgen/fdp.h,cmd/smyrna/topviewdata.c}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1742,"2.49.2","{lib/rbtree/misc.c}","{lib/rbtree/misc.c}","lib/rbtree uses `setjmp`/`longjmp` to implement exception-style handling of allocation failures. Of the three call sites of `setjmp`, two return immediately. The remaining one in `RBTreeCreate` looks like this (lib/rbtree/red_black_tree.c:38-47):

```c
38   rb_red_blk_tree* newTree = NULL;
39   rb_red_blk_node* temp;
40
41   if (setjmp(rb_jbuf)) {
42     if (newTree) {
43       if (newTree->nil) free (newTree->nil);
44       free (newTree);
45     }
46     return NULL;
47   }
```

As far back as C89, the standard has the following wording:

> All accessible objects have values as of the time `longjmp` was called, except that the values of objects of automatic storage duration that are local to the function containing the invocation of the corresponding `setjmp` macro that do not have volatile-qualified type and have been changed between the `setjmp` invocation and `longjmp` call are indeterminate.

I have noticed recent versions of GCC (~9 onwards) taking advantage of this clause. I would not be surprised if an optimizing compilation removes the calls to `free` in this block, or even removes the `setjmp` entirely by reasoning backwards that no matching `longjmp` can occur because it would lead to indeterminate reads. Older GCC should warn about this with `-Wclobbered` and newer GCC with `-Wmaybe-unitialized`. I think we should proactively refactor this before someone files a cryptic issue stemming from a corrupted `longjmp`.

We could address this by marking `newTree` `volatile`. However the use of this mechanism is limited enough that I think we should just refactor rbtree to use conventional return codes instead of exception-style."
1798,"7.0.6","{lib/neatogen/overlap.h,lib/neatogen/overlap.c,lib/circogen/blockpath.h,cmd/smyrna/gui/glcompui.c,lib/sfdpgen/sfdp.h}","{lib/neatogen/overlap.h,lib/circogen/deglist.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/sfdpgen/PriorityQueue.c,cmd/smyrna/gui/glcompui.c,lib/sfdpgen/sfdp.h,lib/circogen/deglist.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1836,"7.0.1","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1740,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1242,"2.47.1","{lib/neatogen/closest.h,lib/ast/strcopy.c,tclpkg/tcldot/no_builtins.c,lib/neatogen/pca.h,tclpkg/gv/gv_builtins.c,cmd/dot/no_builtins.c,lib/fdpgen/comp.h}","{lib/common/hpglgen.c,lib/ast/strcopy.c,plugin/core/gvrender_core_mif.c,tclpkg/tcldot/no_builtins.c,lib/common/vtxgen.c,lib/glcomp/glCompTrackBar.h,cmd/smyrna/btree.c,lib/neatogen/pca.h,plugin/core/gvrender_core_hpgl.c,lib/glcomp/glCompTrackBar.c,cmd/smyrna/btree.h,plugin/core/gvrender_core_dia.c,lib/common/mifgen.c,lib/sfio/sfexit.c,lib/common/diagen.c,lib/common/picgen.c,cmd/dot/no_builtins.c,cmd/tools/gvpack_builtins.c,plugin/core/gvrender_core_vtx.c,lib/common/mpgen.c,cmd/smyrna/topviewdata.h,lib/neatogen/closest.h,lib/glcomp/glcomptext.c,cmd/smyrna/filter.c,lib/sfdpgen/layout_similarity.c,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,lib/glcomp/glcomptext.h,lib/circogen/stack.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
205,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
2127,"5.0.1","{}","{cmd/lefty/dot2l/dotlex.c}","From the CI logs for a recent run, https://gitlab.com/graphviz/graphviz/-/pipelines/369360035:

```
[ 35%] [BISON][Exparse] Building parser with bison 3.8
/Users/gitlab/builds/graphviz/graphviz/lib/expr/exparse.y: warning: 4 shift/reduce conflicts [-Wconflicts-sr]
/Users/gitlab/builds/graphviz/graphviz/lib/expr/exparse.y: note: rerun with option '-Wcounterexamples' to generate conflict counterexamples
[ 35%] Generating exparse.c
[ 35%] Building C object lib/expr/CMakeFiles/expr.dir/excc.c.o
In file included from /Users/gitlab/builds/graphviz/graphviz/lib/expr/excc.c:24:
In file included from /Users/gitlab/builds/graphviz/graphviz/lib/expr/exlib.h:126:
/Users/gitlab/builds/graphviz/graphviz/lib/expr/expr.h:274:14: error: conflicting types for 'exerror'
extern void             exerror(const char*, ...);
                        ^
/Users/gitlab/builds/graphviz/graphviz/build/lib/expr/y.tab.h:260:6: note: previous declaration is here
void exerror (const char *msg);
     ^
1 error generated.
```

and for Autotools:

```
bison -y -Wno-yacc -dv --output=grammar.c ../../lib/cgraph/grammar.y
  CC       grammar.lo
In file included from grammar.c:168:
grammar.h:118:6: error: conflicting types for 'aagerror'
void aagerror (const char *msg);
     ^
../../lib/cgraph/grammar.y:26:13: note: previous declaration is here
extern void aagerror(char *);
            ^
1 error generated.
make[3]: *** [grammar.lo] Error 1
make[2]: *** [all-recursive] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all] Error 2
```

This appears to be a side effect of Bison 3.8 becoming available in Homebrew, and CI now installing that instead of 3.7.6. The [Bison changelog](https://github.com/akimd/bison/blob/master/NEWS) has lots of interesting remarks. In particular:

```
  To comply with the latest POSIX standard, in Yacc compatibility mode
  (options `-y`/`--yacc`) Bison now generates prototypes for yyerror and
  yylex.  In some situations, this is breaking compatibility: if the user
  has already declared these functions but with some differences (e.g., to
  declare them as static, or to use specific attributes), the generated
  parser will fail to compile.  To disable these prototypes, #define yyerror
  (to `yyerror`), and likewise for yylex.
```"
1836,"6.0.1","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1457,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
2046,"2.49.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","I want to customize some attributes when generating svg images.for example:
<g id=""CFC72F05-6E77-4772-93C9-0BE9485815E8-02700"" class=""node"" **time=""2021/4/15""** >"
2046,"2.49.0","{lib/gvc++/GVContext.h,lib/gvc++/GVRenderData.h,lib/cgraph++/AGraph.h,lib/gvc++/GVContext.cpp,lib/gvc++/GVLayout.h,lib/cgraph++/AGraph.cpp,lib/gvc++/GVLayout.cpp,lib/gvc++/GVRenderData.cpp}","{}","I want to customize some attributes when generating svg images.for example:
<g id=""CFC72F05-6E77-4772-93C9-0BE9485815E8-02700"" class=""node"" **time=""2021/4/15""** >"
1242,"2.47.0","{lib/ast/sfstr.h,lib/fdpgen/fdp.h}","{lib/ast/sfstr.h,lib/ast/strton.c,lib/fdpgen/fdp.h,cmd/smyrna/topviewdata.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1521,"2.47.0","{lib/ast/sfstr.h}","{lib/ast/sfstr.h}","For various reasons, my compiler always performs optimisations, even without -O.

iffe's ""lib"" check is written in such a way that it gets optimised away entirely, thus causing all such checks to succeed, even when the function is actually not available.

Simply removing the ""static"" keyword from the global `i` variable works."
1544,"7.0.6","{lib/neatogen/overlap.c}","{lib/neatogen/overlap.c}","When building without triangle support, the following function has an invalid signature:
https://gitlab.com/graphviz/graphviz/blob/master/lib/neatogen/overlap.c#L686"
45,"6.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1798,"2.47.1","{lib/glcomp/glcomptextpng.h,lib/gvc/gvio.h,lib/edgepaint/intersection.h,lib/edgepaint/lab_gamut.h,cmd/dot/no_builtins.c,tclpkg/tkstubs/tkInt.h,lib/common/htmllex.h,lib/neatogen/closest.h,lib/ast/strcopy.c,tclpkg/tcldot/no_builtins.c,cmd/lefty/cs2l/cs2l.h,lib/neatogen/pca.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h}","{lib/glcomp/glcomptextpng.h,lib/gvc/gvio.h,lib/common/hpglgen.c,lib/ast/strcopy.c,plugin/core/gvrender_core_mif.c,tclpkg/tcldot/no_builtins.c,cmd/lefty/cs2l/cs2l.h,lib/common/vtxgen.c,lib/glcomp/glCompTrackBar.h,cmd/smyrna/btree.c,lib/neatogen/pca.h,plugin/core/gvrender_core_hpgl.c,lib/glcomp/glCompTrackBar.c,cmd/smyrna/btree.h,plugin/core/gvrender_core_dia.c,lib/common/mifgen.c,lib/sfio/sfexit.c,lib/common/diagen.c,lib/common/picgen.c,lib/edgepaint/lab_gamut.h,lib/edgepaint/intersection.h,cmd/dot/no_builtins.c,cmd/tools/gvpack_builtins.c,plugin/core/gvrender_core_vtx.c,tclpkg/tkstubs/tkInt.h,lib/common/mpgen.c,lib/common/htmllex.h,cmd/smyrna/topviewdata.h,lib/neatogen/closest.h,lib/glcomp/glcomptext.c,cmd/smyrna/filter.c,lib/sfdpgen/layout_similarity.c,tclpkg/gv/gv_builtins.c,lib/circogen/stack.h,lib/fdpgen/comp.h,lib/glcomp/glcomptext.h,cmd/lefty/ws/x11/libfilereq/SF.h,lib/circogen/stack.c,cmd/smyrna/filter.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1933,"2.47.0","{}","{lib/ast/strton.c}","The function `strton` is a `strtol` analogue, but also recognizes various suffixes as multipliers:

```c
/* ...
 *  multiplier: .   pseudo-float (100) + subsequent digits
 *      [bB]    block (512)
 *      [cC]    char (1)
 *      [gG]    giga (1024*1024*1024)
 *      [kK]    kilo (1024)
 *      [mM]    mega (1024*1024)
 */
```

The function appears to do what it says on the box, but its only caller in the Graphviz tree (lib/expr/extoken.c) misuses it:

```c
        if (c == 'u' || c == 'U')
        {
          q = UNSIGNED;
          c = lex(ex);
          exlval.integer = strtoull(s, &e, b);
        }
        else
          exlval.integer = strtoll(s, &e, b);
        if (*e)
        {
          *--e = 1;
          exlval.integer *= strton(e, &e, NiL, 0);
        }
```

This code parses something like ""100k"" by parsing the number itself with `strtoll`, stepping backwards and overwriting the input so it looks like ""101k"", and then re-parsing from offset 2 with `strton`, producing the multiplier `1024` and then final value `102400`.

The example I've just described works, but consider what happens if we try to use the ""pseudo-float"" suffix. An input of ""100.42"" will be parsed by `strtoll` as `100` and then the call to `strton` will yield `142` which is then treated as a multiplier, resulting in `14200`. This is clearly not what the user intended.

My interpretation is that this is broken and we should probably remove the pseudo-float functionality. Given this is the only call to `strton`, I think we should remove this entire function and replace it with a simpler one to parse an optional single character suffix. Note that `strton` also supports numerous suffixes not described in its leading comment."
1457,"2.49.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
2154,"4.0.0","{cmd/tools/gvpack.cpp}","{cmd/tools/gvpack.c}","There are a few pieces of Graphviz that are written in C, but are not usable without linking against libc++/libstdc++. E.g. cmd/mingle/minglemain.c. It seems like nothing is gained from this being in C.

Should we consider porting some of this to C++? In the case of minglemain.c for example, this would allow dropping the use of `agxbuf`s and just using `std::ostringstream`."
2058,"2.49.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1934,"5.0.1","{}","{cmd/lneato/mswin32/lneato.c,cmd/dot/dot_builtins.c}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
1836,"8.0.2","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
205,"6.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
1682,"7.0.5","{lib/dotgen/position.c}","{lib/dotgen/position.c}","Hello graphviz team,

As part of our fuzzing efforts at Google, we have identified an issue affecting
graphviz (tested with revision * master e55af3cce23ddcdeefb42b75d115ee23e86e456b).

To reproduce, we are attaching a Dockerfile which compiles the project with
LLVM, taking advantage of the sanitizers that it offers. More information about
how to use the attached Dockerfile can be found here:
https://docs.docker.com/engine/reference/builder/

Instructions:
`unzip artifacts_150610136.zip`
`docker build --build-arg SANITIZER=address --tag=autofuzz-graphviz-150610136 autofuzz_150610136`
`docker run --entrypoint /fuzzing/repro.sh --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc autofuzz-graphviz-150610136 """" /tmp/poc`
`docker run --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc -it autofuzz-graphviz-150610136`

Alternatively, and depending on the bug, you could use gcc, valgrind or other
instrumentation tools to aid in the investigation. The sanitizer error that we
encountered is here:

```
INFO: Seed: 2527279755
/fuzzing/graphviz/parser_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
Executed /tmp/bf492754-0826-45f6-b402-3c40c2322f27 in 1 ms
***
*** NOTE: fuzzing was not performed, you have only
***       executed the target code on a fixed set of inputs.
***
INFO: Seed: 2560428046
/fuzzing/graphviz/render_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
utils.c:175:16: runtime error: signed integer overflow: 1946157056 + 1946157056 cannot be represented in type 'int'
    #0 0x7f1641b0102c in UF_union /fuzzing/graphviz/lib/common/utils.c:175:16
    #1 0x7f164185795a in collapse_rankset /fuzzing/graphviz/lib/dotgen/rank.c:117:6
    #2 0x7f16418560ec in collapse_sets /fuzzing/graphviz/lib/dotgen/rank.c:289:3
    #3 0x7f1641855d14 in dot1_rank /fuzzing/graphviz/lib/dotgen/rank.c:546:5
    #4 0x7f1641855a3f in dot_rank /fuzzing/graphviz/lib/dotgen/rank.c:580:2
    #5 0x7f164183024a in dotLayout /fuzzing/graphviz/lib/dotgen/dotinit.c:311:9
    #6 0x7f164182fb3e in doDot /fuzzing/graphviz/lib/dotgen/dotinit.c:463:2
    #7 0x7f164182fac9 in dot_layout /fuzzing/graphviz/lib/dotgen/dotinit.c:509:22
    #8 0x7f1641a80482 in gvLayoutJobs /fuzzing/graphviz/lib/gvc/gvlayout.c:85:2
    #9 0x7f1641a8daa5 in gvLayout /fuzzing/graphviz/lib/gvc/gvc.c:65:9
    #10 0x4522a2 in LLVMFuzzerTestOneInput /fuzzing/graphviz/./graphviz_render_fuzzer.cc:23:18
    #11 0x4364a3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x4364a3)
    #12 0x428ac3 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x428ac3)
    #13 0x42cfa2 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/fuzzing/graphviz/render_fuzzer+0x42cfa2)
    #14 0x4287db in main (/fuzzing/graphviz/render_fuzzer+0x4287db)
    #15 0x7f1640f4309a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
    #16 0x407c89 in _start (/fuzzing/graphviz/render_fuzzer+0x407c89)
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior utils.c:175:16 in 

```

We will gladly work with you so you can successfully confirm and reproduce this
issue. Do let us know if you have any feedback surrounding the documentation.

Once you have reproduced the issue, we'd appreciate to learn your expected
timeline for an update to be released. With any fix, please attribute the report
to ""Google Autofuzz project"".

We are also pleased to inform you that your project is eligible for inclusion to
the OSS-Fuzz project, which can provide additional continuous fuzzing, and
encourage you to investigate integration options.


Don't hesitate to let us know if you have any questions!

Google AutoFuzz Team
[artifacts_150610136.zip](/uploads/a77494d541fed662376294998e4914a5/artifacts_150610136.zip)"
1934,"2.47.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
2046,"6.0.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","I want to customize some attributes when generating svg images.for example:
<g id=""CFC72F05-6E77-4772-93C9-0BE9485815E8-02700"" class=""node"" **time=""2021/4/15""** >"
2001,"5.0.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","In order to be able to take advantage of many modern C++ features such as automatic memory managment, it would be useful if Graphviz had a high-level C++ API.

This is spawned from a [discussion at the forum](https://forum.graphviz.org/t/work-going-forward/165/28?u=magjac). I though it might be better to collect discussion about it in one place.

I realize that this is not a priority for the Graphviz project right now, but since I'm working on creating a new test suite written in C++, I will implement parts of such an API anyway."
1457,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1713,"2.47.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1457,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Hi all,

May I please suggest a build for Windows 10 x64?
I tried doing it myself, and it appears to be that many dependencies are missing.
For example: `\graphviz\windows\dependencies\libraries\x64\lib\xml2.lib`.

Thanks. Refael."
1742,"2.47.2","{lib/rbtree/misc.c}","{lib/rbtree/misc.c}","lib/rbtree uses `setjmp`/`longjmp` to implement exception-style handling of allocation failures. Of the three call sites of `setjmp`, two return immediately. The remaining one in `RBTreeCreate` looks like this (lib/rbtree/red_black_tree.c:38-47):

```c
38   rb_red_blk_tree* newTree = NULL;
39   rb_red_blk_node* temp;
40
41   if (setjmp(rb_jbuf)) {
42     if (newTree) {
43       if (newTree->nil) free (newTree->nil);
44       free (newTree);
45     }
46     return NULL;
47   }
```

As far back as C89, the standard has the following wording:

> All accessible objects have values as of the time `longjmp` was called, except that the values of objects of automatic storage duration that are local to the function containing the invocation of the corresponding `setjmp` macro that do not have volatile-qualified type and have been changed between the `setjmp` invocation and `longjmp` call are indeterminate.

I have noticed recent versions of GCC (~9 onwards) taking advantage of this clause. I would not be surprised if an optimizing compilation removes the calls to `free` in this block, or even removes the `setjmp` entirely by reasoning backwards that no matching `longjmp` can occur because it would lead to indeterminate reads. Older GCC should warn about this with `-Wclobbered` and newer GCC with `-Wmaybe-unitialized`. I think we should proactively refactor this before someone files a cryptic issue stemming from a corrupted `longjmp`.

We could address this by marking `newTree` `volatile`. However the use of this mechanism is limited enough that I think we should just refactor rbtree to use conventional return codes instead of exception-style."
1697,"2.47.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1798,"2.49.0","{cmd/gvmap/country_graph_coloring.h,lib/glcomp/glcomptextpng.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/gvc/gvio.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/ast/pathgetlink.c,tclpkg/tkstubs/tkInt.h,lib/pathplan/solvers.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,cmd/lefty/cs2l/cs2l.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h,lib/gvc/gvcontext.c}","{cmd/gvmap/country_graph_coloring.h,lib/glcomp/glcomptextpng.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,lib/gvc/gvio.h,lib/vmalloc/vmbest.c,lib/sfdpgen/sfdpinternal.h,lib/vmalloc/vmhdr.h,cmd/dot/no_builtins.c,lib/ast/pathgetlink.c,lib/ast/pathexists.c,tclpkg/tkstubs/tkInt.h,lib/pathplan/solvers.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,cmd/lefty/cs2l/cs2l.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h,cmd/lefty/ws/x11/libfilereq/SF.h,lib/gvc/gvcontext.c}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1829,"3.0.0","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c}","{cmd/mingle/minglemain.c}","## Steps to reproduce

Install or build a Windows 32-bit MSBuild Release build.

Run `smyrna -?`

## Expected Behaviour

No errors.

## Actual Behaviour

Four pop-ups (in sequence) complaining about missing DLLs:

![image](/uploads/642b8920c1a0ce054854a0b2d6942293/image.png)
![image](/uploads/432d9b3a101104d4f546100566b7bb33/image.png)
![image](/uploads/3d5a0d1dd424ddfbebac9b3d7596ffb2/image.png)
![image](/uploads/1465b8a726be741eb5460178c657b138/image.png)

## OS Version

Windows 10.

## Graphviz Version

dot - graphviz version 2.44.2~dev.20200920.1253 (20200920.1253)

Home-built based on commit 37ee115a779092feabd61ac11f1faec80b955783

## Additional info

The DLLs are missing from https://gitlab.com/graphviz/graphviz-windows-dependencies. The corresponding `.lib` files exist, but they do not *seem* to be static libraries (containing object files), just import libraries (containing symbols to allow the linker to link to a DLL). See [this SO post](https://stackoverflow.com/a/913744/3122101) for more about `.lib` & `.dll`  files.

The `smyrna.vcxproj` contains commands to copy the (nonexistent) DLLs to the output directory, but they fail silently.

I guess it's the same problem in MSBuild Debug builds, but I haven't tried. `smyrna` is not built in CMake builds."
1772,"2.49.0","{}","{lib/vmalloc/vmbest.c,lib/vmalloc/vmhdr.h}","I've been trying to debug the !1472 pipeline failure. So I dutifully checked out the source branch on my local Linux box and ran the CMake build instead of the Autotools build. But to my surprise, the test suite sprayed huge numbers of failures; not just failures related to the changes in that MR.

After some poking around, I realized the CI jobs are all running completely different test suites:
* the Linux jobs run `ci/test.sh`, which runs `python3 -m pytest --junitxml=report.xml tests rtest`
* the Windows Msbuild jobs run `tests/regression_tests/regression_tests.ps1`, which then runs a Python `unittest` test suite
* the Windows CMake jobs run:
  1. CMake-driven tests that call `python shapes.py` in tests/regression_tests/shapes; and
  2. `pytest -s rtest\test_examples.py`

To put it bluntly: this is a complete mess. We have little visibility into what is broken, coverage of the existing tests is difficult to determine, and it's very hard to even add a test and have confidence it will get run.

I don't mean this as an accusation of anyone (I know we're all doing our best), but we need to fix this situation. I spent a couple of hours debugging ""why do my local failures disagree with CI?"" which exhausted all the time I had available today to spend on addressing Graphviz user issues. The build system -- and now test suite -- diversity is gradually grinding progress to a standstill."
19,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","```
make[4]: Entering directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
  CC       _sfclrerr.lo
In file included from ../../../lib/sfio/sfio_t.h:46:0,
                 from ../../../lib/sfio/sfhdr.h:29,
                 from _sfclrerr.c:14:
../../../lib/sfio/sfio.h:292:10: error: operator '&&' has no left operand
 #if _DLL && _DLL_INDIRECT_DATA
          ^
make[4]: *** [_sfclrerr.lo] Error 1
make[4]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio/Sfio_f'
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib/sfio'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/rush/Programowanie/graphviz.git/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/rush/Programowanie/graphviz.git'
make: *** [all] Error 2
```

Here is my config.log: http://x.rushbase.net/53b5e3a857ed75506806af16ce9a63501396abbd/config.log

Here is my configure line:
`./configure --host=i686-w64-mingw32 --enable-shared --disable-static`

Everything seems to detected properly:

```
graphviz-2.35.0 will be compiled with the following:

options:
  graph:         No (disabled deprecated)
  cgraph:        Yes
  digcola:       Yes
  expat:         No (missing library)
  fontconfig:    Yes
  freetype:      Yes
  glut:          No (missing GL/glut.h)
  ann:           No (ANN library not available)
  gts:           No (gts library not available)
  ipsepcola:     No (disabled by default - C++ portability issues)
  ltdl:          No (disabled)
  ortho:         Yes
  sfdp:          Yes
  shared:        Yes
  static:        No (disabled by default)
  qt:            Yes
  x:             No (disabled or unavailable)

commands:
  dot:           Yes (always enabled)
  neato:         Yes (always enabled)
  fdp:           Yes (always enabled)
  circo:         Yes (always enabled)
  twopi:         Yes (always enabled)
  gvpr:          Yes (always enabled)
  gvmap:         Yes (always enabled)
  lefty:         No (missing Xaw headers)
  smyrna:        No (disabled by default - experimental)
  gvedit:        Yes

plugin libraries:
  dot_layout:    Yes (always enabled)
  neato_layout:  Yes (always enabled)
  core:          Yes (always enabled)
  devil:         No (missing library)
  gd:            No (gd headers not found)
  gdiplus:       No (disabled by default - Windows only)
  gdk_pixbuf:    No (disabled)
  ghostscript:   No (missing Xrender)
  glitz:         No (disabled by default - incomplete)
  gtk:           Yes
  lasi:          No (lasi library not available)
  ming:          No (disabled by default - incomplete)
  pangocairo:    Yes
  poppler:       Yes
  quartz:        No (disabled by default - Mac only)
  rsvg:          Yes
  visio:         No (disabled by default - experimental)
  webp:          No (disabled by default - experimental)
  xlib:          No (disabled or unavailable)
```

It seems that sfio seems to be inherently Unix-based .. but I may be mistaken, please advise. I tried following http://www.graphviz.org/doc/winbuild.html but it seems to be more confusing than helpful as all the extra switches should not be necessary with properly configured pkg-config and cross-compilation environment. I believe my environment is proper.

Regards,
Damian"
2173,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
2173,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce
```
./autogen.sh
./configure --disable-shared --enable-static
make
```
## Expected Behaviour

No errors.

## Actual Behaviour

More than 2000 errors like:
```
C:\Users\magja\graphviz\cmd\dot/dot.c:112: undefined reference to `__imp_agbindrec'
```
## OS Version

MinGW on Windows 10. Both these versions:
* MINGW64_NT-10.0-21364 3.2.0-340.x86_64 x86_64
* MINGW64_NT-10.0-17763 3.3.3-341.x86_64 x86_64

## Graphviz Version

bdec223b95573c75c7f0895cf66ca29de3d9339c (2.50.1~dev.20220102.1736)

## Additional info

The reason for these problems is that the `GVDLL` symbol, which is set by `configure` for shared builds but unset for static builds, is not fully respected everywhere in the code base, causing storage-class attribute declarations to be applied also in static builds.

### Unsuccessful build
https://gitlab.com/magjac/graphviz/-/jobs/1936359407

### Successful build in a WIP branch
https://gitlab.com/magjac/graphviz/-/jobs/1935936272"
634,"2.49.2","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","Ported Issue from Mantis
Original ID: 1932
Reported By: Steve Dodier-Lazaro

SEVERITY: MINOR
Submitted: 2010-08-03 09:21:00

OS: _-_-

VERSION: 2.20.2
## DESCRIPTION

<br>

Hello,
<br>

I'm opening this bug because I noticed libgraph is using char\* pretty much everywhere in it's function signatures, even when const char\* (static strings) are expected.
<br>

This is completely transparent in C, but with a modern C++ compiler, it triggers compilation warnings about const char\* being given to the functions instead of char\* if using static strings.
<br>

Since the functions seem to expect static strings and do not seem to modify them, I think they should use const char\* instead.
<br>

Cordially,
SD.
"
1801,"5.0.1","{}","{cmd/lefty/dot2l/dot2l.c}","Related to #1742 and as discussed on #1800, there are further uses of `setjmp` errors paths that access non-volatile local variables with the expectation that they are preserved across a call to `longjmp`. Unfortunately this property is not true.

Rather than trying to audit this and annotate every accessed variable with `volatile`, I propose we simply remove this exception-style control flow. I have not yet assessed how hard this is to do."
1242,"5.0.1","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,tclpkg/gv/gv_builtins.c,lib/ortho/partition.h,lib/circogen/blocktree.h,cmd/smyrna/gui/glcompui.c,lib/fdpgen/comp.h,lib/circogen/edgelist.c,lib/gvc/gvcontext.c}","{lib/circogen/circpos.h,lib/sfdpgen/sfdpinternal.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/neatogen/pca.h,lib/circogen/block.h,cmd/smyrna/gui/glcompui.c,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,cmd/dot/no_builtins.c,lib/dotgen/dot.h,cmd/dot/dot_builtins.c,lib/neatogen/closest.h,lib/circogen/blockpath.h,cmd/lefty/common.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,cmd/lefty/aix_mods/common.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h,lib/circogen/edgelist.c,lib/gvc/gvcontext.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1242,"2.49.1","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/fdpgen/fdp.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/pca.h,lib/circogen/block.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h}","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/fdpgen/fdp.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
2058,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","I thought I'd split off a new issue from #2057 to have a longer term discussion of what is the right way to handle symbol visibility. The remainder of this description is going to assume you have read the following:
* #205
* !1760
* #1940
* https://forum.graphviz.org/t/use-dllimport-dllexport-and-or-a-def-file-on-windows/620
* https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-160
* https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-160
* https://gcc.gnu.org/wiki/Visibility

So Graphviz (or really any C/C++ app+lib project) needs to manage visibility wrt linkage that is *outside* the C and C++ standards. To reiterate and stress that last part, there is currently no way to control this kind of symbol visibility with ISO standardized mechanisms.¹ Here is the ideal state for the end user, using the GCC visibility terms:

| context | symbol | visibility |
|----|----|----|
| compiling libfoo | `bar`, a symbol only used internally in libfoo | internal |
| compiling libfoo | `baz`, a symbol that is part of libfoo’s API | default | 
| compiling foo, an app that links against libfoo | `baz` | hidden |
| compiling foo | a symbol from foo itself | hidden |

There are a number of ways to control symbol visibility:
1. Command line options, e.g. `-fvisibility…`
2. GNU attributes, `__attribute((visibility(…)))`
3. MSVC `__declspec`
4. MSVC defs file

(1) is not useful for controlling symbol-by-symbol visibility. (2) is understood by GCC and Clang, but not MSVC. (3) is understood by GCC and MSVC, but not Clang.² (4) is hard to keep in sync with the source.

So essentially I think what we want to aim for is something like the following in a library’s API header:

```c
#ifdef FOO_EXPORT
#ifdef _WIN32
#define FOO_API __declspec(dllexport)
#elif defined(__GNUC__)
#define FOO_API __attibute__((visibility(""default"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#else
#ifdef _WIN32
#define FOO_API __declspec(dllimport)
#elif defined(__GNUC__)
#define FOO_API __attribute__((visibility(""hidden"")))
#else
#define FOO_API /* nothing; suboptimal build with everything visible */
#endif
#endif
```

where `FOO_EXPORT` is only defined when compiling the library itself. There are some additional complications for C++,³ but for the most part I think this is it. Please comment if you think we should be moving towards something different.

CC @magjac, @compnerd_

¹ Neither `extern` nor `static` is the droid we are looking for.

² However, in practice the GCC interpretation of this is not so useful as e.g. `__declspec(dllimport)` does *not* imply `extern` as it does under MSVC.

³ As https://gcc.gnu.org/wiki/Visibility discusses, things that need RTTI typically need to be visible across SOs."
1785,"2.47.0","{lib/ast/sfstr.h,lib/fdpgen/fdp.h}","{lib/ast/sfstr.h,lib/ast/strton.c,lib/fdpgen/fdp.h,cmd/smyrna/topviewdata.c}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1868,"2.47.2","{lib/gvc/gvio.h}","{lib/gvc/gvio.h}","The current code base (608aab7b989cf33b48145e1c78abdd73f598fe44) has four implementations (that I have found so far) of XML string escaping:
* `xml_string` and friends in cmd/tools/gv2gxl.c
* `xml_string` and friends in cmd/smyrna/smyrna_utils.c
* `xml_string` and friends in lib/common/labels.c
* `html_string` and friends in plugin/core/gvrender_core_vml.c

The identical comments surrounding these implementations make it clear they were once copy-pasted from the same source. The lib/common one looks like the original and a comment in Smyrna even explains why this situation exists:

```c
/* many of these functions are available in libcommon.
 * We cannot use those because dependencies cause a great
 * deal of libcommon to be brought in, which complicates
 * and makes possible conflicts as some parts of libcommon
 * rely on not using libcgraph.
 */
```

As far as I'm aware, this situation no longer exists. libcgraph is the only graph library supported and there is no sensible way to use libcommon without libcgraph. However, a naive attempt to undo the Smyrna code duplication fails because:
1. A number of libcommon headers rely on something else being #included prior to them. lib/common/utils.h that contains the libcommon prototype for `xml_string` cannot be #included without other libcommon headers being #included prior to it.
2. A number of libcommon typedefs/prototypes conflict with other ones in Smyrna headers.

The situation is pretty messy and may require diagnosing and undoing the conflicting definitions one-by-one. But I think it's worth doing in service of paring back the number of XML string escaping variants we're maintaining to 1."
1907,"4.0.0","{}","{lib/cgraph/agxbuf.c}","## Steps to reproduce

```
$ echo ""digraph { A -> B -> C }"" > /tmp/simple.dot
$ dot -Tsvg -Ktwopi /tmp/simple.dot > /tmp/simple-twopi-git.svg
$ # Also run the above on a stable build of 2.44.1
$ diff -u /tmp/simple-twopi-stable.svg /tmp/simple-twopi-git.svg 
--- /tmp/simple-twopi-stable.svg	2020-12-14 01:58:42.310517803 -0800
+++ /tmp/simple-twopi-git.svg	2020-12-14 01:58:56.498488850 -0800
@@ -1,40 +1,40 @@
 <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
 <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN""
  ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"">
-<!-- Generated by graphviz version 2.44.1 (20201121.0304)
+<!-- Generated by graphviz version 2.44.2~dev.20201129.1916 (20201129.1916)
  -->
 <!-- Pages: 1 -->
 <svg width=""62pt"" height=""188pt""
  viewBox=""0.00 0.00 62.00 188.00"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"">
 <g id=""graph0"" class=""graph"" transform=""scale(1 1) rotate(0) translate(4 184)"">
 <polygon fill=""white"" stroke=""transparent"" points=""-4,4 -4,-184 58,-184 58,4 -4,4""/>
-<!-- A -->
+<!-- %3 -->
 <g id=""node1"" class=""node"">
-<title>A</title>
+<title>%3</title>
 <ellipse fill=""none"" stroke=""black"" cx=""27"" cy=""-18"" rx=""27"" ry=""18""/>
 <text text-anchor=""middle"" x=""27"" y=""-14.3"" font-family=""Times,serif"" font-size=""14.00"">A</text>
 </g>
-<!-- B -->
+<!-- %4 -->
 <g id=""node2"" class=""node"">
-<title>B</title>
+<title>%4</title>
 <ellipse fill=""none"" stroke=""black"" cx=""27"" cy=""-90"" rx=""27"" ry=""18""/>
 <text text-anchor=""middle"" x=""27"" y=""-86.3"" font-family=""Times,serif"" font-size=""14.00"">B</text>
 </g>
-<!-- A&#45;&gt;B -->
+<!-- %3&#45;&gt;%4 -->
 <g id=""edge1"" class=""edge"">
-<title>A&#45;&gt;B</title>
+<title>%4:&#45;&gt;%4:</title>
 <path fill=""none"" stroke=""black"" d=""M27,-36.17C27,-43.87 27,-53.03 27,-61.58""/>
 <polygon fill=""black"" stroke=""black"" points=""23.5,-61.59 27,-71.59 30.5,-61.59 23.5,-61.59""/>
 </g>
-<!-- C -->
+<!-- %5 -->
 <g id=""node3"" class=""node"">
-<title>C</title>
+<title>%5</title>
 <ellipse fill=""none"" stroke=""black"" cx=""27"" cy=""-162"" rx=""27"" ry=""18""/>
 <text text-anchor=""middle"" x=""27"" y=""-158.3"" font-family=""Times,serif"" font-size=""14.00"">C</text>
 </g>
-<!-- B&#45;&gt;C -->
+<!-- %4&#45;&gt;%5 -->
 <g id=""edge2"" class=""edge"">
-<title>B&#45;&gt;C</title>
+<title>%5:&#45;&gt;%5:</title>
 <path fill=""none"" stroke=""black"" d=""M27,-108.17C27,-115.87 27,-125.03 27,-133.58""/>
 <polygon fill=""black"" stroke=""black"" points=""23.5,-133.59 27,-143.59 30.5,-133.59 23.5,-133.59""/>
 </g>
```

[simple.dot](/uploads/5d604bf588a1ea296289eee984a7015d/simple.dot)

![simple-twopi-git.svg](/uploads/1079455cbb8bde5b9ced3854a033be33/simple-twopi-git.svg)

![simple-twopi-stable.svg](/uploads/32c0837aa134dbfb2b2fd1bd198fc0a2/simple-twopi-stable.svg)

## Expected Behaviour

Title elements should not have changed between versions. In viewers like chrome, the title is used as a tooltip, and provides accessibility (e.g. when rendered with small fonts).

## Actual Behaviour

Title elements have been replaced with anonymous ids. This likely relates to the fix for #1767

## OS Version

Debian linux.

## Additional info

It's worth noting that running this in plain dot doesn't suffer the same problem, which might indicate why this change hasn't been picked up in regression tests. Under plain, there are still additional : in edge titles. Possibly related to !1527 ?

```
$ diff -u simple-plain-stable.svg simple-plain-git.svg 
--- simple-plain-stable.svg	2020-12-14 10:14:58.000000000 +0000
+++ simple-plain-git.svg	2020-12-14 10:14:59.000000000 +0000
@@ -1,7 +1,7 @@
 <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
 <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN""
  ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"">
-<!-- Generated by graphviz version 2.44.1 (20201121.0304)
+<!-- Generated by graphviz version 2.44.2~dev.20201129.1916 (20201129.1916)
  -->
 <!-- Pages: 1 -->
 <svg width=""62pt"" height=""188pt""
@@ -22,7 +22,7 @@
 </g>
 <!-- A&#45;&gt;B -->
 <g id=""edge1"" class=""edge"">
-<title>A&#45;&gt;B</title>
+<title>A:&#45;&gt;B:</title>
 <path fill=""none"" stroke=""black"" d=""M27,-143.7C27,-135.98 27,-126.71 27,-118.11""/>
 <polygon fill=""black"" stroke=""black"" points=""30.5,-118.1 27,-108.1 23.5,-118.1 30.5,-118.1""/>
 </g>
@@ -34,7 +34,7 @@
 </g>
 <!-- B&#45;&gt;C -->
 <g id=""edge2"" class=""edge"">
-<title>B&#45;&gt;C</title>
+<title>B:&#45;&gt;C:</title>
 <path fill=""none"" stroke=""black"" d=""M27,-71.7C27,-63.98 27,-54.71 27,-46.11""/>
 <polygon fill=""black"" stroke=""black"" points=""30.5,-46.1 27,-36.1 23.5,-46.1 30.5,-46.1""/>
 </g>
```

![simple-plain-git.svg](/uploads/44b38ad937588b3889030ed107986b87/simple-plain-git.svg)

![simple-plain-stable.svg](/uploads/0ae81ae4c68b01535384cbe487b75945/simple-plain-stable.svg)"
2102,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1852,"5.0.1","{}","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c,cmd/lefty/lefty.c}","
In https://gitlab.com/graphviz/graphviz/-/merge_requests/1592 and https://gitlab.com/graphviz/graphviz/-/merge_requests/1608 many tools were adapted to GNU getopt. See e.g. https://gitlab.com/graphviz/graphviz/-/merge_requests/1592/diffs?commit_id=2c6420be0dfc252b7db4207accf40af2170c50e8 or https://gitlab.com/graphviz/graphviz/-/merge_requests/1608/diffs?commit_id=81852ca7b3eea614752c8d38230562a9027efe89.

macOS however, does not use GNU getopt, but BSD getopt where the `optopt` variable behaves slightly differently and the code prior the the changes mentioned above is the correct one. Therefore, the code needs to be different depending on which OS it it running on.

The tools that are currently failing the tools test on macOS are:
* bcomps
* ccomps
* cluster
* dijkstra
* edgepaint
* gc
* gvcolor
* gvmap
* gvpack
* mm2gv
* nop
* sccmap
* tred

All of them may not have been working on macOS before, but at least some of them did.

This problem should be fixed before the next stable release.

## Steps to reproduce

E.g. `bcomps -?`

## Expected Behaviour

Show usage and exit status zero.

## Actual Behaviour

Output:
```
bcomps: option -? unrecognized
Usage: bcomps [-stvx?] [-o<out template>] <files>
  -o - output file template
  -s - don't print components
  -t - emit block-cutpoint tree
  -v - verbose
  -x - external
  -? - print usage
If no files are specified, stdin is used
```
Exit status 1.

## OS Version

macOS Catalina Version 10.15.7

## Graphviz Version

dot - graphviz version 2.44.2~dev.20201016.1439 (20201016.1439)

Home-built from aa165722db3b556213622727d45bb08d95d3bac7."
1422,"2.46.0","{}","{lib/sfio/sfpopen.c,lib/sfio/sfpoll.c}","graphviz-2.40.1/lib/sfio/features/sfio does benchmarking at compile time to decide which version of a function to use.

It does this for 3 functions: memchr memccpy mmap

This creates variations in build results across the openSUSE build workers that vary in type of system and parallel build load.
See https://reproducible-builds.org/ for why this matters.

Would be nice to have a cleaner way of disabling that than the attached patch
[reproducible.patch](/uploads/f172041f98f03b7f2eb2d3901524b3f8/reproducible.patch)"
1854,"8.0.1","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
1748,"2.46.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1851,"4.0.0","{}","{cmd/tools/gvpack.c}","Something I discussed with @magjac, is that it would be nice to separate the pytest test cases into ones only intended for CI and ones intended to be run by both CI and developers. We want to test for the existence of e.g. `mingle` in CI to avoid building a release that does not include it, but it is not an error for the test suite to fail to find this binary when running in a developer's local checkout.

I'd like to factor out all the tests under tests/ and rtest/ that are only relevant for CI, and put them in ci/tests. This way users won't accidentally think they need to run them and will not be confused by spurious failures."
1697,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1876,"2.49.2","{lib/fdpgen/fdp.h}","{lib/fdpgen/fdp.h}","This issue is spawned from point 3) of https://gitlab.com/graphviz/graphviz/-/issues/592#note_447723339.

## Steps to reproduce

`echo 'graph {a}' | fdp`

## Expected Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	a	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## Actual Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	""%3""	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## OS Version

Ubuntu 20.10.

## Graphviz Version

fdp - graphviz version 2.44.2~dev.20201115.0109 (20201115.0109)

## Additional info

Version 2.44.1 works as expected.

fdp, sfdp, neato & twopi has the same problem, while dot, circo, patchwork & osage works as expected."
1876,"2.47.3","{lib/fdpgen/fdp.h}","{lib/fdpgen/fdp.h}","This issue is spawned from point 3) of https://gitlab.com/graphviz/graphviz/-/issues/592#note_447723339.

## Steps to reproduce

`echo 'graph {a}' | fdp`

## Expected Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	a	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## Actual Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	""%3""	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## OS Version

Ubuntu 20.10.

## Graphviz Version

fdp - graphviz version 2.44.2~dev.20201115.0109 (20201115.0109)

## Additional info

Version 2.44.1 works as expected.

fdp, sfdp, neato & twopi has the same problem, while dot, circo, patchwork & osage works as expected."
1242,"7.1.0","{lib/neatogen/overlap.h,lib/circogen/blockpath.h,lib/dotgen/position.c}","{lib/neatogen/overlap.h,lib/circogen/blockpath.h,lib/dotgen/position.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
211,"2.49.0","{}","{lib/vmalloc/vmbest.c,lib/vmalloc/vmhdr.h}","Ported Issue from Mantis
Original ID: 2377
Reported By: Mirraz

SEVERITY: MINOR
Submitted: 2013-09-29 08:54:42

OS: GENTOO LINUX

PLATFORM: X86_64
## DESCRIPTION

Building graphviz-2.28.0 I'v got this compilation warnings:

```
vmbest.c:438:6: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:594:7: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:633:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:647:6: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:648:6: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:874:3: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:875:3: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmbest.c:1015:2: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmopen.c:141:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmopen.c:146:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmopen.c:147:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmprivate.c:174:2: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmstat.c:72:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
vmstat.c:74:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
```
## ADDITIONAL INFORMATION

gcc-4.7.3"
1934,"7.0.4","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
2154,"7.0.5","{}","{lib/sparse/IntStack.h}","There are a few pieces of Graphviz that are written in C, but are not usable without linking against libc++/libstdc++. E.g. cmd/mingle/minglemain.c. It seems like nothing is gained from this being in C.

Should we consider porting some of this to C++? In the case of minglemain.c for example, this would allow dropping the use of `agxbuf`s and just using `std::ostringstream`."
1748,"2.44.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
2102,"2.47.2","{lib/gvc/gvio.h}","{lib/gvc/gvio.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
2102,"7.0.3","{lib/edgepaint/lab_gamut.h,lib/expr/exparse.h}","{lib/edgepaint/lab_gamut.h,lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1876,"2.50.0","{lib/fdpgen/fdp.h}","{lib/fdpgen/fdp.h}","This issue is spawned from point 3) of https://gitlab.com/graphviz/graphviz/-/issues/592#note_447723339.

## Steps to reproduce

`echo 'graph {a}' | fdp`

## Expected Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	a	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## Actual Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	""%3""	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## OS Version

Ubuntu 20.10.

## Graphviz Version

fdp - graphviz version 2.44.2~dev.20201115.0109 (20201115.0109)

## Additional info

Version 2.44.1 works as expected.

fdp, sfdp, neato & twopi has the same problem, while dot, circo, patchwork & osage works as expected."
1950,"2.50.0","{lib/sparse/colorutil.h}","{lib/sparse/colorutil.h}","I think we should start proactively looking at replacing the use of `sprintf` with `snprintf` in the code base. `sprintf` is a common source of memory safety issues and, while I don't think it's the root cause of any of our known ones, it will likely help us avoid some pain in the future."
2057,"6.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
1940,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1740,"2.47.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1242,"7.0.4","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/block.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1748,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1785,"2.49.1","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/fdpgen/fdp.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.c,lib/neatogen/pca.h,lib/circogen/block.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h}","{cmd/gvmap/country_graph_coloring.h,cmd/smyrna/topviewdefs.h,lib/rbtree/misc.c,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,cmd/dot/no_builtins.c,lib/fdpgen/fdp.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,tclpkg/tcldot/no_builtins.c,lib/circogen/block.h,lib/neatogen/pca.h,lib/ortho/partition.h,tclpkg/gv/gv_builtins.c,lib/fdpgen/comp.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1624,"5.0.1","{lib/circogen/edgelist.c}","{lib/circogen/edgelist.c}","The following graph gives ""lost app2 cas1 edge"" error:

```
digraph cluster {
    node [ shape = ""record""]

    subgraph cluster_dc1 {
        label = ""dc1"";
        cas1
        app1
    }
    subgraph cluster_dc2 {
        label = ""dc2"";
        cas2
        app2
    }
    app1 -> cas1
    app1 -> cas2
    app2 -> cas1
}
```

Removing `node [ shape = ""record""]` fixes the problem

- PS1: A found the problem using `VS Code Mermaid Preview Enhanced` plugin and confirmed using
 https://dreampuf.github.io/GraphvizOnline. Now I found that it does NOT appear on http://www.webgraphviz.com/
- PS2: `node [ shape = ""rect""]` fixes the problem"
1718,"7.0.6","{}","{lib/circogen/deglist.c,lib/circogen/deglist.h}","
dot -Tpng A.dot -o xx.png

A.dot is a 132KB text file
runing for 12 hours still not get the png"
1798,"8.0.2","{lib/common/htmllex.h,lib/neatogen/voronoi.h,lib/edgepaint/lab_gamut.h,lib/sfdpgen/sfdp.h,lib/neatogen/call_tri.h,lib/glcomp/glcomptexture.h}","{lib/sfdpgen/uniform_stress.h,lib/common/htmllex.h,lib/neatogen/voronoi.h,lib/edgepaint/lab_gamut.h,lib/sfdpgen/uniform_stress.c,lib/sfdpgen/sfdp.h,lib/neatogen/call_tri.h,lib/glcomp/glcomptexture.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1697,"2.46.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1713,"2.46.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1785,"7.0.0","{lib/circogen/circpos.h,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/circogen/blocktree.h}","{lib/circogen/circpos.h,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/circogen/blocktree.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1573,"5.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1573,"4.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
2102,"5.0.1","{lib/expr/exparse.h}","{lib/expr/exparse.h,cmd/dot/dot_builtins.c}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1854,"5.0.1","{}","{cmd/lefty/ws/x11/gpcanvas.c,cmd/lefty/dot2l/dottrie.c,cmd/lefty/lefty.c,cmd/lefty/ws/gtk/gscroll.c,cmd/lefty/ws/gtk/gpcanvas.c,cmd/lefty/ws/x11/libfilereq/SFDecls.h,cmd/lefty/leftyio.h,cmd/lefty/ws/mswin32/gcommon.c,cmd/lefty/ws/x11/gmenu.c,cmd/lefty/ws/gtk/gcanvas.c,cmd/lefty/ws/x11/gcommon.h,cmd/lefty/dot2l/dotlex.c,cmd/lefty/ws/x11/libfilereq/Path.c,cmd/lefty/mem.c,cmd/lefty/mem.h,cmd/lefty/ws/gtk/gmenu.c,cmd/lefty/gfxview.h,cmd/lefty/ws/gtk/gbutton.c,cmd/lefty/ws/x11/gcommon.c,cmd/lefty/ws/mswin32/gcommon.h,cmd/lefty/ws/x11/gquery.c,cmd/lefty/gfxview.c,cmd/lefty/ws/x11/libfilereq/SF.h,cmd/lefty/ws/x11/garray.c,cmd/dotty/mswin32/dotty.c,cmd/lefty/ws/mswin32/gquery.c,cmd/lefty/ws/none/gmenu.c,cmd/lefty/ws/mswin32/gtext.c,cmd/lefty/ws/gtk/gview.c,cmd/lefty/code.c,cmd/lefty/dot2l/triefa.h,cmd/lefty/ws/none/gcommon.c,cmd/lefty/ws/none/gcommon.h,cmd/lefty/ws/x11/libfilereq/Dir.c,cmd/lefty/dot2l/triefa.c,cmd/lefty/ws/x11/glabel.c,cmd/lefty/os/mswin32/io.c,cmd/lefty/ws/mswin32/gview.c,cmd/lefty/code.h,cmd/lefty/ws/gtk/glabel.c,cmd/lefty/ws/mswin32/gpcanvas.c,cmd/lefty/aix_mods/tbl.c,cmd/lefty/ws/mswin32/resource.h,cmd/lefty/ws/gtk/gtext.c,cmd/lefty/parse.h,cmd/lefty/ws/x11/gcanvas.c,cmd/lneato/mswin32/lneato.c,cmd/lefty/ws/mswin32/gcanvas.c,cmd/lefty/os/unix/io.c,cmd/lefty/parse.c,cmd/lefty/ws/x11/gview.c,cmd/lefty/ws/none/gbutton.c,cmd/lefty/aix_mods/exec.c,cmd/lefty/g.c,cmd/lefty/tbl.h,cmd/lefty/ws/gtk/garray.c,cmd/lefty/tbl.c,cmd/lefty/g.h,cmd/lefty/ws/x11/gtext.c,cmd/lefty/ws/mswin32/gmenu.c,cmd/lefty/ws/none/gtext.c,cmd/lefty/exec.h,cmd/lefty/ws/gtk/gcommon.h,cmd/lefty/exec.c,cmd/lefty/ws/none/gview.c,cmd/lefty/ws/gtk/gcommon.c,cmd/lefty/ws/x11/libfilereq/SFinternal.h,cmd/lefty/ws/mswin32/garray.c,cmd/lefty/ws/none/gcanvas.c,cmd/lefty/ws/none/garray.c,cmd/lefty/dot2l/dot2l.c,cmd/lefty/ws/gtk/gquery.c,cmd/lefty/dot2l/dot2l.h,cmd/lefty/common.h,cmd/lefty/aix_mods/common.h,cmd/lefty/common.c,cmd/lefty/ws/x11/libfilereq/xstat.h,cmd/lefty/ws/none/gquery.c,cmd/lefty/internal.c,cmd/lefty/txtview.c,cmd/lefty/ws/x11/libfilereq/SelFile.c,cmd/lefty/internal.h,cmd/lefty/txtview.h,cmd/lefty/ws/none/glabel.c,cmd/lefty/ws/none/gpcanvas.c,cmd/lefty/cs2l/cs2l.c,cmd/lefty/display.h,cmd/lefty/ws/mswin32/gbutton.c,cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/gbutton.c,cmd/lefty/display.c,cmd/lefty/ws/none/gscroll.c,cmd/lefty/ws/x11/libfilereq/Draw.c,cmd/lefty/ws/x11/gscroll.c,cmd/lefty/str.c,cmd/lefty/ws/mswin32/gscroll.c,cmd/lefty/lex.h,cmd/lefty/str.h,cmd/lefty/lex.c,cmd/lefty/ws/mswin32/glabel.c}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
56,"7.0.4","{lib/common/boxes.h}","{}","*Created by: eruffaldi*

The following simple dot crashes due to a limitation in the buffer in trapezoids.c.

Crashing versions:
- 2.37 windows
- 2.39.20150109.0545 (20150109.0545) under OSX
- github master under OSX

BUT not crashing with 2.36 in Ubuntu 14.04

The workaround is to enlarge the allocation of the trapezoids as follows: TRSIZE = ntraps+1; 
## Example (the last edge causes the crash):

```
digraph ""Robot_Localization Components"" {
rankdir=LR;
ratio=compress;
splines=ortho;
size=""8.27,11.69"";
subgraph cluster_Robot_Localization {
labelloc=t;
fontname=""Times-bold"";
color=red;
label=<<B>Robot Localization</B>>;
fontsize=""16.0"";
fontcolor=black;
penwidth=2;
ramcip_some_other_ros_node [shape=plaintext, margin=0, label=<<TABLE border=""1"" cellspacing=""0"" cellborder=""1""><TR><TD>Registered point cloud, list of points (xyz,rgb)</TD></TR><TR><TD><B><BR/>ramcip_some_other_ros_node<BR/><BR/></B></TD></TR><TR><TD>Time stamped outputs</TD></TR></TABLE>>];
ramcip_mapping_or_hector_mapping [shape=plaintext, margin=0, label=<<TABLE border=""1"" cellspacing=""0"" cellborder=""1""><TR><TD>Undistorted, Rectified Depth image (512x424) pixels<BR/>Registered point cloud, list of points (xyz,rgb)</TD></TR><TR><TD><B><BR/>ramcip_mapping or hector_mapping<BR/><BR/></B></TD></TR><TR><TD>current pose expressed in world coordinates (xyz<BR/>rpy)<BR/>Time stamped outputs</TD></TR></TABLE>>];
}

kinect2_bridge_launch [shape=rect, style=filled, fillcolor=gray];
kinect2_bridge_launch -> ramcip_some_other_ros_node  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""sensor_msgs/PointCloud2""];
kinect2_bridge_launch -> ramcip_mapping_or_hector_mapping  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""sensor_msgs/Image\nsensor_msgs/PointCloud2""];
ramcip_large_object_tracking_large_object_tracking [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_large_object_tracking_large_object_tracking  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_robot_navigation_robot_navigation [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_robot_navigation_robot_navigation  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""Robot pose""];
ramcip_human_tracking_human_tracking [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_human_tracking_human_tracking  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_hierarchical_spaces_hierarchical_spaces [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_hierarchical_spaces_hierarchical_spaces  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_lower_body_phri_planner_lower_body_phri_planner [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_lower_body_phri_planner_lower_body_phri_planner  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""current pose expressed in world coordinates (XYZ and rpy euler angles)\nstd_msgs/Float64\nTBD. Delete this???""];
ramcip_affect_recognizer_affect_recognizer [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_affect_recognizer_affect_recognizer  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_manipulation_planner_and_control_manipulation_planner_and_control [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_manipulation_planner_and_control_manipulation_planner_and_control  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""geometry_msgs/PoseStamped or nav_msgs/Odometry\ngeometry_msgs/TwistStamped or nav_msgs/Odometry""];
ramcip_object_detection_object_detection [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_object_detection_object_detection  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_hand_over_controller_hand_over_controller [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_hand_over_controller_hand_over_controller  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""geometry_msgs/PoseStamped or nav_msgs/Odometry\ngeometry_msgs/TwistStamped or nav_msgs/Odometry""];
ramcip_ar_projector_ar_projector [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_ar_projector_ar_projector  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_global_mapping_global_mapping [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_global_mapping_global_mapping  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
}
```
"
2057,"4.0.0","{}","{cmd/tools/gvpack.c}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
2067,"2.47.3","{lib/common/ps_font_equiv.h}","{windows/include/ps_font_equiv.h}","As best I can tell, building Graphviz currently requires Perl for a single thing: running lib/common/mksvgfonts.pl. Looking at this script and how it is run, I have the impression Perl is not necessary. Going further, I would say a script is not necessary. This can probably be accomplished with a regular header or, if not that simple, an [X macro](https://en.wikipedia.org/wiki/X_Macro).

Making this change would allow us to drop Perl as a build dependency, delete Perl from the Windows build dependency repo, and generally exit the Perl game altogether.

Interestingly the MSBuild system does not run this script, suggesting it is not necessary on Windows. Though the CMake build system on Windows *does* run the script."
205,"7.0.5","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
1753,"2.49.2","{lib/circogen/block.c,lib/common/xml.c,lib/common/utils.h}","{lib/circogen/block.c,lib/common/utils.h}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
2067,"2.50.0","{lib/common/textspan.c}","{lib/common/textspan.c}","As best I can tell, building Graphviz currently requires Perl for a single thing: running lib/common/mksvgfonts.pl. Looking at this script and how it is run, I have the impression Perl is not necessary. Going further, I would say a script is not necessary. This can probably be accomplished with a regular header or, if not that simple, an [X macro](https://en.wikipedia.org/wiki/X_Macro).

Making this change would allow us to drop Perl as a build dependency, delete Perl from the Windows build dependency repo, and generally exit the Perl game altogether.

Interestingly the MSBuild system does not run this script, suggesting it is not necessary on Windows. Though the CMake build system on Windows *does* run the script."
1998,"2.49.0","{lib/vmalloc/vmalloc.c}","{}","## Steps to reproduce

compared sfio.h within Graphviz to sfio.h from github

## Expected Behaviour

Expected identical (or similar) versions

## Actual Behaviour
github version:   #define SFIO_VERSION    20090915L
Graphviz Version  #define SFIO_VERSION    20010201L

## OS Version

not applicable

## Additional info

Diff of files shows differences.
I have not tried to determine if any Graphviz-related bugs are fixed in the newer version of sfio."
1785,"8.0.2","{lib/neatogen/voronoi.h,lib/glcomp/glcomptexture.h}","{lib/sfdpgen/uniform_stress.h,lib/neatogen/voronoi.h,lib/sfdpgen/uniform_stress.c,lib/glcomp/glcomptexture.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
2154,"3.0.0","{lib/mingle/nearest_neighbor_graph.cpp,cmd/mingle/minglemain.cpp,lib/mingle/ink.cpp,lib/sparse/colorutil.h,lib/mingle/agglomerative_bundling.cpp,lib/mingle/edge_bundling.cpp}","{cmd/mingle/minglemain.c,lib/sparse/vector.c,lib/mingle/edge_bundling.c,lib/sparse/colorutil.h,lib/mingle/agglomerative_bundling.c,lib/mingle/ink.c,lib/sparse/vector.h,lib/mingle/nearest_neighbor_graph.c}","There are a few pieces of Graphviz that are written in C, but are not usable without linking against libc++/libstdc++. E.g. cmd/mingle/minglemain.c. It seems like nothing is gained from this being in C.

Should we consider porting some of this to C++? In the case of minglemain.c for example, this would allow dropping the use of `agxbuf`s and just using `std::ostringstream`."
45,"7.0.5","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1753,"7.0.0","{lib/circogen/block.c}","{lib/circogen/block.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
1798,"7.0.0","{lib/common/htmllex.h,lib/circogen/circpos.h,plugin/pango/gvgetfontlist.h,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/circogen/blocktree.h,lib/sfdpgen/sfdp.h}","{lib/circogen/circpos.h,lib/common/htmllex.h,plugin/pango/gvgetfontlist.h,lib/circogen/block.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/circogen/blocktree.h,lib/sfdpgen/sfdp.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1753,"2.50.0","{lib/common/textspan.c,lib/common/textspan_lut.h,lib/common/xml.c,cmd/smyrna/gui/frmobjectui.h}","{lib/common/textspan.c,lib/common/xml.c,cmd/smyrna/gui/frmobjectui.h}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
552,"5.0.1","{}","{cmd/lefty/ws/x11/gpcanvas.c,cmd/lefty/dot2l/dottrie.c,cmd/lefty/lefty.c,cmd/lefty/ws/gtk/gscroll.c,cmd/lefty/ws/gtk/gpcanvas.c,cmd/lefty/ws/x11/libfilereq/SFDecls.h,cmd/lefty/leftyio.h,cmd/lefty/ws/mswin32/gcommon.c,cmd/lefty/ws/x11/gmenu.c,cmd/lefty/ws/gtk/gcanvas.c,cmd/lefty/ws/x11/gcommon.h,cmd/lefty/dot2l/dotlex.c,cmd/lefty/ws/x11/libfilereq/Path.c,cmd/lefty/mem.c,cmd/lefty/mem.h,cmd/lefty/ws/gtk/gmenu.c,cmd/lefty/gfxview.h,cmd/lefty/ws/gtk/gbutton.c,cmd/lefty/ws/mswin32/gcommon.h,cmd/lefty/ws/x11/gcommon.c,cmd/lefty/ws/x11/gquery.c,cmd/lefty/gfxview.c,cmd/lefty/ws/x11/libfilereq/SF.h,cmd/lefty/ws/x11/garray.c,cmd/dotty/mswin32/dotty.c,cmd/lefty/ws/mswin32/gquery.c,cmd/lefty/ws/none/gmenu.c,cmd/lefty/ws/mswin32/gtext.c,cmd/lefty/ws/gtk/gview.c,cmd/lefty/code.c,cmd/lefty/dot2l/triefa.h,cmd/lefty/ws/none/gcommon.c,cmd/lefty/ws/none/gcommon.h,cmd/lefty/ws/x11/libfilereq/Dir.c,cmd/lefty/dot2l/triefa.c,cmd/lefty/ws/x11/glabel.c,cmd/lefty/os/mswin32/io.c,cmd/lefty/ws/mswin32/gview.c,cmd/lefty/code.h,cmd/lefty/ws/gtk/glabel.c,cmd/lefty/ws/mswin32/gpcanvas.c,cmd/lefty/aix_mods/tbl.c,cmd/lefty/ws/mswin32/resource.h,cmd/lefty/ws/gtk/gtext.c,cmd/lefty/parse.h,cmd/lefty/ws/x11/gcanvas.c,cmd/lneato/mswin32/lneato.c,cmd/lefty/ws/mswin32/gcanvas.c,cmd/lefty/os/unix/io.c,cmd/lefty/parse.c,cmd/lefty/ws/x11/gview.c,cmd/lefty/ws/none/gbutton.c,cmd/lefty/aix_mods/exec.c,cmd/lefty/g.c,cmd/lefty/tbl.h,cmd/lefty/ws/gtk/garray.c,cmd/lefty/tbl.c,cmd/lefty/ws/x11/gtext.c,cmd/lefty/g.h,cmd/lefty/ws/mswin32/gmenu.c,cmd/lefty/ws/none/gtext.c,cmd/lefty/exec.h,cmd/lefty/ws/gtk/gcommon.h,cmd/lefty/exec.c,cmd/lefty/ws/none/gview.c,cmd/lefty/ws/gtk/gcommon.c,cmd/lefty/ws/x11/libfilereq/SFinternal.h,cmd/lefty/ws/mswin32/garray.c,cmd/lefty/ws/none/gcanvas.c,cmd/lefty/ws/none/garray.c,cmd/lefty/dot2l/dot2l.c,cmd/lefty/ws/gtk/gquery.c,cmd/lefty/dot2l/dot2l.h,cmd/lefty/common.h,cmd/lefty/aix_mods/common.h,cmd/lefty/common.c,cmd/lefty/ws/x11/libfilereq/xstat.h,cmd/lefty/ws/none/gquery.c,cmd/lefty/internal.c,cmd/lefty/txtview.c,cmd/lefty/ws/x11/libfilereq/SelFile.c,cmd/lefty/internal.h,cmd/lefty/txtview.h,cmd/lefty/ws/none/glabel.c,cmd/lefty/ws/none/gpcanvas.c,cmd/lefty/cs2l/cs2l.c,cmd/lefty/display.h,cmd/lefty/ws/mswin32/gbutton.c,cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/gbutton.c,cmd/lefty/display.c,cmd/lefty/ws/none/gscroll.c,cmd/lefty/ws/x11/libfilereq/Draw.c,cmd/lefty/ws/x11/gscroll.c,cmd/lefty/str.c,cmd/lefty/ws/mswin32/gscroll.c,cmd/lefty/lex.h,cmd/lefty/str.h,cmd/lefty/lex.c,cmd/lefty/ws/mswin32/glabel.c}","Ported Issue from Mantis
Original ID: 2086
Reported By: dperry

SEVERITY: MINOR
Submitted: 2011-04-28 19:00:01

OS: *-LINUX-UBUNTU
## DESCRIPTION

Dotty fails to show the render a graph:

wkoszek@wkoszek-laptop:~/r/papers/fpga_articles/0_FPGA_Intro$ cat graph.g | dotty -
graph parser: syntax error near line 19
context:  >>> SDK <<<  Intro:
dotty.lefty: giving up on dot
dotty.lefty: graph that causes dot
dotty.lefty: to fail has been saved in file dottybug.dot
dotty.lefty: please fill out a bug report at
dotty.lefty: http://www.graphviz.org/bugs/bugform.html

""dot"", however, can render the graph without a problem and correct image is created:

dot -Tpng graph.g > graph.png
dot -Tpng graph.g > graph.jpg
wkoszek@wkoszek-laptop:~/r/papers/fpga_articles/0_FPGA_Intro$
## ADDITIONAL INFORMATION

Dotty's version:

wkoszek@wkoszek-laptop:~/r/papers/fpga_articles/0_FPGA_Intro$ dotty -V dotty version 96c (09-24-96) lefty version 10 Mar 2005 graphviz version 2.20.2 (Tue Mar 2 21:46:26 UTC 2010)

[erg] I'm not sure you sent the correct input graph. The error message from dotty reports

> graph parser: syntax error near line 19
> context:  >>> SDK <<<  Intro:

but the input graph contains nothing like SDK or Intro. So it is hard for me to make any particular suggestions.

However, the 2.20 version of Graphviz is almost 3 years old, and we have made various fixes to dotty during that time, so you should probably update your version and try again.

Finally, we hope to have the 2.28 release out shortly. Dotty will still be in that release, but its use is deprecated. It still has many quirks, and its author probably won't be making any significant changes. We recommend using the gvedit program instead.

[koszek] I have installed whatever Ubuntu has in its package collection. No idea why it's so old - my system is being updated on a regular basis.

I have just submited file which dotty reported as buggy. This is the file that comes from the bug report printed by dotty.

The original file ""graph.g"", which I use like that:

```
wkoszek@wkoszek-laptop:~/r/papers/fpga_articles/0_FPGA_Intro$ cat
graph.g | /usr/bin/dotty -
graph parser: syntax error near line 19
context:  >>> SDK <<<  Intro:
dotty.lefty: giving up on dot
dotty.lefty: graph that causes dot
dotty.lefty: to fail has been saved in file dottybug.dot
dotty.lefty: please fill out a bug report at
dotty.lefty: http://www.graphviz.org/bugs/bugform.html
```

Is below:

digraph test123 {
        rankdir=LR;
        bgcolor=black;
        edge [
                color=orange
        ];
        node [
                peripheries=2,
                style=filled,
                bgcolor=gray,
                color=white,
                fontsize=10,
                fontcolor=black,
                shape=circle
        ];

""HW"" -> ""SW""; }

If you need anything else, let me know.

[erg]

> I have installed whatever Ubuntu has in its package collection. No idea why
> it's so old - my system is being updated on a regular basis.

That is up to the people who maintain the Ubuntu packages. You might want to ask for them to update the software.

> I have just submited file which dotty reported as buggy. This is the file
> that comes from the bug report printed by dotty.
> 
> The original file ""graph.g"", which I use like that:
> 
>   wkoszek@wkoszek-laptop:~/r/papers/fpga_articles/0_FPGA_Intro$ cat
>   graph.g | /usr/bin/dotty -
>   graph parser: syntax error near line 19
>   context:  >>> SDK <<<  Intro:

My problem is that dotty is reporting a syntax error in the input it receives. In particular, it is reporting that somewhere around line 19, it is seeing the text ""SDK Intro:"". But your input graph does not contain those words.

What happens if you don't cat the file but just run

dotty graph.g

? Can you send me the file dottybug.dot that dotty produces?

[koszek] Same error. I know it doesn't make sense. I know there's no ""SDK"" anywhere there. But the ""dottybug.dot"" which you ask me about below is what I have submitted in a bug report.

So you should have thisfile already.

The file which I pasted in the e-mail is a input file which I either send through pipe to dotty, or which I use as ""dotty graph.g"".

Just try to repaste it in your file and see if your dotty produces the same bug. If it doesn't it might be just my old dotty's version.

[erg]

No, dotty works fine for me.

One possibility is that dotty, as a shell script, causes a shell program to be created, and sometimes this produces output which gets read by dotty. See

  http://www.graphviz.org/bugs/b549.html

This same problem has arisen multiple times.

Beyond that, I have no idea what to recommend beyond building your own copy of graphviz or getting the ubuntu people to update the package.

[koszek] Thanks for help. Will try to solve this problem on my own. Wanted to exclude software's fault. 
"
975,"2.49.0","{}","{lib/vmalloc/vmbest.c,lib/vmalloc/vmhdr.h}","Ported Issue from Mantis
Original ID: 769
Reported By: Sami Farin

SEVERITY: MAJOR
Submitted: 2007-08-25 16:40:27

OS: X86-LINUX-FC8

VERSION: 2.14.1
## DESCRIPTION

<br>

Does not compile.
I have gcc-4.1.2-19 and glibc-2.6-4 on IA32 Fedora.
<CD>
make[3]: Entering directory `/usr/src/redhat/BUILD/graphviz-2.14.1/lib/vmalloc'
/bin/sh ../../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I../..  -I../../lib/ast -I../../lib/sfio   -O2 -g -march=i386 -mcpu=i686 -ffast-math -Wno-unknown-pragmas -Wstrict-prototypes -Wpointer-arith -Wall -ffast-math -c -o malloc.lo malloc.c
 gcc -DHAVE_CONFIG_H -I. -I../.. -I../../lib/ast -I../../lib/sfio -O2 -g -march=i386 -mcpu=i686 -ffast-math -Wno-unknown-pragmas -Wstrict-prototypes -Wpointer-arith -Wall -ffast-math -c malloc.c  -fPIC -DPIC -o .libs/malloc.o
malloc.c: In function 'mallopt':
malloc.c:368: warning: unused parameter 'cmd'
malloc.c:368: warning: unused parameter 'value'
malloc.c: At top level:
malloc.c:408: error: return type is an incomplete type
malloc.c: In function 'mstats':
malloc.c:410: error: storage size of 'ms' isn't known
malloc.c:421: warning: 'return' with a value, in function returning void
malloc.c:410: warning: unused variable 'ms'
make[3]: *** [malloc.lo] Error 1
make[3]: Leaving directory`/usr/src/redhat/BUILD/graphviz-2.14.1/lib/vmalloc'
make[2]: **\* [all-recursive] Error 1
make[2]: Leaving directory `/usr/src/redhat/BUILD/graphviz-2.14.1/lib'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory`/usr/src/redhat/BUILD/graphviz-2.14.1'
make: **\* [all] Error 2
</CD>
## ADDITIONAL INFORMATION

Offending file at
http://safari.iki.fi/graphviz-malloc.i
"
2001,"2.49.0","{lib/gvc++/GVContext.h,lib/gvc++/GVRenderData.h,lib/cgraph++/AGraph.h,lib/gvc++/GVContext.cpp,lib/gvc++/GVLayout.h,lib/cgraph++/AGraph.cpp,lib/gvc++/GVLayout.cpp,lib/gvc++/GVRenderData.cpp}","{}","In order to be able to take advantage of many modern C++ features such as automatic memory managment, it would be useful if Graphviz had a high-level C++ API.

This is spawned from a [discussion at the forum](https://forum.graphviz.org/t/work-going-forward/165/28?u=magjac). I though it might be better to collect discussion about it in one place.

I realize that this is not a priority for the Graphviz project right now, but since I'm working on creating a new test suite written in C++, I will implement parts of such an API anyway."
1742,"2.48.0","{lib/rbtree/misc.c}","{lib/rbtree/misc.c}","lib/rbtree uses `setjmp`/`longjmp` to implement exception-style handling of allocation failures. Of the three call sites of `setjmp`, two return immediately. The remaining one in `RBTreeCreate` looks like this (lib/rbtree/red_black_tree.c:38-47):

```c
38   rb_red_blk_tree* newTree = NULL;
39   rb_red_blk_node* temp;
40
41   if (setjmp(rb_jbuf)) {
42     if (newTree) {
43       if (newTree->nil) free (newTree->nil);
44       free (newTree);
45     }
46     return NULL;
47   }
```

As far back as C89, the standard has the following wording:

> All accessible objects have values as of the time `longjmp` was called, except that the values of objects of automatic storage duration that are local to the function containing the invocation of the corresponding `setjmp` macro that do not have volatile-qualified type and have been changed between the `setjmp` invocation and `longjmp` call are indeterminate.

I have noticed recent versions of GCC (~9 onwards) taking advantage of this clause. I would not be surprised if an optimizing compilation removes the calls to `free` in this block, or even removes the `setjmp` entirely by reasoning backwards that no matching `longjmp` can occur because it would lead to indeterminate reads. Older GCC should warn about this with `-Wclobbered` and newer GCC with `-Wmaybe-unitialized`. I think we should proactively refactor this before someone files a cryptic issue stemming from a corrupted `longjmp`.

We could address this by marking `newTree` `volatile`. However the use of this mechanism is limited enough that I think we should just refactor rbtree to use conventional return codes instead of exception-style."
1697,"2.48.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1713,"2.48.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
2102,"7.1.0","{lib/expr/exparse.h}","{lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1940,"2.47.2","{lib/gvc/gvio.h}","{lib/gvc/gvio.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
1697,"7.0.4","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1573,"7.0.5","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
1242,"7.0.3","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/dotgen/position.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1876,"2.46.0","{lib/fdpgen/fdp.h}","{lib/fdpgen/fdp.h}","This issue is spawned from point 3) of https://gitlab.com/graphviz/graphviz/-/issues/592#note_447723339.

## Steps to reproduce

`echo 'graph {a}' | fdp`

## Expected Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	a	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## Actual Behaviour

```
graph {
	graph [bb=""0,0,54,36""];
	node [label=""\N""];
	""%3""	[height=0.5,
		pos=""27.238,17.641"",
		width=0.75];
}
```

## OS Version

Ubuntu 20.10.

## Graphviz Version

fdp - graphviz version 2.44.2~dev.20201115.0109 (20201115.0109)

## Additional info

Version 2.44.1 works as expected.

fdp, sfdp, neato & twopi has the same problem, while dot, circo, patchwork & osage works as expected."
2057,"7.0.5","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
1854,"7.0.4","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
2102,"7.0.4","{lib/edgepaint/lab_gamut.h,lib/expr/exparse.h}","{lib/edgepaint/lab_gamut.h,lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1934,"7.0.3","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
45,"2.49.0","{lib/gvc/gvio.h}","{lib/gvc/gvio.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1748,"2.49.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
1740,"2.46.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
205,"4.0.0","{}","{cmd/tools/gvpack.c}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
1697,"2.44.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1682,"7.0.3","{lib/dotgen/position.c}","{lib/dotgen/position.c}","Hello graphviz team,

As part of our fuzzing efforts at Google, we have identified an issue affecting
graphviz (tested with revision * master e55af3cce23ddcdeefb42b75d115ee23e86e456b).

To reproduce, we are attaching a Dockerfile which compiles the project with
LLVM, taking advantage of the sanitizers that it offers. More information about
how to use the attached Dockerfile can be found here:
https://docs.docker.com/engine/reference/builder/

Instructions:
`unzip artifacts_150610136.zip`
`docker build --build-arg SANITIZER=address --tag=autofuzz-graphviz-150610136 autofuzz_150610136`
`docker run --entrypoint /fuzzing/repro.sh --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc autofuzz-graphviz-150610136 """" /tmp/poc`
`docker run --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc -it autofuzz-graphviz-150610136`

Alternatively, and depending on the bug, you could use gcc, valgrind or other
instrumentation tools to aid in the investigation. The sanitizer error that we
encountered is here:

```
INFO: Seed: 2527279755
/fuzzing/graphviz/parser_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
Executed /tmp/bf492754-0826-45f6-b402-3c40c2322f27 in 1 ms
***
*** NOTE: fuzzing was not performed, you have only
***       executed the target code on a fixed set of inputs.
***
INFO: Seed: 2560428046
/fuzzing/graphviz/render_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
utils.c:175:16: runtime error: signed integer overflow: 1946157056 + 1946157056 cannot be represented in type 'int'
    #0 0x7f1641b0102c in UF_union /fuzzing/graphviz/lib/common/utils.c:175:16
    #1 0x7f164185795a in collapse_rankset /fuzzing/graphviz/lib/dotgen/rank.c:117:6
    #2 0x7f16418560ec in collapse_sets /fuzzing/graphviz/lib/dotgen/rank.c:289:3
    #3 0x7f1641855d14 in dot1_rank /fuzzing/graphviz/lib/dotgen/rank.c:546:5
    #4 0x7f1641855a3f in dot_rank /fuzzing/graphviz/lib/dotgen/rank.c:580:2
    #5 0x7f164183024a in dotLayout /fuzzing/graphviz/lib/dotgen/dotinit.c:311:9
    #6 0x7f164182fb3e in doDot /fuzzing/graphviz/lib/dotgen/dotinit.c:463:2
    #7 0x7f164182fac9 in dot_layout /fuzzing/graphviz/lib/dotgen/dotinit.c:509:22
    #8 0x7f1641a80482 in gvLayoutJobs /fuzzing/graphviz/lib/gvc/gvlayout.c:85:2
    #9 0x7f1641a8daa5 in gvLayout /fuzzing/graphviz/lib/gvc/gvc.c:65:9
    #10 0x4522a2 in LLVMFuzzerTestOneInput /fuzzing/graphviz/./graphviz_render_fuzzer.cc:23:18
    #11 0x4364a3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x4364a3)
    #12 0x428ac3 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x428ac3)
    #13 0x42cfa2 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/fuzzing/graphviz/render_fuzzer+0x42cfa2)
    #14 0x4287db in main (/fuzzing/graphviz/render_fuzzer+0x4287db)
    #15 0x7f1640f4309a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
    #16 0x407c89 in _start (/fuzzing/graphviz/render_fuzzer+0x407c89)
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior utils.c:175:16 in 

```

We will gladly work with you so you can successfully confirm and reproduce this
issue. Do let us know if you have any feedback surrounding the documentation.

Once you have reproduced the issue, we'd appreciate to learn your expected
timeline for an update to be released. With any fix, please attribute the report
to ""Google Autofuzz project"".

We are also pleased to inform you that your project is eligible for inclusion to
the OSS-Fuzz project, which can provide additional continuous fuzzing, and
encourage you to investigate integration options.


Don't hesitate to let us know if you have any questions!

Google AutoFuzz Team
[artifacts_150610136.zip](/uploads/a77494d541fed662376294998e4914a5/artifacts_150610136.zip)"
1713,"6.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1713,"7.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1242,"8.0.1","{cmd/gvmap/power.h,lib/fdpgen/comp.h,lib/dotgen/position.c,lib/glcomp/glcomptexture.h,lib/gvc/gvcontext.c}","{plugin/core/gvrender_core_vml.c,plugin/visio/VisioText.cpp,cmd/gvmap/power.h,plugin/visio/VisioGraphic.cpp,plugin/visio/VisioGraphic.h,lib/expr/exgram.h,lib/glcomp/glcomptexture.h,plugin/visio/VisioText.h,lib/cgraph/cmpnd.c,plugin/visio/gvrender_visio_vdx.cpp,plugin/visio/VisioRender.cpp,plugin/visio/VisioRender.h,lib/fdpgen/comp.h,lib/dotgen/position.c,lib/gvc/gvcontext.c,plugin/visio/gvplugin_visio.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1740,"2.48.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
45,"4.0.0","{}","{cmd/tools/gvpack.c}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1801,"2.47.0","{lib/ast/sfstr.h}","{lib/ast/sfstr.h}","Related to #1742 and as discussed on #1800, there are further uses of `setjmp` errors paths that access non-volatile local variables with the expectation that they are preserved across a call to `longjmp`. Unfortunately this property is not true.

Rather than trying to audit this and annotate every accessed variable with `volatile`, I propose we simply remove this exception-style control flow. I have not yet assessed how hard this is to do."
1804,"4.0.0","{}","{windows/include/unistd.h}","From lib/gvpr/gvpr.h:

```c
#ifdef _MSC_VER
typedef int ssize_t;
#endif
```

While it is true Windows does not provide `ssize_t`, using `int` for this purpose is not the right solution. On, e.g. x86-64, `int` is not the same size as `size_t` so surprising overflows can occur. Some internet searching suggests to me that the correct solution is something like:

```c
#if defined(_MSC_VER)
#include <BaseTsd.h>
typedef SSIZE_T ssize_t;
#endif
```"
2096,"2.49.2","{lib/ortho/ortho.h}","{lib/ortho/ortho.h}","## Steps to reproduce

Build Graphviz using CMake with AddressSanitizer enabled.

Run e.g. the test case in https://gitlab.com/magjac/graphviz/-/blob/add-cpp-test-suite/tests/test_simple.cpp

## Expected Behaviour

No error.

## Actual Behaviour

```
==204644==ERROR: AddressSanitizer: odr-violation (0x7fccf296eca0):
  [1] size=4 'odb_flags' ../lib/ortho/ortho.c:44:5
  [2] size=4 'odb_flags' ../lib/ortho/ortho.c:44:5
These globals were registered at these points:
  [1]:
    #0 0x7fccf2b13938 in __asan_register_globals ../../../../src/libsanitizer/asan/asan_globals.cpp:341
    #1 0x7fccf25db597 in _sub_I_00099_1 (/home/magjac/graphviz/build/plugin/dot_layout/libgvplugin_dot_layout.so.6+0x3b0597)
    #2 0x7fccf34dc96d  (/lib64/ld-linux-x86-64.so.2+0x1196d)

  [2]:
    #0 0x7fccf2b13938 in __asan_register_globals ../../../../src/libsanitizer/asan/asan_globals.cpp:341
    #1 0x7fccf1c8d999 in _sub_I_00099_1 (/home/magjac/graphviz/build/plugin/neato_layout/libgvplugin_neato_layout.so.6+0x5a8999)
    #2 0x7fccf34dc96d  (/lib64/ld-linux-x86-64.so.2+0x1196d)

==204644==HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_odr_violation=0
SUMMARY: AddressSanitizer: odr-violation: global 'odb_flags' at ../lib/ortho/ortho.c:44:5
==204644==ABORTING
```

## OS Version

Ubuntu 21.04.

## Graphviz Version

dot - graphviz version 2.47.4~dev.20210706.0621 (20210706.0621)

## Additional info

The reason for this problem is that the `lib/ortho` object files are not included in the `gvc` library when built with CMake, which has the effect that they end up both in libgvplugin_dot_layout.so and in libgvplugin_neato_layout.so which causes the ASan ODR violation.

When built with autotools, the `gvc` library correctly contains those object files and the problem does not arise."
1934,"8.0.1","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
1740,"2.44.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1543,"5.0.1","{lib/gvc/gvcontext.c}","{lib/gvc/gvcontext.c}","Hey!

First I would to say you thanks you for this amazing library.

However, I found a big memory leak when I tried to use gvContext to render a graph on a file.
```c
==18682==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 3543 byte(s) in 1 object(s) allocated from:
    #0 0x7f26c1c28389 in __interceptor_malloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86
    #1 0x7f26c196199d in gmalloc (/usr/lib/libgvc.so.6+0x3799d)

Indirect leak of 143538 byte(s) in 2287 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c191bcee in agalloc (/usr/lib/libcgraph.so.6+0x9cee)

Indirect leak of 2952 byte(s) in 41 object(s) allocated from:
    #0 0x7f26c1c28389 in __interceptor_malloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86
    #1 0x7f26c190cc1c in dtopen (/usr/lib/libcdt.so.5+0x2c1c)

Indirect leak of 2224 byte(s) in 50 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c191bcee in agalloc (/usr/lib/libcgraph.so.6+0x9cee)
    #2 0x60800000019f  (<unknown module>)

Indirect leak of 168 byte(s) in 4 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c191bcee in agalloc (/usr/lib/libcgraph.so.6+0x9cee)
    #2 0x5592a8991e89 in test /home/test.c:12

Indirect leak of 136 byte(s) in 1 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c1919cd8 in agopen (/usr/lib/libcgraph.so.6+0x7cd8)
    #2 0x5592a898eb2e in test /home/test.c:136
    #3 0x42724145345064  (<unknown module>)

Indirect leak of 112 byte(s) in 1 object(s) allocated from:
    #0 0x7f26c1c285a1 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:95
    #1 0x7f26c1919be9 in agopen (/usr/lib/libcgraph.so.6+0x7be9)

Indirect leak of 112 byte(s) in 2 object(s) allocated from:
    #0 0x7f26c1c28801 in __interceptor_realloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:105
    #1 0x7f26c191bc95  (/usr/lib/libcgraph.so.6+0x9c95)

SUMMARY: AddressSanitizer: 152785 byte(s) leaked in 2387 allocation(s).
```

with only the following code
```c
GVC_t *gvc;
gvc = gvContext();
gvFreeContext(gvc);
```

- os : Linux manjaro-i3 4.19.45-1-MANJARO May 22 17:16:41 UTC 2019 x86_64 GNU/Linux
- graphviz version: 2.40.1-15 

Did I do something wrong ?
... or does this library really leak?

Thank you in advance for your answer."
1940,"2.49.2","{lib/common/utils.h}","{lib/common/utils.h}","## Steps to reproduce

mingw32-make

## Expected Behaviour

Successful project building 

## Actual Behaviour

It fails on 6%
```
C:/Projects/MSYS2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: CMakeFiles\cdt.dir/objects.a(dtdisc.c.obj):dtdisc.c:(.bss+0x0): multiple definition of `Dtset'; CMakeFiles\cdt.dir/objects.a(dtclose.c.obj):dtclose.c:(.bss+0x0): first defined here
```
Full message log here: https://pastebin.com/3kR4JVxe

## OS Version

Windows 7 - 64
MSYS2
gcc 10.2.0

## Graphviz Version

2.46.0"
2154,"8.0.1","{lib/sparse/colorutil.h}","{lib/sparse/colorutil.h}","There are a few pieces of Graphviz that are written in C, but are not usable without linking against libc++/libstdc++. E.g. cmd/mingle/minglemain.c. It seems like nothing is gained from this being in C.

Should we consider porting some of this to C++? In the case of minglemain.c for example, this would allow dropping the use of `agxbuf`s and just using `std::ostringstream`."
2131,"5.0.1","{lib/common/xml.c}","{lib/common/xml.c}","This is quite strange, but the CMake build system contains the following:

```
# Aliases to the gml2gv executable (not including '.exe' suffix)
list(APPEND gml2gv_aliases gv2gml)
```

This seems to have the effect of the installed `gv2gml` being a copy of `gml2gv`. I say this is ""quite strange"" because neither the Autotools nor the MSBuild build systems consider these programs to be aliases. Even the main source files for these two programs, gv2gml.c and gml2gv.c, are distinct files."
1820,"2.46.0","{}","{windows/getopt/getopt.h,windows/getopt/getopt.c}","The version of `getopt` in [windows/getopt](https://gitlab.com/graphviz/graphviz/-/tree/master/windows/getopt) is outdated. It's incompatible with the version that the Linux autotools builds use. The fix for https://gitlab.com/graphviz/graphviz/-/merge_requests/1561 in commit https://gitlab.com/graphviz/graphviz/-/merge_requests/1561/diffs?commit_id=997e12cf45ddfb44d1019c05f05bf12b53bd7322 shows this incompatibility.

Also, this outdated version is used by the CMake builds, regardless of which operating system you're on. I discovered this the hard way by an accidental (details provided on a need-to-know basis :flushed: ) removal of `windows/getopt` in [this Ubuntu CMake job](https://gitlab.com/magjac/graphviz/-/jobs/729861596).

My plan right now is to:

1. Remove `windows/getopt`
1. Add `getopt` using `vcpkg` to the [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) submodule
1. Adapt the CMake builds to:
    1. Use the vcpkg version on Windows
    1. Use the native/Docker image version on Linux and hope that this also works on macOS
1. Adapt the MSBuild builds to use the vcpkg version

The current libraries in [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) has unclear origins, but I read in [this issue](https://github.com/ellson/MOTHBALLED-graphviz/issues/1218#issuecomment-323947968) that many probably comes from https://windows.php.net/downloads/.

My plan is to add a new `vcpkg` top level directory to [windows/dependencies/libraries](https://gitlab.com/graphviz/graphviz-windows-dependencies) so that libraries can be installed there directly without the need to figure out which file to put where in the old structure. In future, we can replace other outdated packages in the old structure with new ones installed with `vcpkg`.

**I would very much like to hear your comments on this and the above.**

As a reference, these are the `getopt` files that are installed with vcpkg:

```
~/vcpkg/vcpkg-export-20200910-082739$ find . -type f
./.vcpkg-root
./installed/vcpkg/info/getopt-win32_0.1_x86-windows.list
./installed/vcpkg/info/getopt_0_x86-windows.list
./installed/x86-windows/bin/getopt.dll
./installed/x86-windows/bin/getopt.pdb
./installed/x86-windows/debug/bin/getopt.dll
./installed/x86-windows/debug/bin/getopt.pdb
./installed/x86-windows/debug/lib/getopt.lib
./installed/x86-windows/include/getopt.h
./installed/x86-windows/lib/getopt.lib
./installed/x86-windows/share/getopt/vcpkg_abi_info.txt
./installed/x86-windows/share/getopt-win32/copyright
./installed/x86-windows/share/getopt-win32/vcpkg_abi_info.txt
./scripts/buildsystems/msbuild/applocal.ps1
./scripts/buildsystems/msbuild/vcpkg-general.xml
./scripts/buildsystems/msbuild/vcpkg.props
./scripts/buildsystems/msbuild/vcpkg.targets
./scripts/buildsystems/vcpkg.cmake
./scripts/cmake/vcpkg_get_windows_sdk.cmake
```"
1741,"2.46.0","{}","{lib/gvpr/mkdefs.c}","The program lib/gvpr/mkdefs.c allocates memory that it never deallocates. ""So what?"" you say, ""it runs quickly and then exits which automatically cleans up."" However, this program is compiled and run during the Graphviz build process. A side effect of this is that whatever is in your `CFLAGS` is applied when compiling it. This includes things like when you've enabled Address Sanitizer and told it to fail on leak detection. This then causes a build failure. To compound the situation, this is dependent on what level of compiler optimization (`-O0`, `-O1`, ...) you're using, which affects how the compiler can manipulate these heap allocations.

Rather than trying to track heap allocations and free everything before exiting, I think we should just rewrite this in a scripting language where we don't need to deal with manual memory management."
45,"5.0.1","{}","{cmd/dot/dot_builtins.c}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1422,"2.47.2","{lib/ast/sfstr.h}","{lib/ast/sfstr.h}","graphviz-2.40.1/lib/sfio/features/sfio does benchmarking at compile time to decide which version of a function to use.

It does this for 3 functions: memchr memccpy mmap

This creates variations in build results across the openSUSE build workers that vary in type of system and parallel build load.
See https://reproducible-builds.org/ for why this matters.

Would be nice to have a cleaner way of disabling that than the attached patch
[reproducible.patch](/uploads/f172041f98f03b7f2eb2d3901524b3f8/reproducible.patch)"
1836,"2.50.0","{plugin/poppler/gvloadimage_poppler.c}","{plugin/poppler/gvloadimage_poppler.c}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
205,"7.0.4","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
1708,"2.44.1","{}","{lib/gvc/gvbuffstderr.c}","There is code in lib/gvc like the following in gvbuffstderr.c:

```c
assert ((b = malloc(sizeof(struct buff_s))));
assert ((b->template = strdup(""/tmp/stderr_buffer_XXXXXX"")));
```

With `NDEBUG` defined, assertions become no-ops and these statements are omitted leading to `b` being uninitialized following this point. The fix would be something like:

```diff
+if (!(b = malloc(sizeof(struct buff_s))))
+  return NULL;
+if (!(b->template = strdup(""/tmp/stderr_buffer_XXXXXX""))) {
+  free(b);
+  return NULL;
+}
-assert ((b = malloc(sizeof(struct buff_s))));
-assert ((b->template = strdup(""/tmp/stderr_buffer_XXXXXX"")));
```

However this assumes callers are actually anticipating failure as a possibility, which is unlikely. In this specific case it looks like the containing function, `buffstderr`, is unused so maybe the simplest solution is to just delete it.

What is your (maintainers') preferred direction here? I'm happy to work on this and submit a PR for whatever you think is an acceptable change."
1748,"2.47.2","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","## Steps to reproduce

1. Download `Graphviz-install.exe` from e.g. [here](https://ci.appveyor.com/api/buildjobs/kw9k9h7lt74he1j4/artifacts/build%2FGraphviz-install.exe)
2. Run it
3. Repeat using another build version

## Expected Behaviour

IMHO, the default should be to install Graphviz without using the version and build date in the path or name, thus overwriting a previously installed version. Alternatively the version should be kept, but the build version (or patch version if it's an official release) dropped.

## Actual Behaviour

The new version is installed alongside previously installed versions if the defaults are accepted.

The reason being that the Windows CMake installer by default installs Graphviz under a path and name containing the version and build date.

```
dir ""C:\Program Files\Graphviz*""
...
 Directory of C:\Program Files

2020-06-23  10:29    <DIR>          Graphviz 2.45.20200615.0949
2020-06-22  21:33    <DIR>          Graphviz 2.45.20200621.0824
2020-06-23  10:03    <DIR>          Graphviz 2.45.20200622.0758
```

The start menu looks like this:

![image](/uploads/260a5c6f417b44ed3f9e62890d5374c2/image.png)

If `Add Graphviz to the system PATH for current user` is selected, the PATH will contain all previously installed versions.

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.45.20200622.0758 (20200622.0758)`

## Additional info

I realize that this issue is somewhat opinionated. I'm open for arguments to keep it as it is."
2127,"8.0.1","{}","{lib/expr/exgram.h}","From the CI logs for a recent run, https://gitlab.com/graphviz/graphviz/-/pipelines/369360035:

```
[ 35%] [BISON][Exparse] Building parser with bison 3.8
/Users/gitlab/builds/graphviz/graphviz/lib/expr/exparse.y: warning: 4 shift/reduce conflicts [-Wconflicts-sr]
/Users/gitlab/builds/graphviz/graphviz/lib/expr/exparse.y: note: rerun with option '-Wcounterexamples' to generate conflict counterexamples
[ 35%] Generating exparse.c
[ 35%] Building C object lib/expr/CMakeFiles/expr.dir/excc.c.o
In file included from /Users/gitlab/builds/graphviz/graphviz/lib/expr/excc.c:24:
In file included from /Users/gitlab/builds/graphviz/graphviz/lib/expr/exlib.h:126:
/Users/gitlab/builds/graphviz/graphviz/lib/expr/expr.h:274:14: error: conflicting types for 'exerror'
extern void             exerror(const char*, ...);
                        ^
/Users/gitlab/builds/graphviz/graphviz/build/lib/expr/y.tab.h:260:6: note: previous declaration is here
void exerror (const char *msg);
     ^
1 error generated.
```

and for Autotools:

```
bison -y -Wno-yacc -dv --output=grammar.c ../../lib/cgraph/grammar.y
  CC       grammar.lo
In file included from grammar.c:168:
grammar.h:118:6: error: conflicting types for 'aagerror'
void aagerror (const char *msg);
     ^
../../lib/cgraph/grammar.y:26:13: note: previous declaration is here
extern void aagerror(char *);
            ^
1 error generated.
make[3]: *** [grammar.lo] Error 1
make[2]: *** [all-recursive] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all] Error 2
```

This appears to be a side effect of Bison 3.8 becoming available in Homebrew, and CI now installing that instead of 3.7.6. The [Bison changelog](https://github.com/akimd/bison/blob/master/NEWS) has lots of interesting remarks. In particular:

```
  To comply with the latest POSIX standard, in Yacc compatibility mode
  (options `-y`/`--yacc`) Bison now generates prototypes for yyerror and
  yylex.  In some situations, this is breaking compatibility: if the user
  has already declared these functions but with some differences (e.g., to
  declare them as static, or to use specific attributes), the generated
  parser will fail to compile.  To disable these prototypes, #define yyerror
  (to `yyerror`), and likewise for yylex.
```"
205,"5.0.1","{}","{cmd/dot/dot_builtins.c}","Ported Issue from Mantis
Original ID: 2411 **Possible attachment(s) only available in original Mantis DB**
Reported By: Mike M

SEVERITY: COSMETIC
Submitted: 2014-01-23 00:57:50

OS: WINDOWS

OS BUILD: 7

PLATFORM: MINGW
## DESCRIPTION

The title says it all, in the diff are a view changes to get graphviz libs compiled with mingw on Windows. However looking at the different preprocessor defines, the build on mingw Windows feels like a hack. I just worked my way around it, I didn't clean it up completely."
1740,"2.46.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1934,"6.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
1800,"2.47.1","{}","{lib/circogen/stack.c}","## Steps to reproduce

1. Compile [dot.demo/neatopack.c](https://gitlab.com/graphviz/graphviz/-/blob/master/dot.demo/neatopack.c) to `a.exe`
1. Run `echo 'graph {a -- b}' | ./a.exe`

## Expected Behaviour

No error.

## Actual Behaviour

* `Segmentation fault (core dumped)` on Linux.
* `STATUS_ACCESS_VIOLATION` on Windows.

## OS Version

All supported OSs in our pipeline, but debug info below from `Ubuntu 18.04`.

## Graphviz Version

Home-built based on commit 4999fb8597c6f798763b8b8f0bf911eef11cf291.

`dot - graphviz version 2.44.2~dev.20200820.1251 (20200820.1251)`

## Additional info

This might not be a bug in Graphviz. It might be a bug in `neatopack.c` or in the way I'm using it.

GDB gives this backtrace:
```

magjac@t440:~/graphviz$ gdb -c core --args a.exe g.dot
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type ""show copying""
and ""show warranty"" for details.
This GDB was configured as ""x86_64-linux-gnu"".
Type ""show configuration"" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type ""help"".
Type ""apropos word"" to search for commands related to ""word""...
Reading symbols from a.exe...done.
[New LWP 18066]
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
Core was generated by `./a.exe'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
174	../sysdeps/x86_64/multiarch/../strcmp.S: No such file or directory.
(gdb) bt
#0  0x00007ff744aa1fea in __strcmp_ssse3 () at ../sysdeps/x86_64/multiarch/../strcmp.S:174
#1  0x00007ff744735051 in dttree (dt=0x5592f7cd3860, obj=0x7ffdd3771140, type=4) at dttree.c:143
#2  0x00007ff74500ed18 in refsymbind (strdict=0x5592f7cd3860, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:74
#3  0x00007ff74500ede9 in agstrdup (g=0x5592f7ccba90, s=0x7ffdd3773350 ""_cc_0"") at refstr.c:102
#4  0x00007ff74500b94f in aginternalmapinsert (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", id=6) at imap.c:126
#5  0x00007ff74500b532 in agmapnametoid (g=0x5592f7ccba90, objtype=0, str=0x7ffdd3773350 ""_cc_0"", result=0x7ffdd3771288, createflag=0) at id.c:105
#6  0x00007ff7450126a4 in agsubg (g=0x5592f7ccba90, name=0x7ffdd3773350 ""_cc_0"", cflag=1) at subg.c:57
#7  0x00007ff744d58a2e in ccomps (g=0x5592f7ccba90, ncc=0x7ffdd3773408, pfx=0x0) at ccomps.c:326
#8  0x00005592f703cbcf in main (argc=1, argv=0x7ffdd3773528) at /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:33
(gdb) 
```

ASan gives this:
```
ASAN:DEADLYSIGNAL
=================================================================
==19175==ERROR: AddressSanitizer: SEGV on unknown address 0x362e6f732e6c (pc 0x7fef93c124db bp 0x7ffd890ded70 sp 0x7ffd890ded30 T0)
==19175==The signal is caused by a READ memory access.
    #0 0x7fef93c124da in aggetrec /home/magjac/graphviz/lib/cgraph/rec.c:42
    #1 0x7fef93c1268e in agbindrec /home/magjac/graphviz/lib/cgraph/rec.c:95
    #2 0x7fef8b54da6a in neato_init_node /home/magjac/graphviz/lib/neatogen/neatoinit.c:46
    #3 0x7fef8b54dfaf in neato_init_node_edge /home/magjac/graphviz/lib/neatogen/neatoinit.c:125
    #4 0x7fef8b54f843 in neato_init_graph /home/magjac/graphviz/lib/neatogen/neatoinit.c:620
    #5 0x7fef8b551e06 in neato_layout /home/magjac/graphviz/lib/neatogen/neatoinit.c:1438
    #6 0x7fef93950bfe in gvLayoutJobs /home/magjac/graphviz/lib/gvc/gvlayout.c:85
    #7 0x7fef9395b2e2 in gvLayout /home/magjac/graphviz/lib/gvc/gvc.c:65
    #8 0x55ec144a6114 in main /home/magjac/graphviz/rtest/../dot.demo/neatopack.c:38
    #9 0x7fef9355db96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #10 0x55ec144a5e59 in _start (/home/magjac/graphviz/a.exe+0xe59)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /home/magjac/graphviz/lib/cgraph/rec.c:42 in aggetrec
==19175==ABORTING
```

The problem can be seen for all OSs in [this pipeline](https://gitlab.com/magjac/graphviz/-/pipelines/180140052)

https://gitlab.com/graphviz/graphviz/-/merge_requests/1527 does not solve the problem as can be seen in [this pipeline].(https://gitlab.com/magjac/graphviz/-/pipelines/180166113)."
1854,"7.0.5","{lib/glcomp/glcomptexture.h}","{lib/glcomp/glcomptexture.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
2102,"7.0.5","{lib/edgepaint/lab_gamut.h,lib/expr/exparse.h}","{lib/edgepaint/lab_gamut.h,lib/expr/exparse.h}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1682,"2.49.2","{}","{lib/spine/spinehdr.h}","Hello graphviz team,

As part of our fuzzing efforts at Google, we have identified an issue affecting
graphviz (tested with revision * master e55af3cce23ddcdeefb42b75d115ee23e86e456b).

To reproduce, we are attaching a Dockerfile which compiles the project with
LLVM, taking advantage of the sanitizers that it offers. More information about
how to use the attached Dockerfile can be found here:
https://docs.docker.com/engine/reference/builder/

Instructions:
`unzip artifacts_150610136.zip`
`docker build --build-arg SANITIZER=address --tag=autofuzz-graphviz-150610136 autofuzz_150610136`
`docker run --entrypoint /fuzzing/repro.sh --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc autofuzz-graphviz-150610136 """" /tmp/poc`
`docker run --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc -it autofuzz-graphviz-150610136`

Alternatively, and depending on the bug, you could use gcc, valgrind or other
instrumentation tools to aid in the investigation. The sanitizer error that we
encountered is here:

```
INFO: Seed: 2527279755
/fuzzing/graphviz/parser_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
Executed /tmp/bf492754-0826-45f6-b402-3c40c2322f27 in 1 ms
***
*** NOTE: fuzzing was not performed, you have only
***       executed the target code on a fixed set of inputs.
***
INFO: Seed: 2560428046
/fuzzing/graphviz/render_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
utils.c:175:16: runtime error: signed integer overflow: 1946157056 + 1946157056 cannot be represented in type 'int'
    #0 0x7f1641b0102c in UF_union /fuzzing/graphviz/lib/common/utils.c:175:16
    #1 0x7f164185795a in collapse_rankset /fuzzing/graphviz/lib/dotgen/rank.c:117:6
    #2 0x7f16418560ec in collapse_sets /fuzzing/graphviz/lib/dotgen/rank.c:289:3
    #3 0x7f1641855d14 in dot1_rank /fuzzing/graphviz/lib/dotgen/rank.c:546:5
    #4 0x7f1641855a3f in dot_rank /fuzzing/graphviz/lib/dotgen/rank.c:580:2
    #5 0x7f164183024a in dotLayout /fuzzing/graphviz/lib/dotgen/dotinit.c:311:9
    #6 0x7f164182fb3e in doDot /fuzzing/graphviz/lib/dotgen/dotinit.c:463:2
    #7 0x7f164182fac9 in dot_layout /fuzzing/graphviz/lib/dotgen/dotinit.c:509:22
    #8 0x7f1641a80482 in gvLayoutJobs /fuzzing/graphviz/lib/gvc/gvlayout.c:85:2
    #9 0x7f1641a8daa5 in gvLayout /fuzzing/graphviz/lib/gvc/gvc.c:65:9
    #10 0x4522a2 in LLVMFuzzerTestOneInput /fuzzing/graphviz/./graphviz_render_fuzzer.cc:23:18
    #11 0x4364a3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x4364a3)
    #12 0x428ac3 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x428ac3)
    #13 0x42cfa2 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/fuzzing/graphviz/render_fuzzer+0x42cfa2)
    #14 0x4287db in main (/fuzzing/graphviz/render_fuzzer+0x4287db)
    #15 0x7f1640f4309a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
    #16 0x407c89 in _start (/fuzzing/graphviz/render_fuzzer+0x407c89)
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior utils.c:175:16 in 

```

We will gladly work with you so you can successfully confirm and reproduce this
issue. Do let us know if you have any feedback surrounding the documentation.

Once you have reproduced the issue, we'd appreciate to learn your expected
timeline for an update to be released. With any fix, please attribute the report
to ""Google Autofuzz project"".

We are also pleased to inform you that your project is eligible for inclusion to
the OSS-Fuzz project, which can provide additional continuous fuzzing, and
encourage you to investigate integration options.


Don't hesitate to let us know if you have any questions!

Google AutoFuzz Team
[artifacts_150610136.zip](/uploads/a77494d541fed662376294998e4914a5/artifacts_150610136.zip)"
2057,"7.0.4","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
1836,"2.49.2","{lib/ortho/ortho.h}","{lib/ortho/ortho.h}","The missing tools are:
* circo
* cluster
* diffimg
* dot2gxl
* dot_builtins
* dotty
* edgepaint
* fdp
* gc
* gv2gml
* gv2gxl
* gvedit
* gvmap
* gvmap.sh
* gvpr
* gxl2dot
* lefty
* lneato
* mingle
* neato
* osage
* patchwork
* prune
* sfdp
* smyrna
* twopi
* vimdot

See also https://gitlab.com/graphviz/graphviz/-/issues/1753 which tracks the difference between CMake and MSBuild builds on Windows."
1242,"7.0.2","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/circogen/block.h,lib/neatogen/pca.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/circogen/block.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/block.h,lib/circogen/blocktree.h,lib/fdpgen/comp.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1852,"3.0.0","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c}","{cmd/mingle/minglemain.c,lib/pack/ptest.c}","
In https://gitlab.com/graphviz/graphviz/-/merge_requests/1592 and https://gitlab.com/graphviz/graphviz/-/merge_requests/1608 many tools were adapted to GNU getopt. See e.g. https://gitlab.com/graphviz/graphviz/-/merge_requests/1592/diffs?commit_id=2c6420be0dfc252b7db4207accf40af2170c50e8 or https://gitlab.com/graphviz/graphviz/-/merge_requests/1608/diffs?commit_id=81852ca7b3eea614752c8d38230562a9027efe89.

macOS however, does not use GNU getopt, but BSD getopt where the `optopt` variable behaves slightly differently and the code prior the the changes mentioned above is the correct one. Therefore, the code needs to be different depending on which OS it it running on.

The tools that are currently failing the tools test on macOS are:
* bcomps
* ccomps
* cluster
* dijkstra
* edgepaint
* gc
* gvcolor
* gvmap
* gvpack
* mm2gv
* nop
* sccmap
* tred

All of them may not have been working on macOS before, but at least some of them did.

This problem should be fixed before the next stable release.

## Steps to reproduce

E.g. `bcomps -?`

## Expected Behaviour

Show usage and exit status zero.

## Actual Behaviour

Output:
```
bcomps: option -? unrecognized
Usage: bcomps [-stvx?] [-o<out template>] <files>
  -o - output file template
  -s - don't print components
  -t - emit block-cutpoint tree
  -v - verbose
  -x - external
  -? - print usage
If no files are specified, stdin is used
```
Exit status 1.

## OS Version

macOS Catalina Version 10.15.7

## Graphviz Version

dot - graphviz version 2.44.2~dev.20201016.1439 (20201016.1439)

Home-built from aa165722db3b556213622727d45bb08d95d3bac7."
1242,"6.0.2","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/blocktree.h}","{lib/circogen/circpos.h,cmd/gvmap/country_graph_coloring.h,cmd/smyrna/viewportcamera.h,lib/sfdpgen/sfdpinternal.h,lib/dotgen/dot.h,lib/glcomp/glcomptexture.h,lib/neatogen/overlap.h,lib/neatogen/voronoi.h,lib/neatogen/closest.h,lib/ast/strcopy.c,lib/edgepaint/lab_gamut.c,lib/neatogen/overlap.c,lib/circogen/blockpath.h,lib/neatogen/pca.h,lib/circogen/blocktree.h}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
1713,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1697,"7.0.5","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1573,"7.0.4","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.c,lib/edgepaint/lab_gamut.h}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
2308,"2.49.2","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","MSVC seems upset about the definition of `GVLayout`:

```
  GVLayout.cpp
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(50,35): warning C4251: 'GVC::GVLayout::m_gvc': class 'std::shared_ptr<GVC::GVContext>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(29): message : see declaration of 'std::shared_ptr<GVC::GVContext>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(51,38): warning C4251: 'GVC::GVLayout::m_g': class 'std::shared_ptr<CGraph::AGraph>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(30): message : see declaration of 'std::shared_ptr<CGraph::AGraph>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
```"
662,"2.44.1","{}","{dot.demo/demo.c}","Ported Issue from Mantis
Original ID: 1874
Reported By: Mathias Spoerr

SEVERITY: MINOR
Submitted: 2010-05-06 21:24:34

OS: X86-WINDOWS-

VERSION: 2.27
## DESCRIPTION

When compiling and running the code

```c
# include <graphviz/gvc.h>

int main(int argc, char **argv)
{
     Agraph_t *g;
     Agnode_t *n, *m;
     Agedge_t *e;
     Agsym_t *a;
     GVC_t *gvc;

 /* set up a graphviz context */
 gvc = gvContext();
 char* args[] = {
    ""dot"",
    ""-Tgif"", /* gif output */
    ""-oabc.gif"" /* output to file abc.gif */
};

 gvParseArgs (gvc, sizeof (args)/sizeof (char*), args);

 /* Create a simple digraph */
 g = agopen(""g"", AGDIGRAPH);
 n = agnode(g, ""n"");
 m = agnode(g, ""m"");
 e = agedge(g, n, m);

 /* Set an attribute - in this case one that affects the visible rendering */
 agsafeset(n, ""color"", ""red"", """");

 /* Compute a layout using layout engine from command line args */
 gvLayoutJobs(gvc, g);

 /* Write the graph according to -T and -o options */
 gvRenderJobs(gvc, g);

 /* Free layout data */
 gvFreeLayout(gvc, g);

 /* Free graph structures */
      agclose(g);

 /* close output file, free context, and return number of errors */
 return (gvFreeContext(gvc));

}
```

I get a seg fault.

When the lines defining args[] are changes to

```c
    char* args[3];
    args[0] = strdup (""dot"" );
    args[1] = strdup (""-Tgif"" );
    args[2] = strdup (""-oabc.gif"" );
```

the code finishes okay, but then reports a Runtime Check Failure.
(See output file).
"
1740,"8.0.2","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","Add the following notes to the Winbuild page:
http://www.graphviz.org/doc/winbuild.html

1. Windows SDK 8.1 should be installed in Visual Studio 2019:
  - https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
  - https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

2. MSVC v140 should be added
  - https://stackoverflow.com/questions/33154696/msbuild-error-the-builds-tools-for-v140-platform-toolset-v140-cannot-be-f"
1242,"3.0.0","{plugin/poppler/gvloadimage_poppler.c}","{lib/circogen/nodeset.c,cmd/mingle/minglemain.c,lib/sparse/vector.c,plugin/poppler/gvloadimage_poppler.c,lib/mingle/edge_bundling.c,plugin/ming/gvplugin_ming.c,plugin/ming/gvrender_ming.c,lib/mingle/agglomerative_bundling.c,lib/mingle/ink.c,lib/pack/ptest.c,lib/mingle/nearest_neighbor_graph.c}","*Created by: AstralStorm*

Graphviz is aliasing system headers memory.h and malloc.h.

This causes build failures against libc different than glibc, for example with bionic.

Additionally quite a few source files include <memory.h> while they should be using the graphviz version."
634,"6.0.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","Ported Issue from Mantis
Original ID: 1932
Reported By: Steve Dodier-Lazaro

SEVERITY: MINOR
Submitted: 2010-08-03 09:21:00

OS: _-_-

VERSION: 2.20.2
## DESCRIPTION

<br>

Hello,
<br>

I'm opening this bug because I noticed libgraph is using char\* pretty much everywhere in it's function signatures, even when const char\* (static strings) are expected.
<br>

This is completely transparent in C, but with a modern C++ compiler, it triggers compilation warnings about const char\* being given to the functions instead of char\* if using static strings.
<br>

Since the functions seem to expect static strings and do not seem to modify them, I think they should use const char\* instead.
<br>

Cordially,
SD.
"
1827,"4.0.0","{}","{cmd/tools/gvpack.c}","The autotools build system contains support for building with [eFence](https://en.wikipedia.org/wiki/Electric_Fence):

```
dnl -----------------------------------
dnl ElectricFence support for debugging

AC_ARG_WITH(efence,
   [AS_HELP_STRING([--with-efence=no],[use efence for debugging memory use])],
   [],[with_efence=no])
if test ""x$with_efence"" = ""xyes""; then
        LIBS=""$LIBS -lefence""
fi
```

Does anyone use this? I am under the impression eFence's functionality had been entirely subsumed by Valgrind and later Address Sanitizer. The only scenario in which I have found eFence preferable is free-standing environments (e.g. OS kernels) where there are fewer instrumentation options. I can't imagine anyone is running Graphviz in a free-standing environment though."
2087,"8.0.1","{lib/dotgen/position.c}","{lib/dotgen/position.c}","## Steps to reproduce

I ran

    dot -Tpng -O graph.gv

with this input:

```
digraph {
	graph [concentrate=true]
	n1 -> n2
	n1 -> n3
	n1 -> n5
	n1 -> n5
	n4 -> n2
	n4 -> n3
	n2 -> n5
	n5 -> n1
}
```

## Expected Behaviour

it renders a graph

## Actual Behaviour

It dies with a segmentation fault

## OS Version

I have reproduced this on Debian Stable (Buster), Debian Testing (Bullseye) and Ubuntu 20.04.2 LTS

## Graphviz Version

run $ dot -V

`dot - graphviz version 2.43.0 (0)`


## Additional info

(none)"
1682,"8.0.1","{lib/dotgen/position.c}","{lib/dotgen/position.c}","Hello graphviz team,

As part of our fuzzing efforts at Google, we have identified an issue affecting
graphviz (tested with revision * master e55af3cce23ddcdeefb42b75d115ee23e86e456b).

To reproduce, we are attaching a Dockerfile which compiles the project with
LLVM, taking advantage of the sanitizers that it offers. More information about
how to use the attached Dockerfile can be found here:
https://docs.docker.com/engine/reference/builder/

Instructions:
`unzip artifacts_150610136.zip`
`docker build --build-arg SANITIZER=address --tag=autofuzz-graphviz-150610136 autofuzz_150610136`
`docker run --entrypoint /fuzzing/repro.sh --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc autofuzz-graphviz-150610136 """" /tmp/poc`
`docker run --cap-add=SYS_PTRACE -v $PWD/autofuzz_150610136/bf492754-0826-45f6-b402-3c40c2322f27:/tmp/poc -it autofuzz-graphviz-150610136`

Alternatively, and depending on the bug, you could use gcc, valgrind or other
instrumentation tools to aid in the investigation. The sanitizer error that we
encountered is here:

```
INFO: Seed: 2527279755
/fuzzing/graphviz/parser_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
Executed /tmp/bf492754-0826-45f6-b402-3c40c2322f27 in 1 ms
***
*** NOTE: fuzzing was not performed, you have only
***       executed the target code on a fixed set of inputs.
***
INFO: Seed: 2560428046
/fuzzing/graphviz/render_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/bf492754-0826-45f6-b402-3c40c2322f27
utils.c:175:16: runtime error: signed integer overflow: 1946157056 + 1946157056 cannot be represented in type 'int'
    #0 0x7f1641b0102c in UF_union /fuzzing/graphviz/lib/common/utils.c:175:16
    #1 0x7f164185795a in collapse_rankset /fuzzing/graphviz/lib/dotgen/rank.c:117:6
    #2 0x7f16418560ec in collapse_sets /fuzzing/graphviz/lib/dotgen/rank.c:289:3
    #3 0x7f1641855d14 in dot1_rank /fuzzing/graphviz/lib/dotgen/rank.c:546:5
    #4 0x7f1641855a3f in dot_rank /fuzzing/graphviz/lib/dotgen/rank.c:580:2
    #5 0x7f164183024a in dotLayout /fuzzing/graphviz/lib/dotgen/dotinit.c:311:9
    #6 0x7f164182fb3e in doDot /fuzzing/graphviz/lib/dotgen/dotinit.c:463:2
    #7 0x7f164182fac9 in dot_layout /fuzzing/graphviz/lib/dotgen/dotinit.c:509:22
    #8 0x7f1641a80482 in gvLayoutJobs /fuzzing/graphviz/lib/gvc/gvlayout.c:85:2
    #9 0x7f1641a8daa5 in gvLayout /fuzzing/graphviz/lib/gvc/gvc.c:65:9
    #10 0x4522a2 in LLVMFuzzerTestOneInput /fuzzing/graphviz/./graphviz_render_fuzzer.cc:23:18
    #11 0x4364a3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x4364a3)
    #12 0x428ac3 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/fuzzing/graphviz/render_fuzzer+0x428ac3)
    #13 0x42cfa2 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/fuzzing/graphviz/render_fuzzer+0x42cfa2)
    #14 0x4287db in main (/fuzzing/graphviz/render_fuzzer+0x4287db)
    #15 0x7f1640f4309a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
    #16 0x407c89 in _start (/fuzzing/graphviz/render_fuzzer+0x407c89)
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior utils.c:175:16 in 

```

We will gladly work with you so you can successfully confirm and reproduce this
issue. Do let us know if you have any feedback surrounding the documentation.

Once you have reproduced the issue, we'd appreciate to learn your expected
timeline for an update to be released. With any fix, please attribute the report
to ""Google Autofuzz project"".

We are also pleased to inform you that your project is eligible for inclusion to
the OSS-Fuzz project, which can provide additional continuous fuzzing, and
encourage you to investigate integration options.


Don't hesitate to let us know if you have any questions!

Google AutoFuzz Team
[artifacts_150610136.zip](/uploads/a77494d541fed662376294998e4914a5/artifacts_150610136.zip)"
2001,"2.49.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","In order to be able to take advantage of many modern C++ features such as automatic memory managment, it would be useful if Graphviz had a high-level C++ API.

This is spawned from a [discussion at the forum](https://forum.graphviz.org/t/work-going-forward/165/28?u=magjac). I though it might be better to collect discussion about it in one place.

I realize that this is not a priority for the Graphviz project right now, but since I'm working on creating a new test suite written in C++, I will implement parts of such an API anyway."
1696,"7.0.6","{}","{lib/sfdpgen/PriorityQueue.c}","Since !1332, Graphviz no longer compiles on macOS.

```
PriorityQueue.c:14:10: fatal error: 'malloc.h' file not found
#include <malloc.h>
         ^~~~~~~~~~
```

The malloc.h header is non-standard and is deprecated. The standard header for malloc is stdlib.h.

I have verified the issue exists on macOS 10.13 with Xcode 10.1, 10.14 with Xcode 11.3.1 and 10.15 with Xcode 11.4."
1798,"7.0.1","{lib/circogen/blockpath.h,lib/edgepaint/lab_gamut.h,lib/fdpgen/comp.h,lib/sfdpgen/sfdp.h,lib/dotgen/position.c,lib/glcomp/glcomptexture.h}","{lib/circogen/blockpath.h,lib/edgepaint/lab_gamut.h,lib/fdpgen/comp.h,lib/sfdpgen/sfdp.h,lib/dotgen/position.c,lib/glcomp/glcomptexture.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
1798,"6.0.1","{lib/common/htmllex.h,lib/gvc/gvplugin_device.h,tclpkg/tcldot/no_builtins.c,tclpkg/gv/gv_builtins.c,lib/edgepaint/lab_gamut.h,cmd/dot/no_builtins.c,lib/fdpgen/comp.h,lib/glcomp/glcomptexture.h}","{lib/common/htmllex.h,lib/gvc/gvplugin_device.h,tclpkg/tcldot/no_builtins.c,tclpkg/gv/gv_builtins.c,lib/edgepaint/lab_gamut.h,cmd/dot/no_builtins.c,lib/fdpgen/comp.h,lib/glcomp/glcomptexture.h}","A nice easy issue for anyone to tackle if they get to it before me: a lot of code comments tell the reader to refer to CVS, but the code is now hosted using Git at Gitlab. I think we should just remove any comments referencing CVS."
2308,"5.0.1","{lib/gvc++/GVRenderData.cpp}","{lib/gvc++/GVRenderData.cpp}","MSVC seems upset about the definition of `GVLayout`:

```
  GVLayout.cpp
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(50,35): warning C4251: 'GVC::GVLayout::m_gvc': class 'std::shared_ptr<GVC::GVContext>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(29): message : see declaration of 'std::shared_ptr<GVC::GVContext>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(51,38): warning C4251: 'GVC::GVLayout::m_g': class 'std::shared_ptr<CGraph::AGraph>' needs to have dll-interface to be used by clients of class 'GVC::GVLayout' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
C:\GitLab-Runner\builds\smattr\graphviz\lib\gvc++\GVLayout.h(30): message : see declaration of 'std::shared_ptr<CGraph::AGraph>' [C:\GitLab-Runner\builds\smattr\graphviz\build\lib\gvc++\gvc++.vcxproj]
```"
1971,"4.0.0","{}","{cmd/tools/gvpack.c}","cmd/edgepaint/edgepaintmain.c has code like the following:

```c
static void usage (char* cmd, int eval){
  fprintf(stderr, ""Usage: %s <options> gv file with 2D coordinates.\n"", cmd);
  fprintf(stderr, ""Find a color assignment of the edges, such that edges that cross at small angle have as different as posible.\n"");
  fprintf(stderr, ""Options are: \n"");
…
  fprintf(stderr, "" -random_seed=s   : random seed to use. s must be an integer. If s is negative, we do -s iterations with different seeds and pick the best.\n"");
…
  while ((c = getopt(argc, argv, "":vc:a:s:r:l:o:?"")) != -1) {
    switch (c) {
    case 's':
      *check_edges_with_same_endpoint = 1;
      break;
    case 'r':
      if (strncmp(optarg,""andom_seed="", 11) == 0){
  if (sscanf(optarg+11, ""%d"", seed) != 1){
    fprintf(stderr,""-random_seed option must be a positive integer.\n"");
    usage(cmd, 1);
  }
      }
      break;
```

A couple of things to say about this:
1. Passing something like `-rabbit` is a no-op (not rejected, but also doesn't do anything). Unclear if this is intentional.
2. When specifying a non-integer to `-random_seed` the error message contradicts the usage text.

The above is one example of a problematic argument, but every command line parameter to edgepaint has some variant of this situation.

I think this should really not be hand rolling its own (incorrect) implementation of `getopt_long`. We should just call a standard library that provides this (libc on anything non-Windows, and the existing getopt we depend on on Windows)."
45,"7.0.4","{lib/edgepaint/lab_gamut.h}","{lib/edgepaint/lab_gamut.h}","*Created by: ghost*

Hello,

I have the following error when compiling with MinGW-w64:

```
graph.c:281:1: error: initializer element is not constant
 Agdisc_t AgDefaultDisc = { &AgMemDisc, &AgIdDisc, &AgIoDisc };
 ^
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
graph.c:281:1: error: initializer element is not constant
graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
make[3]: **\* [graph.lo] Error 1
```

It's the version 2.38.0."
1934,"3.0.0","{cmd/lneato/mswin32/lneato.c}","{}","The latest Windows oddity... Two MRs I just posted, !1726 and !1727 show the MS Build release task failing the `test_tool` test cases for `dotty` and `lneato`. I retried the task and confirmed it fails again in the same way. Why this would be, I don't know. Neither of these MRs affect the Windows build, or indeed even any code at all. CI passed on the master commit that is the parent of both of these.

Any suggestions?"
2233,"4.0.0","{cmd/gvedit/mainwindow.h}","{cmd/gvedit/mainwindow.h}","## Steps to reproduce

Install qt6. Then run the conventional autotools build with autogen.sh, configure, make

## Expected Behaviour

builds gvedit.app

## Actual Behaviour

First requires small changes to configure.ac, cmd/gvedit/imageviewer.cpp mainly, also gvedit/Makefile. Then gvedit.app builds without much drama.

## OS Version

MacOS 12.3.1 Monterey

## Graphviz Version

3.0.1 dev 

## Additional info

With some fixing, gvedit builds and seemingly works with QT6. In gvedit, we don't need to specify UTF-8 encoding in mdichild.cpp any more for QT6 - it is apparently the default. There were a few lines of fluff required in imageviewer.cpp to get QWidget resizing to compile again. QT6 doesn't have pkgconfig, so for testing, I commented out the tests in the top configure.ac, but it needs to be re-enabled.  gvedit/Makefile needed help to include -framework QWidgets and to know the location of QPrinter and QMainWindow for C++ - I am at a loss to explain why these are not linked by Homebrew to an easily discovered place.  That's about it.

It might be possible to avoid code changes using a qt5 shim for qt6, but is that a good idea?  That doesn't seem like it would help with the other problems. 

Is it better to have ifdefs for QT5 and QT6, or just cut over to QT6?

Someone needs to investigate QT6 licensing questions.

Stephen![Screen_Shot_2022-04-20_at_5.57.31_PM](/uploads/79dd1481da4d9f6e7d584775005b0f9a/Screen_Shot_2022-04-20_at_5.57.31_PM.png)"
1829,"5.0.1","{}","{cmd/dotty/mswin32/dotty.c,cmd/lneato/mswin32/lneato.c}","## Steps to reproduce

Install or build a Windows 32-bit MSBuild Release build.

Run `smyrna -?`

## Expected Behaviour

No errors.

## Actual Behaviour

Four pop-ups (in sequence) complaining about missing DLLs:

![image](/uploads/642b8920c1a0ce054854a0b2d6942293/image.png)
![image](/uploads/432d9b3a101104d4f546100566b7bb33/image.png)
![image](/uploads/3d5a0d1dd424ddfbebac9b3d7596ffb2/image.png)
![image](/uploads/1465b8a726be741eb5460178c657b138/image.png)

## OS Version

Windows 10.

## Graphviz Version

dot - graphviz version 2.44.2~dev.20200920.1253 (20200920.1253)

Home-built based on commit 37ee115a779092feabd61ac11f1faec80b955783

## Additional info

The DLLs are missing from https://gitlab.com/graphviz/graphviz-windows-dependencies. The corresponding `.lib` files exist, but they do not *seem* to be static libraries (containing object files), just import libraries (containing symbols to allow the linker to link to a DLL). See [this SO post](https://stackoverflow.com/a/913744/3122101) for more about `.lib` & `.dll`  files.

The `smyrna.vcxproj` contains commands to copy the (nonexistent) DLLs to the output directory, but they fail silently.

I guess it's the same problem in MSBuild Debug builds, but I haven't tried. `smyrna` is not built in CMake builds."
1713,"2.44.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1753,"2.49.3","{lib/circogen/block.c}","{lib/circogen/block.c}","## Steps to reproduce

Install Graphviz using the `CMake` installer, e.g. by following [these instructions](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224#abbreviated-installation-instructions-recommended-for-users-with-installation-experience)

## Expected Behaviour

Being able to run `neato`, `gvpr`, `fdp` and others.

## Actual Behaviour

```
C:\Users\magja>neato
'neato' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>gvpr
'gvpr' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\magja>fdp
'fdp' is not recognized as an internal or external command,
operable program or batch file.

```

## OS Version

Windows 10

## Graphviz Version

`dot - graphviz version 2.44.1 (20200629.0846)`

## Additional info

Listing the files in the `CMake` and `MSBuild` installation and grepping for these programs gives this:
```
cmake-files2.txt:./bin/gvplugin_neato_layout.dll
cmake-files2.txt:./lib/gvplugin_neato_layout.lib
cmake-files2.txt:./lib/pkgconfig/libgvpr.pc
msbuild-files2.txt:./bin/fdpgen.lib
msbuild-files2.txt:./bin/gvplugin_neato_layout.dll
msbuild-files2.txt:./bin/gvplugin_neato_layout.exp
msbuild-files2.txt:./bin/gvplugin_neato_layout.lib
msbuild-files2.txt:./bin/gvpr.exe
msbuild-files2.txt:./bin/gvprlib.dll
msbuild-files2.txt:./bin/gvprlib.exp
msbuild-files2.txt:./bin/gvprlib.lib
msbuild-files2.txt:./bin/lneato.exe
msbuild-files2.txt:./bin/neatogen.lib
msbuild-files2.txt:./bin/sfdp.lib
```
I don't know what to make of this info, other than that `gvpr` seems to be included in the `MSBuild` installation."
2057,"5.0.1","{}","{cmd/dot/dot_builtins.c}","## Steps to reproduce

Build for Windows x64 with CMake.

## Expected Behaviour

`gvToolTred` should be exported.

## Actual Behaviour

`gvToolTred` is not exported

## OS Version

Windows 10

## Graphviz Version

local build from main

## Additional info

It seems that GVC is using a def file for exports rather than annotating the exported interfaces.  This could be cleaned up with the proper use of a macro to indicate public interfaces."
2102,"4.0.0","{}","{cmd/tools/gvpack.c}","We currently do not have any build using MinGW on Windows. This makes it very cumbersome to make changes that affect such builds. This issue suggests that we add at least one such build using autotools and/or cmake.

References: #1940, !1739, !1760."
1854,"4.0.0","{cmd/lefty/cs2l/cs2l.h,lib/glcomp/opengl.h,cmd/lefty/ws/x11/libfilereq/SF.h}","{cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/libfilereq/SF.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
56,"7.0.5","{lib/common/boxes.h}","{lib/common/boxes.h}","*Created by: eruffaldi*

The following simple dot crashes due to a limitation in the buffer in trapezoids.c.

Crashing versions:
- 2.37 windows
- 2.39.20150109.0545 (20150109.0545) under OSX
- github master under OSX

BUT not crashing with 2.36 in Ubuntu 14.04

The workaround is to enlarge the allocation of the trapezoids as follows: TRSIZE = ntraps+1; 
## Example (the last edge causes the crash):

```
digraph ""Robot_Localization Components"" {
rankdir=LR;
ratio=compress;
splines=ortho;
size=""8.27,11.69"";
subgraph cluster_Robot_Localization {
labelloc=t;
fontname=""Times-bold"";
color=red;
label=<<B>Robot Localization</B>>;
fontsize=""16.0"";
fontcolor=black;
penwidth=2;
ramcip_some_other_ros_node [shape=plaintext, margin=0, label=<<TABLE border=""1"" cellspacing=""0"" cellborder=""1""><TR><TD>Registered point cloud, list of points (xyz,rgb)</TD></TR><TR><TD><B><BR/>ramcip_some_other_ros_node<BR/><BR/></B></TD></TR><TR><TD>Time stamped outputs</TD></TR></TABLE>>];
ramcip_mapping_or_hector_mapping [shape=plaintext, margin=0, label=<<TABLE border=""1"" cellspacing=""0"" cellborder=""1""><TR><TD>Undistorted, Rectified Depth image (512x424) pixels<BR/>Registered point cloud, list of points (xyz,rgb)</TD></TR><TR><TD><B><BR/>ramcip_mapping or hector_mapping<BR/><BR/></B></TD></TR><TR><TD>current pose expressed in world coordinates (xyz<BR/>rpy)<BR/>Time stamped outputs</TD></TR></TABLE>>];
}

kinect2_bridge_launch [shape=rect, style=filled, fillcolor=gray];
kinect2_bridge_launch -> ramcip_some_other_ros_node  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""sensor_msgs/PointCloud2""];
kinect2_bridge_launch -> ramcip_mapping_or_hector_mapping  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""sensor_msgs/Image\nsensor_msgs/PointCloud2""];
ramcip_large_object_tracking_large_object_tracking [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_large_object_tracking_large_object_tracking  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_robot_navigation_robot_navigation [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_robot_navigation_robot_navigation  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""Robot pose""];
ramcip_human_tracking_human_tracking [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_human_tracking_human_tracking  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_hierarchical_spaces_hierarchical_spaces [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_hierarchical_spaces_hierarchical_spaces  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_lower_body_phri_planner_lower_body_phri_planner [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_lower_body_phri_planner_lower_body_phri_planner  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""current pose expressed in world coordinates (XYZ and rpy euler angles)\nstd_msgs/Float64\nTBD. Delete this???""];
ramcip_affect_recognizer_affect_recognizer [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_affect_recognizer_affect_recognizer  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_manipulation_planner_and_control_manipulation_planner_and_control [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_manipulation_planner_and_control_manipulation_planner_and_control  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""geometry_msgs/PoseStamped or nav_msgs/Odometry\ngeometry_msgs/TwistStamped or nav_msgs/Odometry""];
ramcip_object_detection_object_detection [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_object_detection_object_detection  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_hand_over_controller_hand_over_controller [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_hand_over_controller_hand_over_controller  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""geometry_msgs/PoseStamped or nav_msgs/Odometry\ngeometry_msgs/TwistStamped or nav_msgs/Odometry""];
ramcip_ar_projector_ar_projector [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_ar_projector_ar_projector  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
ramcip_global_mapping_global_mapping [shape=rect, style=filled, fillcolor=gray];
ramcip_mapping_or_hector_mapping -> ramcip_global_mapping_global_mapping  [fontcolor=red, fontname=Verdana, fontsize=""8.0"", label=""*""];
}
```
"
1854,"5.0.0","{cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/libfilereq/SF.h}","{cmd/lefty/cs2l/cs2l.h,cmd/lefty/ws/x11/libfilereq/SF.h}","The following tools are not yet built for macOS in CI using autotools:

* ~~diffimg~~
* dotty
* gvedit
* lefty
* lneato
* mingle
* smyrna
* vimdot

The reason is that the necessary prerequisites are not yet installed on the GitLab macOS shared runner."
1573,"5.0.1","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Hi,

From what I can tell there is limited / no support for a 64bit build on windows.  I was able to modify the existing windows solutions to produce what I needed.  I failed to build the following projects (which I don't think are strictly necessary)

1. diffimg
2. gvplugin_gd
3. mingle
4. minglelib
5. smyrna

Here is my patch:

[win64.patch](/uploads/2c04aa23eceba9d94395c5235d1288f7/win64.patch)"
2338,"7.1.0","{lib/dotgen/position.c}","{lib/dotgen/position.c}","When building with LTO enabled, the compiler notices:

```
[ 84%] Linking C executable gvpr
/tmp/tmp.0FKCznWrdj/graphviz/lib/gvpr/../sfio/sfio.h:174:29: warning: type of ‘sfstderr’ does not match original declaration [-Wlto-type-mismatch]
  174 |     SFIO_API extern Sfio_t *sfstderr;
      |                             ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:34:9: note: ‘sfstderr’ was previously declared here
   34 | Sfio_t *sfstderr = &_Sfstderr;
      |         ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:34:9: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
/tmp/tmp.0FKCznWrdj/graphviz/lib/gvpr/../sfio/sfio.h:172:29: warning: type of ‘sfstdin’ does not match original declaration [-Wlto-type-mismatch]
  172 |     SFIO_API extern Sfio_t *sfstdin;
      |                             ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:32:9: note: ‘sfstdin’ was previously declared here
   32 | Sfio_t *sfstdin = &_Sfstdin;
      |         ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:32:9: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
/tmp/tmp.0FKCznWrdj/graphviz/lib/gvpr/../sfio/sfio.h:173:29: warning: type of ‘sfstdout’ does not match original declaration [-Wlto-type-mismatch]
  173 |     SFIO_API extern Sfio_t *sfstdout;
      |                             ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:33:9: note: ‘sfstdout’ was previously declared here
   33 | Sfio_t *sfstdout = &_Sfstdout;
      |         ^
/tmp/tmp.0FKCznWrdj/graphviz/lib/sfio/sfextern.c:33:9: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
```

This is sort of analogous to a violation of C++’s One Definition Rule (ODR). What’s happening is that the definition of the underlying struct of the typedef `Sfio_t`, `_sfio_s`, is seen twice, once with `_SFIO_PRIVATE` defined and once without. So different parts of the compilation see a different struct behind `Sfio_t`. Normally the compiler is blind to this because the differences occur between translation units. But LTO allows it to see across this boundary.

The risk of a problem here is relatively low (most `Sfio_t` usage is by pointer only), but we should probably address this for the sake of avoiding future miscompilations as compiler optimizations become more aggressive."
1697,"5.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1697,"4.0.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1785,"6.0.1","{tclpkg/tcldot/no_builtins.c,tclpkg/gv/gv_builtins.c,cmd/dot/no_builtins.c,lib/fdpgen/comp.h,lib/glcomp/glcomptexture.h}","{tclpkg/tcldot/no_builtins.c,tclpkg/gv/gv_builtins.c,cmd/dot/no_builtins.c,lib/fdpgen/comp.h,lib/glcomp/glcomptexture.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1785,"7.0.1","{lib/circogen/blockpath.h,lib/fdpgen/comp.h,lib/dotgen/position.c,lib/glcomp/glcomptexture.h}","{lib/circogen/blockpath.h,lib/fdpgen/comp.h,lib/dotgen/position.c,lib/glcomp/glcomptexture.h}","[I'm the libc++ maintainer]

I was trying to build Graphviz using the latest version of libc++ (the C++ Standard Library shipped with the Clang compiler, and used on Apple platforms), and I noticed the following error:

```
In file included from <graphviz>/blocks.cpp:22:
In file included from <graphviz>/blocks.h:32:
In file included from <toolchain>/usr/bin/include/c++/v1/set:427:
In file included from <toolchain>/usr/bin/include/c++/v1/__tree:17:
In file included from <toolchain>/usr/bin/include/c++/v1/algorithm:644:
In file included from <toolchain>/usr/bin/include/c++/v1/functional:512:
In file included from <graphviz>/Block.h:26:
In file included from <toolchain>/usr/bin/include/c++/v1/vector:274:
<toolchain>/usr/include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'
```

The issue is that we `#include <Block.h>` from <functional>, however Graphviz contains a block.h header (which is the same as Block.h on a case insensitive FS), and they collide. This triggers some circular dependency issue in libc++, which causes the build to fail. The root cause of the issue is that by including `<Block.h>` in libc++, we're potentially conflicting with a user-provided `<Block.h>` header. It would be better if `<Block.h>` were somehow namespaced, so that we know for sure we're not including a user provided header, however that's not the reality we live in.

I suggest fixing Graphviz in one of two ways:

1. Rename your `block.h` header to something else, or
2. Avoid adding `<graphviz>/lib/vpsc` to the include paths of the compiler. Instead, add `<graphviz>/lib` and then include `<vpsc/block.h>` from your code. This will effectively namespace the block.h header from your side, making sure that we don't find it when we include `<Block.h>` from libc++.

I acknowledge this is an annoying issue and I wish we had a better way of solving it from our side in libc++, however I can't think of a good solution from our side."
1697,"2.46.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","Dear Graphviz community,

First of all, many thanks for this wonderfull tool. I am using it for many purposes and it is very easy to use, fast and efficient.
I have currently linked graphviz to a C++ program to generate graphs.
My question is the following:
The program I am writing works perfectly fine with 32 bits version. However I would also like to create a 64 bits version.

**Is there a graphviz version for windows that is 64 bits?**

Many thanks for your answers.

Regards"
1742,"2.46.0","{lib/rbtree/red_black_tree.h}","{lib/rbtree/misc.h,lib/rbtree/red_black_tree.h}","lib/rbtree uses `setjmp`/`longjmp` to implement exception-style handling of allocation failures. Of the three call sites of `setjmp`, two return immediately. The remaining one in `RBTreeCreate` looks like this (lib/rbtree/red_black_tree.c:38-47):

```c
38   rb_red_blk_tree* newTree = NULL;
39   rb_red_blk_node* temp;
40
41   if (setjmp(rb_jbuf)) {
42     if (newTree) {
43       if (newTree->nil) free (newTree->nil);
44       free (newTree);
45     }
46     return NULL;
47   }
```

As far back as C89, the standard has the following wording:

> All accessible objects have values as of the time `longjmp` was called, except that the values of objects of automatic storage duration that are local to the function containing the invocation of the corresponding `setjmp` macro that do not have volatile-qualified type and have been changed between the `setjmp` invocation and `longjmp` call are indeterminate.

I have noticed recent versions of GCC (~9 onwards) taking advantage of this clause. I would not be surprised if an optimizing compilation removes the calls to `free` in this block, or even removes the `setjmp` entirely by reasoning backwards that no matching `longjmp` can occur because it would lead to indeterminate reads. Older GCC should warn about this with `-Wclobbered` and newer GCC with `-Wmaybe-unitialized`. I think we should proactively refactor this before someone files a cryptic issue stemming from a corrupted `longjmp`.

We could address this by marking `newTree` `volatile`. However the use of this mechanism is limited enough that I think we should just refactor rbtree to use conventional return codes instead of exception-style."
1713,"2.46.0","{lib/edgepaint/lab_gamut.c}","{lib/edgepaint/lab_gamut.c}","This was announced recently:

https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/

AppVeyor is pretty slow, limiting free plans to one parallel job running at once - in practice this means it can take over half an hour for builds and tests to run on Windows.

But GitLab CI is free for Open Source projects like Graphviz, so we could run the jobs in parallel.

Today, the windows jobs don't run at pull-request time, only after merging (probably because they're so slow). It would be good to make them fast so they can run at pull-request time.

@magjac mentions at https://gitlab.com/graphviz/graphviz/-/merge_requests/1345#note_338086371: 

> It's a pity that we currently don't run the Windows builds in the test stage before deploy because then it doesn't get run for merge requests. @ellson Can we can change this? Or don't you want to delay the deploy with the long Windows builds?"
1832,"8.0.1","{}","{plugin/visio/VisioRender.cpp}","I thought we should have a proper issue to track progress on this, even if we can't start until December 2020.

Context:

https://forum.graphviz.org/t/c-c-standards/133/3"
